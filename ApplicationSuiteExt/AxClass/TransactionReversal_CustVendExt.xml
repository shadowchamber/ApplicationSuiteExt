<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TransactionReversal_CustVendExt</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>TransactionReversal_CustVend</c> class helps create both customer and vendor transactions,
///    by using the map <c>CustVendTrans</c>.
/// </summary>
/// <remarks>
///    <c>CreateCustVendTrans</c> is the only method that is used in this class. It is used when it
///    creates both customer and vendor transactions, by using the map <c>CustVendTrans</c>.This class is
///    derived from the <c>TransactionReversal</c> parent class. It is used as a parent class for the
///    <c>TransactionReversal_Cust</c> and <c>TransactionReversal_Vend</c> classes.
/// </remarks>
class TransactionReversal_CustVendExt extends TransactionReversalExt
{
    CustVendSettlement custVendSettlement;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>clearExch</Name>
				<Source><![CDATA[
    private void clearExch(CustVendTrans _custVendTrans)
    {
        _custVendTrans.LastExchAdj = dateNull();
        _custVendTrans.LastExchAdjRate = 0;
        _custVendTrans.LastExchAdjVoucher = '';
        _custVendTrans.ExchAdjustment = 0;
        _custVendTrans.ExchAdjustmentRealized = 0;
        _custVendTrans.ExchAdjustmentUnrealized = 0;
        _custVendTrans.ExchAdjustmentReporting = 0;
        _custVendTrans.ReportingExchAdjustmentRealized = 0;
        _custVendTrans.ReportingExchAdjustmentUnrealized = 0;
        _custVendTrans.LastExchAdjRateReporting = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCustVendTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a transaction that will reverse the last transaction.
    /// </summary>
    /// <param name = "_custVendTransLast">The transaction that will be reversed.</param>
    /// <param name = "_custVendTransOrig">The original transaction.</param>
    /// <param name = "_notLastReversal">Identifies the last reversal.</param>
    public void createCustVendTrans(
        CustVendTrans _custVendTransLast,
        CustVendTrans _custVendTransOrig,
        boolean _notLastReversal = false)
    {
        CustVendTrans custVendTransNew = CustVendTransStatic::newTrans(_custVendTransLast).custVendTrans();
        CustVendTransOpen custVendTransOpen = CustVendTransStatic::newTrans(_custVendTransLast).custVendTransOpen();

        custVendSettlement = CustVendTransStatic::newTrans(_custVendTransLast).custVendSettlement();
        this.setTransactionTxt(_custVendTransOrig.TransDate, _custVendTransOrig.Voucher, _custVendTransOrig.Invoice, _custVendTransOrig.AccountNum);

        // Create transaction that will reverse the original transaction
        custVendTransNew.clear();
        custVendTransNew.data(_custVendTransOrig);

        custVendTransNew.Voucher = reversalVoucher;
        custVendTransNew.TransDate = reversalDate;
        if (transactionTxt.txt())
        {
            custVendTransNew.Txt = transactionTxt.txt();
        }
        custVendTransNew.AccountingEvent = 0;

        if (_custVendTransOrig.Invoice)
        {
            this.createInvoiceJournal(custVendTransNew, _custVendTransLast);
        }

        if (_custVendTransOrig.LastExchAdj)
        {
            if (this.reverseExch(_custVendTransOrig))
            {
                this.clearExch(custVendTransNew);
            }
        }

        this.processTransactionReversalTrans(_custVendTransLast, _custVendTransOrig);

        if (revoke)
        {
            this.populateCustVendTransNewForRevoke(custVendTransNew, _custVendTransLast);
            custVendTransNew.insert();

            this.processCustTransIdRef(custVendTransNew);

            this.populateCustVendTransOriginalForRevokeReOpen(_custVendTransOrig);
            _custVendTransOrig.update();

            this.populateCustVendTransOpenForRevokeReCreate(custVendTransOpen, _custVendTransOrig);
            custVendTransOpen.insert();

            this.createTransOpenLine(custVendTransOpen);

            this.findCustVendSettlementForRevokeToMoveCashDiscountToCustVendTransOpen(_custVendTransOrig, _custVendTransLast);
            this.moveCashDisc(custVendSettlement.TableId, custVendSettlement.RecId, custVendTransOpen.TableId, custVendTransOpen.RecId);

            this.populateCustVendTransLastForRevoke(_custVendTransLast, custVendTransNew);
            _custVendTransLast.update();

            this.populateCustVendSettlementForRevokeCustVendTransLastAndCustVendTransNew(_custVendTransLast, custVendTransNew);
            custVendSettlement.insert();

            this.populateCustVendSettlementForRevokeCustVendTransNewAndCustVendTransLast(custVendTransNew, _custVendTransLast);
            custVendSettlement.insert();

            this.populateCustVendSettlementForRevokeCustVendTransOrigAndCustVendTransLast(_custVendTransOrig, _custVendTransLast);
            custVendSettlement.insert();

            this.populateCustVendSettlementForRevokeCustVendTransLastAndCustVendTransOrig(_custVendTransLast, _custVendTransOrig);
            custVendSettlement.insert();
        }
        else
        {
            this.populateCustVendTransNewForReverse(custVendTransNew, _custVendTransLast);
            custVendTransNew.insert();

            this.populateCustVendTransOriginalForReverse(_custVendTransOrig, custVendTransNew);
            _custVendTransOrig.update();

            this.processCustTransIdRef(custVendTransNew);

            if (custVendTransNew.SettleAmountCur != 0 
                || custVendTransNew.SettleAmountMST != 0
                || custVendTransNew.SettleAmountReporting != 0)
            {
                this.populateCustVendSettlementForReverseCustVendTransNewAndCustVendTransOrig(custVendTransNew, _custVendTransOrig);
                custVendSettlement.insert();
            }

            this.populateCustVendSettlementForReverseCustVendTransOrigAndCustVendTransNew(_custVendTransOrig, custVendTransNew);
            custVendSettlement.insert();

            // Remove the open transaction record and move the cash discount to the settlement
            custVendTransOpen = null;
            this.removeCustVendTransOpen(_custVendTransOrig.RecId, custVendSettlement.TableId, custVendSettlement.RecId);
        }

        // If this is created due to reversal of Exchange adjustment, it is not to be set as "Last"
        TransactionReversalTrans::createTransaction(this.tableIdNumber(),
            custVendTransNew.RecId,
            reversalTraceNum,
            false,
            !_notLastReversal);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processTransactionReversalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Process <c>TransactionReversalTrans</c>.
    /// </summary>
    /// <param name = "_custVendTransLast">The last <c>CustVendTrans</c>.</param>
    /// <param name = "_custVendTransOrig">The origanal <c>CustVendTrans</c>.</param>
    protected void processTransactionReversalTrans(CustVendTrans _custVendTransLast, CustVendTrans _custVendTransOrig)
    {
        TransactionReversalTrans transactionReversalTransLast;
        TraceNum traceNumOrig;

        traceNumOrig = TransactionReversalTrans::findTransactionReversalTrans(_custVendTransLast.TableId, _custVendTransLast.RecId).TraceNum;
        transactionReversalTransLast = TransactionReversalTrans::findLastTransactionReversalTrans(traceNumOrig, true);

        // First time reversal. TransactionReversalTrans from Exchange can exist without a "Last"
        if (!traceNumOrig || !transactionReversalTransLast)
        {
            TransactionReversalTrans::createTransaction(this.tableIdNumber(),
                                                        _custVendTransOrig.RecId,
                                                        reversalTraceNum,
                                                        true,
                                                        false,
                                                        false);
        }
        else
        {
            // update the former last TransactionReversalTrans hence it is no longer the last TransactionReversalTrans
            if (transactionReversalTransLast)
            {
                transactionReversalTransLast.Last = false;
                transactionReversalTransLast.update();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateCustVendTransNewForRevoke</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populate the new <c>CustVendTrans</c> for the revoke of the last <c>CustVendTrans</c>.
    /// </summary>
    /// <param name = "_custVendTransNew">The new <c>CustVendTrans</c>.</param>
    /// <param name = "_custVendTransLast">The last <c>CustVendTrans</c>.</param>
    protected void populateCustVendTransNewForRevoke(CustVendTrans _custVendTransNew, CustVendTrans _custVendTransLast)
    {
        this.populateCustVendTransNewForRevokeAndReverse(_custVendTransNew, _custVendTransLast);
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateCustVendTransNewForReverse</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populate the new <c>CustVendTrans</c> for the reversal of the last <c>CustVendTrans</c>.
    /// </summary>
    /// <param name = "_custVendTransNew">The new <c>CustVendTrans</c>.</param>
    /// <param name = "_custVendTransLast">The last <c>CustVendTrans</c>.</param>
    protected void populateCustVendTransNewForReverse(CustVendTrans _custVendTransNew, CustVendTrans _custVendTransLast)
    {
        this.populateCustVendTransNewForRevokeAndReverse(_custVendTransNew, _custVendTransLast);
        _custVendTransNew.Correct = LedgerParameters::find().TransactionReversalCorrection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateCustVendTransNewForRevokeAndReverse</Name>
				<Source><![CDATA[
    private void populateCustVendTransNewForRevokeAndReverse(CustVendTrans _custVendTransNew, CustVendTrans _custVendTransLast)
    {
        _custVendTransNew.AmountCur = -_custVendTransLast.AmountCur;
        _custVendTransNew.AmountMST = -_custVendTransLast.AmountMST;
        _custVendTransNew.ReportingCurrencyAmount = -_custVendTransLast.ReportingCurrencyAmount;

        _custVendTransNew.SettleAmountCur = _custVendTransNew.AmountCur;
        _custVendTransNew.SettleAmountMST = _custVendTransNew.AmountMST;
        _custVendTransNew.SettleAmountReporting = _custVendTransNew.ReportingCurrencyAmount;

        _custVendTransNew.LastSettleDate = _custVendTransNew.TransDate;
        _custVendTransNew.LastSettleVoucher = _custVendTransLast.Voucher;
        _custVendTransNew.LastSettleAccountNum = _custVendTransLast.AccountNum;
        _custVendTransNew.LastSettleCompany = _custVendTransLast.DataAreaId;
        _custVendTransNew.OffsetRecId = _custVendTransLast.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processCustTransIdRef</Name>
				<Source><![CDATA[
    /// <summary>
    /// Process <c>CustTransIdRef</c>.
    /// </summary>
    /// <param name = "_custVendTransNew">The new <c>CustVendTrans</c>.</param>
    protected void processCustTransIdRef(CustVendTrans _custVendTransNew)
    {
        if (_custVendTransNew.TableId == tablenum(CustTrans))
        {
            CustTransIdRef::insertForCustTrans(_custVendTransNew, _custVendTransNew.Voucher, CustTransRefType::Other);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateCustVendTransOriginalForRevokeReOpen</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populate the original <c>CustVendTrans</c> for the revoke of the last <c>CustVendTrans</c>.
    /// </summary>
    /// <param name = "_custVendTransOrig">The original <c>CustVendTrans</c>.</param>
    protected void populateCustVendTransOriginalForRevokeReOpen(CustVendTrans _custVendTransOrig)
    {
        _custVendTransOrig.CustVendTrans::clearLastSettlement(
            _custVendTransOrig.SettleAmountCur,
            _custVendTransOrig.SettleAmountMST,
            _custVendTransOrig.SettleAmountReporting);

        _custVendTransOrig.Closed = dateNull();
        _custVendTransOrig.OffsetRecId = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateCustVendTransOriginalForReverse</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populate the original <c>CustVendTrans</c> for the reversal of the last <c>CustVendTrans</c>.
    /// </summary>
    /// <param name = "_custVendTransOrig">The original <c>CustVendTrans</c>.</param>
    /// <param name = "_custVendTransNew">The new <c>CustVendTrans</c>.</param>
    protected void populateCustVendTransOriginalForReverse(CustVendTrans _custVendTransOrig, CustVendTrans _custVendTransNew)
    {
        // Settle the original transaction
        _custVendTransOrig.SettleAmountCur = _custVendTransOrig.AmountCur;
        _custVendTransOrig.SettleAmountMST = _custVendTransOrig.AmountMST;
        _custVendTransOrig.SettleAmountReporting = _custVendTransOrig.ReportingCurrencyAmount;
        _custVendTransOrig.Closed = reversalDate;

        _custVendTransOrig.LastSettleDate = reversalDate;
        _custVendTransOrig.LastSettleVoucher = _custVendTransNew.Voucher;
        _custVendTransOrig.LastSettleAccountNum = _custVendTransNew.AccountNum;
        _custVendTransOrig.LastSettleCompany = _custVendTransNew.DataAreaId;

        _custVendTransOrig.OffsetRecId = _custVendTransNew.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateCustVendTransOpenForRevokeReCreate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populate <c>CustVendTransOpen</c> for the revoke of the last <c>CustVendTrans</c> by recreating the <c>CustVendTransOpen</c>.
    /// </summary>
    /// <param name = "_custVendTransOpen">The <c>CustVendTransOpen</c> that will be recreated.</param>
    /// <param name = "_custVendTransOrig">The original <c>CustVendTrans</c>.</param>
    protected void populateCustVendTransOpenForRevokeReCreate(CustVendTransOpen _custVendTransOpen, CustVendTrans _custVendTransOrig)
    {
        // <GIN>
        CustVendTrans_W custVendTrans_W;
        // </GIN>

        _custVendTransOpen.clear();
        _custVendTransOpen.AccountNum = _custVendTransOrig.AccountNum;
        _custVendTransOpen.RefRecId = _custVendTransOrig.RecId;
        _custVendTransOpen.TransDate = _custVendTransOrig.TransDate;
        _custVendTransOpen.AmountCur = _custVendTransOrig.AmountCur;
        _custVendTransOpen.AmountMST = _custVendTransOrig.AmountMST;
        _custVendTransOpen.ReportingCurrencyAmount = _custVendTransOrig.ReportingCurrencyAmount;
        _custVendTransOpen.DueDate = _custVendTransOrig.DueDate;

        // <GIN>
        if (TaxWithholdParameters_IN::checkTaxParameters())
        {
            custVendTrans_W = _custVendTransOrig.CustVendTrans::getCustVendTrans_W();
            _custVendTransOpen.TaxWithholdAmountOrigin_IN = custVendTrans_W.TaxWithholdAmountOrigin_IN;
            _custVendTransOpen.tcsAmount_IN = custVendTrans_W.tcsAmount_IN;
            _custVendTransOpen.tdsAmount_IN = custVendTrans_W.tdsAmount_IN;
        }
        // </GIN>
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCustVendSettlementForRevokeToMoveCashDiscountToCustVendTransOpen</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find the <c>CustVendSettlement</c> for the revoke of the last <c>CustVendTrans</c> to move the cash discount to recreated <c>CustVendTransOpen</c>.
    /// </summary>
    /// <param name = "_custVendTransOrig">The original <c>CustVendTrans</c>.</param>
    /// <param name = "_custVendTransLast">The last <c>CustVendTrans</c>.</param>
    protected void findCustVendSettlementForRevokeToMoveCashDiscountToCustVendTransOpen(CustVendTrans _custVendTransOrig, CustVendTrans _custVendTransLast)
    {
        select firstonly custVendSettlement
            where custVendSettlement.TransRecId == _custVendTransOrig.RecId
                && custVendSettlement.AccountNum == _custVendTransOrig.AccountNum
                && custVendSettlement.OffsetTransVoucher == _custVendTransLast.Voucher
                && custVendSettlement.OffsetCompany == _custVendTransLast.company();
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateCustVendTransLastForRevoke</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populate the last <c>CustVendTrans</c> for the revoke of the last <c>CustVendTrans</c>.
    /// </summary>
    /// <param name = "_custVendTransLast">The last <c>CustVendTrans</c>.</param>
    /// <param name = "_custVendTransNew">The new <c>CustVendTrans</c>.</param>
    protected void populateCustVendTransLastForRevoke(CustVendTrans _custVendTransLast, CustVendTrans _custVendTransNew)
    {
        _custVendTransLast.LastSettleDate = _custVendTransNew.TransDate;
        _custVendTransLast.LastSettleVoucher = _custVendTransNew.Voucher;
        _custVendTransLast.LastSettleAccountNum = _custVendTransNew.AccountNum;
        _custVendTransLast.LastSettleCompany = _custVendTransNew.DataAreaId;
        _custVendTransLast.OffsetRecId = _custVendTransNew.RecId;
        _custVendTransLast.Closed = _custVendTransNew.TransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateCustVendSettlementForRevokeCustVendTransLastAndCustVendTransNew</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populate <c>CustVendSettlement</c> for the revoke of the last <c>CustVendTrans</c> with the last <c>CustVendTrans</c> and new <c>CustVendTrans</c>.
    /// </summary>
    /// <param name = "_custVendTransLast">The last <c>CustVendTrans</c>.</param>
    /// <param name = "_custVendTransNew">The new <c>CustVendTrans</c>.</param>
    protected void populateCustVendSettlementForRevokeCustVendTransLastAndCustVendTransNew(CustVendTrans _custVendTransLast, CustVendTrans _custVendTransNew)
    {
        custVendSettlement.clear();
        this.setSettlementIdentification(_custVendTransLast.AccountNum, _custVendTransLast.RecId, _custVendTransLast.company(), reversalDate, reversalVoucher, _custVendTransLast.DueDate);
        this.setSettlementAmount(_custVendTransLast.AmountCur, _custVendTransLast.AmountMST, _custVendTransLast.ReportingCurrencyAmount);
        this.setSettlementOffset(_custVendTransNew.RecId, _custVendTransNew.company(), _custVendTransNew.AccountNum, _custVendTransNew.Voucher);
        this.setSettlementTransType(_custVendTransLast.TransType);
        this.setSettlementClosedDate(reversalDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateCustVendSettlementForRevokeCustVendTransNewAndCustVendTransLast</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populate <c>CustVendSettlement</c> for the revoke of the last <c>CustVendTrans</c> with the new <c>CustVendTrans</c> and last <c>CustVendTrans</c>.
    /// </summary>
    /// <param name = "_custVendTransNew">The new <c>CustVendTrans</c>.</param>
    /// <param name = "_custVendTransLast">The last <c>CustVendTrans</c>.</param>
    protected void populateCustVendSettlementForRevokeCustVendTransNewAndCustVendTransLast(CustVendTrans _custVendTransNew, CustVendTrans _custVendTransLast)
    {
        custVendSettlement.clear();
        this.setSettlementIdentification(_custVendTransNew.AccountNum, _custVendTransNew.RecId, _custVendTransNew.company(), reversalDate, reversalVoucher, _custVendTransNew.DueDate);
        this.setSettlementAmount(_custVendTransNew.AmountCur, _custVendTransNew.AmountMST, _custVendTransNew.ReportingCurrencyAmount);
        this.setSettlementOffset(_custVendTransLast.RecId, _custVendTransLast.company(), _custVendTransLast.AccountNum, _custVendTransLast.Voucher);
        this.setSettlementTransType(_custVendTransNew.TransType);
        this.setSettlementClosedDate(reversalDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateCustVendSettlementForRevokeCustVendTransOrigAndCustVendTransLast</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populate <c>CustVendSettlement</c> for the revoke of the last <c>CustVendTrans</c> with the original <c>CustVendTrans</c> and last <c>CustVendTrans</c>.
    /// </summary>
    /// <param name = "_custVendTransOrig">The original <c>CustVendTrans</c>.</param>
    /// <param name = "_custVendTransLast">The last <c>CustVendTrans</c>.</param>
    protected void populateCustVendSettlementForRevokeCustVendTransOrigAndCustVendTransLast(CustVendTrans _custVendTransOrig, CustVendTrans _custVendTransLast)
    {
        custVendSettlement.clear();
        this.setSettlementIdentification(_custVendTransOrig.AccountNum, _custVendTransOrig.RecId, _custVendTransOrig.company(), reversalDate, reversalVoucher, _custVendTransOrig.DueDate);
        this.setSettlementAmount(-_custVendTransOrig.AmountCur, -_custVendTransOrig.AmountMST, -_custVendTransOrig.ReportingCurrencyAmount);
        this.setSettlementOffset(_custVendTransLast.RecId, _custVendTransLast.company(), _custVendTransLast.AccountNum, _custVendTransLast.Voucher);
        this.setSettlementTransType(_custVendTransOrig.TransType);
        this.setSettlementClosedDate(reversalDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateCustVendSettlementForRevokeCustVendTransLastAndCustVendTransOrig</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populate <c>CustVendSettlement</c> for the revoke of the last <c>CustVendTrans</c> with the last <c>CustVendTrans</c> and original <c>CustVendTrans</c>.
    /// </summary>
    /// <param name = "_custVendTransLast">The last <c>CustVendTrans</c>.</param>
    /// <param name = "_custVendTransOrig">The original <c>CustVendTrans</c>.</param>
    protected void populateCustVendSettlementForRevokeCustVendTransLastAndCustVendTransOrig(CustVendTrans _custVendTransLast, CustVendTrans _custVendTransOrig)
    {
        // the amounts are reversed because the reversing the settlement
        custVendSettlement.clear();
        this.setSettlementIdentification(_custVendTransLast.AccountNum, _custVendTransLast.RecId, _custVendTransLast.company(), reversalDate, reversalVoucher, _custVendTransLast.DueDate);
        this.setSettlementAmount(-_custVendTransLast.AmountCur, -_custVendTransLast.AmountMST, -_custVendTransLast.ReportingCurrencyAmount);
        this.setSettlementOffset(_custVendTransOrig.RecId, _custVendTransOrig.company(), _custVendTransOrig.AccountNum, _custVendTransOrig.Voucher);
        this.setSettlementTransType(_custVendTransLast.TransType);
        this.setSettlementClosedDate(reversalDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateCustVendSettlementForReverseCustVendTransNewAndCustVendTransOrig</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populate <c>CustVendSettlement</c> for the reversal of the last <c>CustVendTrans</c> with the new <c>CustVendTrans</c> and original <c>CustVendTrans</c>.
    /// </summary>
    /// <param name = "_custVendTransNew">The new <c>CustVendTrans</c>.</param>
    /// <param name = "_custVendTransOrig">The original <c>CustVendTrans</c>.</param>
    protected void populateCustVendSettlementForReverseCustVendTransNewAndCustVendTransOrig(CustVendTrans _custVendTransNew, CustVendTrans _custVendTransOrig)
    {
        custVendSettlement.clear();
        this.setSettlementIdentification(_custVendTransNew.AccountNum, _custVendTransNew.RecId, _custVendTransNew.company(), reversalDate, reversalVoucher, _custVendTransNew.TransDate);
        this.setSettlementAmount(_custVendTransNew.AmountCur, _custVendTransNew.AmountMST, _custVendTransNew.ReportingCurrencyAmount);
        this.setSettlementOffset(_custVendTransOrig.RecId, _custVendTransOrig.company(), _custVendTransOrig.AccountNum, _custVendTransOrig.Voucher);
        this.setSettlementTransType(_custVendTransNew.TransType);
        this.setSettlementClosedDate(reversalDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateCustVendSettlementForReverseCustVendTransOrigAndCustVendTransNew</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populate <c>CustVendSettlement</c> for the reversal of the last <c>CustVendTrans</c> with the original <c>CustVendTrans</c> and new <c>CustVendTrans</c>.
    /// </summary>
    /// <param name = "_custVendTransNew">The original <c>CustVendTrans</c>.</param>
    /// <param name = "_custVendTransOrig">The new <c>CustVendTrans</c>.</param>
    protected void populateCustVendSettlementForReverseCustVendTransOrigAndCustVendTransNew(CustVendTrans _custVendTransOrig, CustVendTrans _custVendTransNew)
    {
        custVendSettlement.clear();
        this.setSettlementIdentification(_custVendTransOrig.AccountNum, _custVendTransOrig.RecId, _custVendTransOrig.company(), reversalDate, reversalVoucher, _custVendTransOrig.DueDate);
        this.setSettlementAmount(_custVendTransOrig.AmountCur, _custVendTransOrig.AmountMST, _custVendTransOrig.ReportingCurrencyAmount);
        this.setSettlementOffset(_custVendTransNew.RecId, _custVendTransNew.company(), _custVendTransNew.AccountNum, _custVendTransNew.Voucher);
        this.setSettlementTransType(_custVendTransNew.TransType);
        this.setSettlementClosedDate(reversalDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSettlementTransType</Name>
				<Source><![CDATA[
    private void setSettlementTransType(LedgerTransType _transType)
    {
        custVendSettlement.TransType = _transType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSettlementClosedDate</Name>
				<Source><![CDATA[
    private void setSettlementClosedDate(TransDate _closedDate)
    {
        custVendSettlement.ClosedDate = _closedDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInvoiceJournal</Name>
				<Source><![CDATA[
    void createInvoiceJournal(CustVendTrans _custVendTrans, CustVendTrans _custVendTransOrig)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTransOpenLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates open transaction lines for the free text invoice.
    /// </summary>
    /// <param name="_custVendTransOpen">
    ///    The <c>CustVendTransOpen</c> table buffer to hold the lines.
    /// </param>

    protected void createTransOpenLine(CustVendTransOpen _custVendTransOpen)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCustVendTransOpen</Name>
				<Source><![CDATA[
    CustVendTransOpen findCustVendTransOpen(recId _recId)
    {
        throw error(Error::missingOverload(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getModuleCustVend</Name>
				<Source><![CDATA[
    protected ModuleCustVend getModuleCustVend()
    {
        throw error(Error::missingOverload(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSysModule</Name>
				<Source><![CDATA[
    protected SysModule getSysModule()
    {
        throw error(Error::missingOverload(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasTransferOccurred</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether an <c>AccountingEvent</c> record has been transferred to general ledger.
    /// </summary>
    /// <param name="_accountingEventRecId">
    /// The record ID of the <c>AccountingEvent</c> record.
    /// </param>
    /// <returns>
    /// true if the accounting event has been transferred to general ledger or if a transfer is not
    /// applicable; otherwise, false.
    /// </returns>
    protected boolean hasTransferOccurred(AccountingEventRecId _accountingEventRecId)
    {
        AccountingEvent accountingEvent;
        boolean hasTransferOccurred = true;

        if (_accountingEventRecId != 0)
        {
            accountingEvent = accountingEvent::find(_accountingEventRecId);
            if (accountingEvent)
            {
                if (accountingEvent.State != AccountingEventState::Complete)
                {
                    hasTransferOccurred = false;
                }
            }
        }

        return hasTransferOccurred;
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveCashDisc</Name>
				<Source><![CDATA[
    void moveCashDisc(
        tableId _custSettlementTableId,
        recId _custSettlementRecId,
        tableId _custTransOpenTableId,
        recId _custTransOpenRecId)
    {
        throw error(Error::missingOverload(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeCustVendTransOpen</Name>
				<Source><![CDATA[
    void removeCustVendTransOpen(
        recId _refRecId,
        tableId custVendSettlementTableId,
        recId custVendSettlementRecId)
    {
        throw error(Error::missingOverload(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseExch</Name>
				<Source><![CDATA[
    protected boolean reverseExch(CustVendTrans _custVendTrans)
    {
        CustVendTrans custVendTransExch = CustVendTrans::getEmptyTableBuffer(this.getModuleCustVend());
        TransactionReversal_Ledger transactionReversal_Ledger = TransactionReversal_Ledger::construct();

        if (TransactionReversalExecutionDetail::isReversingWithContract(this.parmContract()))
        {
            transactionReversal_Ledger.parmReasonRefRecId(reasonRefRecID);
        }

        custVendTransExch = this.findLastExchAdjustmentEntry(_custVendTrans);

        if (custVendTransExch)
        {
            //Reverse the currency revaluation accounting
            transactionReversal_Ledger.parmReversalDate(reversalDate);
            transactionReversal_Ledger.parmReversalTraceNum(reversalTraceNum);
            transactionReversal_Ledger.parmReversalVoucher(reversalVoucher);
            transactionReversal_Ledger.parmSysModule(this.getSysModule());
            transactionReversal_Ledger.parmExchangeAdjustment(NoYes::Yes);
            transactionReversal_Ledger.parmExchangeAdjustmentAmount(custVendTransExch.ExchAdjustment);
            transactionReversal_Ledger.parmExchangeAdjustmentReportingAmount(custVendTransExch.ExchAdjustmentReporting);
            transactionReversal_Ledger.createGeneralJournal(_custVendTrans.LastExchAdjVoucher, _custVendTrans.LastExchAdj, ledgerVoucher);

            //Clear the Exch information for the original document that is being reversed
            this.clearExch(_custVendTrans);
            _custVendTrans.update();

            //Create CustVendTrans currency exchange reversal entry
            CustVendTrans custVendTransExchReversal = CustVendTrans::getEmptyTableBuffer(this.getModuleCustVend());
            custVendTransExchReversal.data(custVendTransExch);
            this.populateCustVendTransNewForReverse(custVendTransExchReversal, custVendTransExch);
            custVendTransExchReversal.Voucher = reversalVoucher;
            custVendTransExchReversal.TransDate = reversalDate;
            if (transactionTxt.txt())
            {
                custVendTransExchReversal.Txt = transactionTxt.txt();
            }
            custVendTransExchReversal.AccountingEvent = 0;
            custVendTransExchReversal.ExchAdjustment = -custVendTransExch.ExchAdjustment;
            custVendTransExchReversal.LastExchAdj = reversalDate;
            custVendTransExchReversal.ExchAdjustmentRealized = -custVendTransExch.ExchAdjustmentRealized;
            custVendTransExchReversal.ExchAdjustmentUnrealized = -custVendTransExch.ExchAdjustmentUnrealized;
            custVendTransExchReversal.ExchAdjustmentReporting = -custVendTransExch.ExchAdjustmentReporting;
            custVendTransExchReversal.ReportingExchAdjustmentRealized = -custVendTransExch.ReportingExchAdjustmentRealized;
            custVendTransExchReversal.ReportingExchAdjustmentUnrealized = -custVendTransExch.ReportingExchAdjustmentUnrealized;
            custVendTransExchReversal.Closed = reversalDate;
            custVendTransExchReversal.insert();

            //Create Settlement Entries
            custVendSettlement = CustVendSettlement::getEmptyTableBuffer(this.getModuleCustVend());
            this.setSettlementIdentification(custVendTransExchReversal.AccountNum, _custVendTrans.RecId, custVendTransExchReversal.company(), custVendTransExchReversal.TransDate, '', _custVendTrans.DueDate);
            this.setSettlementOffset(0, _custVendTrans.company(), _custVendTrans.AccountNum, reversalVoucher);
            custVendSettlement.ExchAdjustment = custVendTransExch.ExchAdjustment;
            custVendSettlement.ExchAdjustmentReporting = custVendTransExch.ExchAdjustmentReporting;
            custVendSettlement.insert();

            custVendSettlement.clear();
            this.setSettlementIdentification(custVendTransExchReversal.AccountNum, custVendTransExchReversal.RecId, custVendTransExchReversal.company(), custVendTransExchReversal.TransDate, reversalVoucher, _custVendTrans.DueDate);
            this.setSettlementOffset(_custVendTrans.RecId, _custVendTrans.company(), _custVendTrans.AccountNum, _custVendTrans.Voucher);
            this.setSettlementAmount(custVendTransExchReversal.AmountCur, custVendTransExchReversal.AmountMST, custVendTransExchReversal.ReportingCurrencyAmount);
            custVendSettlement.insert();

            //Create transaction reversal transactions
            TransactionReversalTrans::createTransaction(this.tableIdNumber(), custVendTransExch.RecId, reversalTraceNum);
            TransactionReversalTrans::createTransaction(this.tableIdNumber(), custVendTransExchReversal.RecId, reversalTraceNum);

            return true;
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSettlementAmount</Name>
				<Source><![CDATA[
    protected void setSettlementAmount(
        AmountCur _settleAmountCur,
        AmountMST _settleAmountMst,
        AmountMSTSecondary _settleAmountReporting)
    {
        custVendSettlement.SettleAmountCur = _settleAmountCur;
        custVendSettlement.SettleAmountMST = _settleAmountMst;
        custVendSettlement.SettleAmountReporting = _settleAmountReporting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSettlementIdentification</Name>
				<Source><![CDATA[
    protected void setSettlementIdentification(
        AccountNum _accountNum,
        RecId _transRecId,
        CompanyId _transCompany,
        TransDate _transDate,
        Voucher _settlementVoucher,
        TransDate _dueDate)
    {
        custVendSettlement.AccountNum = _accountNum;
        custVendSettlement.TransRecId = _transRecId;
        custVendSettlement.TransCompany = _transCompany;
        custVendSettlement.TransDate = _transDate;
        custVendSettlement.SettlementVoucher = _settlementVoucher;
        custVendSettlement.DueDate = _dueDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSettlementOffset</Name>
				<Source><![CDATA[
    protected void setSettlementOffset(
        RecId _offsetRecId,
        CompanyId _offsetCompany,
        AccountNum _offsetAccountNum,
        Voucher _offsetVoucher)
    {
        custVendSettlement.OffsetRecId = _offsetRecId;
        custVendSettlement.OffsetCompany = _offsetCompany;
        custVendSettlement.OffsetAccountNum = _offsetAccountNum;
        custVendSettlement.OffsetTransVoucher = _offsetVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableIdNumber</Name>
				<Source><![CDATA[
    tableId tableIdNumber()
    {
        throw error(Error::missingOverload(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSalesTaxSettlementProcessRun_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check whether any partially settled customer or vendor transactions exists
    /// </summary>
    /// <param name="_custVendTrans">
    /// The customer/vendor map
    /// </param>
    /// <returns>
    /// True if any partially settled customer or vendor transactions exists
    /// </returns>
    public static boolean isSalesTaxSettlementProcessRun_IN(CustVendTrans _custVendTrans)
    {
        ComponentTransactions_IN componentTransactions;
        #ISOCountryRegionCodes

        if ((SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN])) && TaxParameters::checkTaxParametersExcludingCustoms_IN())
        {
            while select UtilizedAmount, RecoverableAmount, PaidAmount, PayableAmount from componentTransactions
                where componentTransactions.Voucher == _custVendTrans.Voucher &&
                      componentTransactions.TransDate == _custVendTrans.TransDate
            {
                if (_custVendTrans.TableId == tablenum(VendTrans))
                {
                    if (componentTransactions.UtilizedAmount != 0 &&
                        componentTransactions.UtilizedAmount < componentTransactions.RecoverableAmount)
                    {
                        return true;
                    }
                }
                if (_custVendTrans.TableId == tablenum(CustTrans))
                {
                    if (componentTransactions.PaidAmount != 0 &&
                       abs(componentTransactions.PaidAmount) < abs(componentTransactions.PayableAmount))//Payable amount & paid amount will be having -ve values.So taking abs().
                    {
                        return true;
                    }
                }
            }
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLastExchAdjustmentEntry</Name>
				<Source><![CDATA[
    private CustVendTrans findLastExchAdjustmentEntry(CustVendTrans _originalTrans)
    {
        CustVendTrans custVendTransExch = CustVendTrans::getEmptyTableBuffer(this.getModuleCustVend());
        
        if (_originalTrans.ExchAdjustment != 0.0)
        {
            // Priority is given to accounting currency
            select forupdate firstonly custVendTransExch
                where custVendTransExch.AccountNum == _originalTrans.AccountNum
                    &&  custVendTransExch.Invoice == _originalTrans.Invoice
                    &&  custVendTransExch.LastExchAdj == _originalTrans.LastExchAdj
                    &&  custVendTransExch.Voucher == _originalTrans.LastExchAdjVoucher
                    &&  custVendTransExch.ExchAdjustment == -_originalTrans.ExchAdjustment;
        }
        else if (_originalTrans.ExchAdjustmentReporting != 0.0)
        {
            // There may be adjustments against only the reporting currency
            select forupdate firstonly custVendTransExch
                where custVendTransExch.AccountNum == _originalTrans.AccountNum
                    &&  custVendTransExch.Invoice == _originalTrans.Invoice
                    &&  custVendTransExch.LastExchAdj == _originalTrans.LastExchAdj
                    &&  custVendTransExch.Voucher == _originalTrans.LastExchAdjVoucher
                    &&  custVendTransExch.ExchAdjustmentReporting == -_originalTrans.ExchAdjustmentReporting;
        }

        return custVendTransExch;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>