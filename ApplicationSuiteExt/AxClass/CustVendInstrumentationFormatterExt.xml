<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendInstrumentationFormatterExt</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CustVendInstrumentationFormatter</c> class formats telemetry outputs to use the appropriate module prefix.
/// </summary>
public static class CustVendInstrumentationFormatterExt
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>SourceNameWithModule</Name>
				<Source><![CDATA[
    internal static str SourceNameWithModule(str _sourceName, ModuleCustVend _moduleCustVend)
    {
        str moduleName;

        switch (_moduleCustVend)
        {
            case ModuleCustVend::Cust:
                moduleName = CustVendInstrumentationConstantsExt::ModuleCustomer;
                break;

            case ModuleCustVend::Vend:
                moduleName = CustVendInstrumentationConstantsExt::ModuleVendor;
                break;
        }

        return strFmt(
            CustVendInstrumentationConstantsExt::CustVendSourceNameFormat,
            CustVendInstrumentationConstantsExt::CustVend,
            moduleName,
            _sourceName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>SourceNameSysModule</Name>
				<Source><![CDATA[
    internal static str SourceNameSysModule(str _sourceName, SysModule _sysModule)
    {
        ModuleCustVend moduleCustVend;

        switch (_sysModule)
        {
            case SysModule::Cust:
                moduleCustVend = ModuleCustVend::Cust;
                break;

            case SysModule::Vend:
                moduleCustVend = ModuleCustVend::Vend;
                break;
        }

        return CustVendInstrumentationFormatterExt::SourceNameWithModule(_sourceName, moduleCustVend);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>