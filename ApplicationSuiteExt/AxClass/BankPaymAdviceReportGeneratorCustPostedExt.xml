<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankPaymAdviceReportGeneratorCustPostedExt</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Generates the report data for the <c>BankPaymAdviceCust</c> report for posted payments.
/// </summary>
public class BankPaymAdviceReportGeneratorCustPostedExt extends BankPaymAdviceReportGeneratorCustExt
{
    private CustSettlement custSettlementPayment;
    private CustSettlement custSettlementInvoice;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findInvoicesAndCreateData</Name>
				<Source><![CDATA[
    protected void findInvoicesAndCreateData()
    {
        CustTrans custTransPayment;
        Voucher voucher;

        if (ledgerJournalTrans.Company != ledgerJournalTrans.DataAreaId)
        {
            voucher = this.findIntercompanyRelatedPaymentVoucher();
        }

        if (voucher == '')
        {
            voucher = ledgerJournalTrans.Voucher;
        }

        while select crosscompany custTransPayment
            where custTransPayment.Voucher == voucher
                && custTransPayment.AccountNum == custTable.AccountNum
                && custTransPayment.TransDate == ledgerJournalTrans.TransDate
                && custTransPayment.DataAreaId == ledgerJournalTrans.Company
                && custTransPayment.CancelledPayment == NoYes::No
            join custSettlementPayment
                where custSettlementPayment.TransRecId == custTransPayment.RecId
                    && custSettlementPayment.CanBeReversed == NoYes::Yes
        {
            select firstonly crosscompany custTransInvoice
                where custTransInvoice.RecId == custSettlementPayment.OffsetRecid
                    && custTransInvoice.DataAreaId == custSettlementPayment.OffsetCompany
                    && custTransInvoice.CancelledPayment == NoYes::No
                join custSettlementInvoice
                    where custSettlementInvoice.TransRecId == custTransInvoice.RecId
                    && custSettlementInvoice.CanBeReversed == NoYes::Yes;

            this.insertBankPaymAdviceTmp();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateBankPaymAdviceTempPaymentInfo</Name>
				<Source><![CDATA[
    protected void populateBankPaymAdviceTempPaymentInfo()
    {
        bankPaymAdviceTmp.PaymRefLabel = this.getPaymRefLabel();
        bankPaymAdviceTmp.PaymentReference = this.getPaymRef();
        bankPaymAdviceTmp.SettledCurrencyCode = this.getPaymentCurrencyCode();
        bankPaymAdviceTmp.CashDisc = this.getCashDiscAmount();
        bankPaymAdviceTmp.TransDate = ledgerJournalTrans.TransDate;
        bankPaymAdviceTmp.Balance01 = -custSettlementPayment.SettleAmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCashDiscAmount</Name>
				<Source><![CDATA[
    protected Amount getCashDiscAmount()
    {
        return (this.calculateAmountInPaymentCurrency(custSettlementInvoice.TransDate, custTransInvoice.CurrencyCode, custSettlementInvoice.UtilizedCashDisc)) * -1;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>