<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendExchAdjustmentPostJournal_WExt</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>CustVendExchAdjustmentPostJournal_W</c> class handles business logic for exchange adjustment posting.
/// </summary>
class CustVendExchAdjustmentPostJournal_WExt extends CustVendExchAdjustmentPostCust_WExt
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>post</Name>
				<Source><![CDATA[
    public void post()
    {
        LedgerJournalTrans                  ledgerJournalTrans;
        DimensionAttributeValueCombination  dimAttrValueCombo;
        ExchAdjTaxableType_W                taxable;

        remainExchRateDiffLine = exchRateDiff;
        remainStandardExchRateDiffLine = standardExchRateDiff;

        currencyCode = postToReporting ? Ledger::reportingCurrency() : Ledger::accountingCurrency();

        markupTransCount = -1;

        select firstonly ledgerJournalTrans
            where ledgerJournalTrans.AccountType         == LedgerJournalACType::Cust
                && ledgerJournalTrans.TransDate           == custVendTrans.TransDate
                && ledgerJournalTrans.Voucher             == custVendTrans.Voucher
                && ledgerJournalTrans.OffsetAccountType   == LedgerJournalACType::Ledger
            join RecId from dimAttrValueCombo
                where dimAttrValueCombo.RecId           == ledgerJournalTrans.LedgerDimension
                    && dimAttrValueCombo.DisplayValue    == custVendTrans.AccountNum;

        if (!ledgerJournalTrans)
        {
            throw error("@GLS101280");
        }

        if (custVendExchAdjParm.inheritInvoicePosting() && !custVendInvoiceJour.CustVendInvoiceJour::getNonRealRevenue_RU())
        {
            lineDefaultAccount      = LedgerDefaultAccountHelper::getDefaultAccountFromLedgerDimension(ledgerJournalTrans.OffsetLedgerDimension);
            invoicePostingInherited = true;
        }
        else
        {
            if (! lineDefaultAccount)
            {
                lineDefaultAccount      = profitLossDefaultAccount;
                invoicePostingInherited = false;
            }
        }

        taxable = custVendExchAdjParm.taxable(posting);
        if (taxable == ExchAdjTaxableType_W::Tax || taxable == ExchAdjTaxableType_W::Expense)
        {
            this.postTaxes(
                exchRateDiff,
                standardExchRateDiff,
                ledgerJournalTrans.DefaultDimension,
                ledgerJournalTrans.TaxGroup,
                ledgerJournalTrans.TaxItemGroup,
                null,
                TaxModuleType::Sales);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static CustVendExchAdjustmentPostJournal_WExt construct()
    {
        return new CustVendExchAdjustmentPostJournal_WExt();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>