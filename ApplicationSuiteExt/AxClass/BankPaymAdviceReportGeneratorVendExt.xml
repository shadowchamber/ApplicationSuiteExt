<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankPaymAdviceReportGeneratorVendExt</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///  Generates the report data for the <c>BankPaymAdviceVend</c> report.
/// </summary>
public class BankPaymAdviceReportGeneratorVendExt extends BankPaymAdviceReportGeneratorExt
{
    protected SpecTrans specTrans;
    protected VendTrans vendTransInvoice;
    protected VendTable vendTable;
    private VendTransOpen vendTransOpenInvoice;

    private Name vendorName;
    private VendAccount vendorAccountNum;
    private LogisticsElectronicAddressLocator vendorContactEmail;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findRecipient</Name>
				<Source><![CDATA[
    protected void findRecipient(LedgerJournalTrans _ledgerJournalTrans)
    {
        vendTable = VendTable::findByCompany(_ledgerJournalTrans.Company,
            _ledgerJournalTrans.parmAccount());

        vendorName = vendTable.name();
        vendorAccountNum = vendTable.AccountNum;
        vendorContactEmail = vendTable.email();
    }

]]></Source>
			</Method>
			<Method>
				<Name>findGrouping</Name>
				<Source><![CDATA[
    protected void findGrouping()
    {
        grouping = ledgerJournalTrans.parmAccount() + this.getPaymentCurrencyCode() + LogisticsLocation::locationNameFromRecId(ledgerJournalTrans.RemittanceLocation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findInvoicesAndCreateData</Name>
				<Source><![CDATA[
    protected void findInvoicesAndCreateData()
    {
        while select crosscompany specTrans
            where specTrans.SpecRecId == ledgerJournalTrans.RecId
                && specTrans.SpecCompany == ledgerJournalTrans.company()
                && specTrans.SpecTableId == tableNum(LedgerJournalTrans)
                && specTrans.RefTableId == tableNum(VendTransOpen)
        {
            vendTransOpenInvoice = specTrans.vendTransOpen();
            vendTransInvoice = vendTransOpenInvoice.vendTrans();

            this.insertBankPaymAdviceTmp();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateBankPaymAdviceTempCommonInfo</Name>
				<Source><![CDATA[
    protected void populateBankPaymAdviceTempCommonInfo()
    {
        super();

        bankPaymAdviceTmp.CompanyAddress = companyAddress;
        bankPaymAdviceTmp.Name = vendorName;
        bankPaymAdviceTmp.AccountNum = vendorAccountNum;
        bankPaymAdviceTmp.ContactEmail = vendorContactEmail;

        if (ledgerJournalTrans.RemittanceAddress)
        {
            bankPaymAdviceTmp.Address = LogisticsPostalAddress::addressFromRecId(ledgerJournalTrans.RemittanceAddress);
        }
        else
        {
            bankPaymAdviceTmp.Address = LogisticsPostalAddress::addressFromRecId(vendTransInvoice.RemittanceAddress);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateBankPaymAdviceTempPaymentInfo</Name>
				<Source><![CDATA[
    protected void populateBankPaymAdviceTempPaymentInfo()
    {
        bankPaymAdviceTmp.PaymRefLabel = this.getPaymRefLabel();
        bankPaymAdviceTmp.PaymentReference = this.getPaymRef();
        bankPaymAdviceTmp.SettledCurrencyCode = this.getPaymentCurrencyCode();
        bankPaymAdviceTmp.CashDisc = this.getCashDiscAmount();
        bankPaymAdviceTmp.Balance01 = this.calculateAmountInPaymentCurrency(
            ledgerJournalTrans.TransDate,
            vendTransInvoice.CurrencyCode,
            -SpecTransManager::getSpecTransBalanceForTaxWithholding(specTrans));

        bankPaymAdviceTmp.TransDate = ledgerJournalTrans.TransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateBankPaymAdviceTempInvoiceInfo</Name>
				<Source><![CDATA[
    protected void populateBankPaymAdviceTempInvoiceInfo()
    {
        bankPaymAdviceTmp.Invoice = vendTransInvoice.Invoice;
        bankPaymAdviceTmp.InvoiceDate = vendTransInvoice.DocumentDate ? vendTransInvoice.DocumentDate : vendTransInvoice.TransDate;
        bankPaymAdviceTmp.CurrencyCode = vendTransInvoice.CurrencyCode;
        bankPaymAdviceTmp.AmountCur = -vendTransInvoice.AmountCur;
        bankPaymAdviceTmp.InvoiceTaxWithholdAmount = -this.getInvoiceTaxWithholdAmount();
        bankPaymAdviceTmp.IsWithholdingTaxCalculated = this.getIsTaxWithholdCalculated();
        bankPaymAdviceTmp.TransId = vendTransInvoice.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceTaxWithholdAmount</Name>
				<Source><![CDATA[
    private TaxWithholdAmountCur getInvoiceTaxWithholdAmount()
    {
        TaxWithholdTrans taxWithholdTrans;

        select sum(InvoiceTaxWithholdAmount) from taxWithholdTrans where taxWithholdTrans.VendTransInvoiceId == vendTransInvoice.RecId;

        return taxWithholdTrans.InvoiceTaxWithholdAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIsTaxWithholdCalculated</Name>
				<Source><![CDATA[
    private TaxWithholdCalculate_TH getIsTaxWithholdCalculated()
    {
        LedgerJournalTrans ledgerJournalTransInvoice;

        select TaxWithholdCalculate_TH from ledgerJournalTransInvoice where ledgerJournalTransInvoice.VendTransId == vendTransInvoice.RecId;

        return ledgerJournalTransInvoice.TaxWithholdCalculate_TH;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymRefLabel</Name>
				<Source><![CDATA[
    /// <summary>
    /// The payment reference label.
    /// </summary>
    /// <returns>The payment reference label.</returns>
    protected str getPaymRefLabel()
    {
        str paymRefLabel;

        if (ledgerJournalTrans.BankPromissoryNoteNum)
        {
            paymRefLabel = "@SYS71440";
        }
        else
        {
            paymRefLabel = super();
        }

        return paymRefLabel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymRef</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the payment reference.
    /// </summary>
    /// <returns>The payment reference.</returns>
    protected str getPaymRef()
    {
        str paymRef;

        if (ledgerJournalTrans.BankPromissoryNoteNum)
        {
            paymRef = ledgerJournalTrans.BankPromissoryNoteNum;
        }
        else
        {
            paymRef = super();
        }

        return paymRef;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCashDiscAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the cash discount amount in the payment currency.
    /// </summary>
    /// <returns>The cash discount amount in the payment currency.</returns>
    protected Amount getCashDiscAmount()
    {
        return this.calculateAmountInPaymentCurrency(ledgerJournalTrans.TransDate, vendTransInvoice.CurrencyCode, specTrans.CashDiscToTake);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();

        BankPaymAdviceVendTmp bankPaymAdviceVendTmp;
        bankPaymAdviceTmp = bankPaymAdviceVendTmp;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>