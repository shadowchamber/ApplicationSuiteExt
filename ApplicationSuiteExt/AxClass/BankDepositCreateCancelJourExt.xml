<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankDepositCreateCancelJourExt</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BankDepositCreateCancelJourExt</c> class defines the class variables.
/// </summary>
public class BankDepositCreateCancelJourExt
{
    protected RecId bankDepositRecID;
    protected TransDate transDate;
    protected ReasonCode cancelReason;
    protected ReasonComment cancelReasonComment;
    protected LedgerJournalNameId journalName;

    protected ReasonRefRecID reasonTableRefRecID;

    protected BankDeposit bankDeposit;
    protected BankAccountTrans bankAccountTrans;
    protected CustTrans custTrans;
    protected GeneralJournalAccountEntry generalJournalAccountEntry;

    protected LedgerJournalTable ledgerJournalTable;
    protected LedgerJournalTrans ledgerJournalTrans;
    protected LedgerJournalName ledgerJournalName;

    protected Voucher paymVoucher;
    protected TransDate paymDate;

    protected boolean isDepositSlipInterCompany;

    protected BankPaymCancelExt bankPaymCancel;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createDepositCancelJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Manages all the functions that are required to generate a bank deposit slip cancellation journal.
    /// </summary>
    /// <exception cref="M:Exception::Error">
    /// The reason reference could not be created.
    /// </exception>
    /// <exception cref="M:Exception::Error">
    /// The bank tables could not be validated or updated.
    /// </exception>
    /// <exception cref="M:Exception::Error">
    /// The related customer or vendor transaction could not be validated.
    /// </exception>
    /// <exception cref="M:Exception::Error">
    /// The journal header could not be created.
    /// </exception>
    /// <exception cref="M:Exception::Error">
    /// The journal voucher could not be created.
    /// </exception>
    /// <exception cref="M:Exception::Error">
    /// The settlements could not be marked.
    /// </exception>
    public void createDepositCancelJournal()
    {
        try
        {
            ttsbegin;

            this.executeCreationOfDepositCancelJournal();

            ttscommit;
            info(strFmt("@SYS62960", ledgerJournalTable.JournalNum, enum2Value(LedgerJournalType::BankDepositPaymCancel)));
        }

        catch (Exception::Error)
        {
            exceptionTextFallThrough();
            error(strFmt("@SYS117281", enum2Value(LedgerJournalType::BankDepositPaymCancel)));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeCreationOfDepositCancelJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes the core functions that are required to generate a bank deposit slip cancellation journal.
    /// </summary>
    protected void executeCreationOfDepositCancelJournal()
    {
        // Create the reason reference to be used for the check reversal
        if (!this.createReasonRefRecID())
        {
            throw error("@SYS107513");
        }

        // Validate and update the bank tables.
        if (!this.validateAndUpdateBankTables())
        {
            throw error("@SYS107513");
        }

        this.setPaymDateAndVoucher();

        // Validate and set the CustTrans.
        if (!this.validateRelatedTransaction())
        {
            throw error("@SYS107513");
        }

        // Create the ledger journal to be used for the deposit cancellation
        if (!this.createJournal())
        {
            throw error("@SYS107513");
        }

        // Validate and create the 'one-line' voucher for the journal.
        if (!this.createVoucher())
        {
            throw error("@SYS107513");
        }

        // The offset transaction is a customer transaction.
        if (custTrans)
        {
            // Create the reservations on the settlements being reversed.
            if (!this.createReversalSpecTrans())
            {
                throw error("@SYS107513");
            }
        }

        if (TaxParameters::checkTaxParametersExcludingCustoms_IN() && custTrans)
        {
            if (bankChequeCancel::isPartialTaxSettlementProcessRun_IN(custTrans))
            {
                throw error("@GLS62632");
            }
        }

        if (TaxWithholdParameters_IN::checkTaxParameters())
        {
            TaxwithholdTransReverse_IN::checkSettlementProcessRun(bankDeposit.Voucher, bankDeposit.TransDate);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the bank deposit cancellation journal in the <c>LedgerJournalTable</c> table.
    /// </summary>
    /// <returns>
    /// true if the bank deposit cancellation journal was created; otherwise, false.
    /// </returns>
    /// <remarks>
    /// The journal created in this method creates an insert to the <c>LedgerJournalTable</c> table.
    /// Therefore, code for handling optimistic concurrency (OCC) database exceptions is not required.
    /// </remarks>
    protected boolean createJournal()
    {
        NumberSequenceTable journalNumberSequence = LedgerParameters::numRefJournalNum().numberSequenceTable();
        boolean journalOk = true;

        try
        {
            if (!journalNumberSequence)
            {
                journalOk = checkFailed("@SYS122674");
            }

            if (journalOk && journalNumberSequence.Blocked == NoYes::Yes)
            {
                journalOk = checkFailed(strFmt("@SYS25068", journalNumberSequence.NumberSequence));
            }

            if (journalOk)
            {
                ledgerJournalName = LedgerJournalName::find(journalName);

                if (!ledgerJournalName)
                {
                    journalOk = checkFailed(strFmt("@SYS22462", journalName));
                }

                if (journalOk && ledgerJournalName.JournalType != LedgerJournalType::BankDepositPaymCancel)
                {
                    journalOk = checkFailed(strFmt("@SYS74909", journalName));
                }

                if (journalOk)
                {
                    ledgerJournalTable.JournalName = ledgerJournalName.JournalName;
                    ledgerJournalTable.JournalNum = JournalTableData::newTable(ledgerJournalTable).nextJournalId();
                    ledgerJournalTable.initFromLedgerJournalName();

                    if (!ledgerJournalTable.validateWrite())
                    {
                        journalOk = false;
                    }
                    else
                    {
                        ledgerJournalTable.write();
                    }
                }
            }
        }
        catch
        {
            exceptionTextFallThrough();
            journalOk = false;
        }

        return journalOk;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReasonRefRecID</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the value of the <c>reasonTableRefRecID</c> class variable.
    /// </summary>
    /// <returns>
    /// true if the value is set; otherwise, false.
    /// </returns>
    /// <remarks>
    /// The value of the ID can be zero if the <c>cancelReason</c> and <c>cancelReasonComment</c> variables
    /// are both blank.
    /// </remarks>
    protected boolean createReasonRefRecID()
    {
        boolean reasonRefOk = true;

        try
        {
            reasonTableRefRecID = ReasonTableRef::createReasonTableRef(cancelReason, cancelReasonComment);
        }
        catch
        {
            exceptionTextFallThrough();
            reasonRefOk = false;
        }

        return reasonRefOk;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReversalSpecTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Marks the related customer transaction of the journal for settlement.
    /// </summary>
    /// <returns>
    /// true if the transaction was marked; otherwise, false.
    /// </returns>
    protected boolean createReversalSpecTrans()
    {
        boolean settlementsOk = true;
        CompanyId refCompany;

        Debug::assert(custTrans.RecId != 0);
        Debug::assert(bankDeposit.RecId != 0);

        if (isDepositSlipInterCompany)
        {
            refCompany = bankDeposit.RefCompany;
        }
        else
        {
            refCompany = bankDeposit.company();
        }

        try
        {
            SpecTransManager specTransManager;

            changecompany(refCompany)
            {
                CustSettlement custSettlement;

                specTransManager = SpecTransManager::newFromSpec(ledgerJournalTrans);

                while select custSettlement
                    where custSettlement.TransCompany == custTrans.DataAreaId
                        && custSettlement.TransRecId == custTrans.RecId
                        && custSettlement.CanBeReversed == NoYes::Yes
                {
                    custSettlement.CustVendSettlement::markThisAndRelatedOffsets(specTransManager, custTrans.CurrencyCode);
                }
            }

            if (specTransManager.getSpecTransCount() > 0)
            {
                ledgerJournalTrans.SettleVoucher = SettlementType::SelectedTransact;
                ledgerJournalTrans.update();
            }
        }
        catch
        {
            exceptionTextFallThrough();
            settlementsOk = false;
        }

        return settlementsOk;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the voucher in the <c>LedgerJournalTrans</c> table for the bank deposit cancellation
    /// journal.
    /// </summary>
    /// <returns>
    /// true if the voucher in the <c>LedgerJournalTrans</c> table for the bank deposit cancellation
    /// journal is created; otherwise, false.
    /// </returns>
    /// <remarks>
    /// The journal transaction created in this method will achieve an insert to the
    /// <c>LedgerJournalTrans</c> table. Therefore, code for handling optimistic concurrency (OCC) database
    /// exceptions is not required.
    /// </remarks>
    protected boolean createVoucher()
    {
        LedgerEntry ledgerEntry;
        LedgerEntryJournal ledgerEntryJournal;
        GeneralJournalEntry generalJournalEntry;
        NumberSequenceTable voucherNumberSequence = NumberSequenceTable::find(ledgerJournalName.NumberSequenceTable);
        boolean voucherOk = true;

        LedgerJournalTrans ledgerJournalTransLocal;
        boolean depositSlipParameter = BankParameters::find().RequireDepositCancelJour;
        boolean taxWithholdParametersMarked = TaxWithholdParameters_IN::checkTaxParameters();

        boolean    isChineseVoucher = LedgerParameters::isChineseVoucher_CN();

        try
        {
            if (!voucherNumberSequence)
            {
                voucherOk = checkFailed(strFmt("@SYS102235", voucherNumberSequence.NumberSequence));
            }

            if (voucherOk && voucherNumberSequence.Blocked)
            {
                voucherOk = checkFailed(strFmt("@SYS25068", voucherNumberSequence.NumberSequence));
            }

            if (voucherOk)
            {
                NumberSeq numSeq = NumberSeq::newGetVoucherFromId(ledgerJournalName.NumberSequenceTable);
                Voucher voucher = numSeq.voucher();

                ledgerJournalTrans.JournalNum = ledgerJournalTable.JournalNum;
                ledgerJournalTrans.Voucher = voucher;
                ledgerJournalTrans.Txt = strFmt('%1: %2, %3', "@SYS1068", paymVoucher, cancelReasonComment);
                ledgerJournalTrans.TransDate = transDate;
                ledgerJournalTrans.BankDepositNum = bankDeposit.DepositNum;
                ledgerJournalTrans.BankTransType = BankParameters::find().nsfTransactionType;
                ledgerJournalTrans.ReasonRefRecID = ReasonTableRef::checkCreateInCompany(reasonTableRefRecID, ledgerJournalTrans.DataAreaId);
                ledgerJournalTrans.LineNum = 0;
                ledgerJournalTrans.parmOffsetAccount(bankDeposit.AccountId, LedgerJournalACType::Bank, bankDeposit.company());
                ledgerJournalTrans.OffsetTxt = ledgerJournalTrans.Txt;
                ledgerJournalTrans.BankChequeDepositTransRefRecID = bankDepositRecID;
                ledgerJournalTrans.SettleVoucher = SettlementType::None;
                ledgerJournalTrans.TransactionType = LedgerTransType::Cust;
                ledgerJournalTrans.OffsetDefaultDimension = bankDeposit.DefaultDimension;

                if(isChineseVoucher && !LedgerJournalTrans.LedgerVoucherType_CN)
                {
                    LedgerJournalTrans.createVoucherType_CN();
                }

                if (taxWithholdParametersMarked && depositSlipParameter)
                {
                    select AmountCurCredit, RecId from ledgerJournalTransLocal
                        where ledgerJournalTransLocal.BankDepositNum == bankDeposit.DepositNum
                            && ledgerJournalTransLocal.Voucher == bankDeposit.Voucher
                            && ledgerJournalTransLocal.TransDate == bankDeposit.TransDate;
                }

                if (custTrans)
                {
                    // The offset transaction is a customer transaction.
                    ledgerJournalTrans.DefaultDimension = custTrans.DefaultDimension;
                    ledgerJournalTrans.DocumentNum = custTrans.DocumentNum;
                    ledgerJournalTrans.DocumentDate = custTrans.TransDate;
                    ledgerJournalTrans.PaymReference = custTrans.PaymReference;
                    ledgerJournalTrans.ExchRate = custTrans.ExchRate;
                    ledgerJournalTrans.ExchRateSecond = custTrans.ExchRateSecond;
                    ledgerJournalTrans.ReportingCurrencyExchRate = custTrans.ReportingCurrencyExchRate;
                    ledgerJournalTrans.ReportingCurrencyExchRateSecondary = custTrans.ReportingCurrencyExchRateSecondary;
                    ledgerJournalTrans.Triangulation = custTrans.euroTriangulation;
                    ledgerJournalTrans.CurrencyCode = custTrans.CurrencyCode;

                    if (taxWithholdParametersMarked
                        && depositSlipParameter
                        && ledgerJournalTable.JournalType == LedgerJournalType::BankDepositPaymCancel
                        && ledgerJournalTrans.ledgerJournalTransTaxExtensionIN().tcsGroup)
                    {
                        ledgerJournalTrans.AmountCurDebit = ledgerJournalTransLocal.AmountCurCredit;
                    }
                    else
                    {
                        ledgerJournalTrans.AmountCurDebit = -custTrans.AmountCur;
                    }

                    ledgerJournalTrans.PaymMode = custTrans.PaymMode;
                    if (LedgerParameters::find().TransactionReversalCorrection)
                    {
                        ledgerJournalTrans.AmountCurDebit = 0;
                        ledgerJournalTrans.AmountCurCredit = custTrans.AmountCur;
                    }

                    ledgerJournalTrans.parmAccount(custTrans.AccountNum, LedgerJournalACType::Cust, custTrans.company());
                    ledgerJournalTrans.Company = custTrans.company();
                }
                else
                {
                    // The offset transaction is a ledger transaction.
                    [generalJournalAccountEntry, ledgerEntryJournal, generalJournalEntry, ledgerEntry] =
                        GeneralLedgerExtension::findRelated(generalJournalAccountEntry.RecId);

                    ledgerJournalTrans.DocumentNum = generalJournalEntry.DocumentNumber;
                    ledgerJournalTrans.DocumentDate = generalJournalEntry.AccountingDate;
                    ledgerJournalTrans.PaymReference = generalJournalAccountEntry.PaymentReference;
                    ledgerJournalTrans.ExchRate = generalJournalAccountEntry.getAccountingExchangeRate();
                    ledgerJournalTrans.ReportingCurrencyExchRate = generalJournalAccountEntry.getReportingExchangeRate();
                    ledgerJournalTrans.CurrencyCode = generalJournalAccountEntry.TransactionCurrencyCode;
                    ledgerJournalTrans.AmountCurDebit = -generalJournalAccountEntry.TransactionCurrencyAmount;
                    ledgerJournalTrans.PaymMode = ledgerEntry.PaymentMode;
                    ledgerJournalTrans.DefaultDimension = 0;

                    if (LedgerParameters::find().TransactionReversalCorrection)
                    {
                        ledgerJournalTrans.AmountCurDebit = 0;
                        ledgerJournalTrans.AmountCurCredit = generalJournalAccountEntry.TransactionCurrencyAmount;
                    }

                    ledgerJournalTrans.parmLedgerDimension(generalJournalAccountEntry.LedgerDimension, generalJournalAccountEntry.company());
                }

                if (!ledgerJournalTrans.validateWrite())
                {
                    voucherOk = false;
                }
                else
                {
                    ledgerJournalTrans.write();
                    bankDeposit.ReversalTableId = ledgerJournalTrans.TableId;
                    bankDeposit.ReversalRecId = ledgerJournalTrans.RecId;
                    bankDeposit.update();
                }
            }
        }
        catch
        {
            exceptionTextFallThrough();
            voucherOk = false;
        }

        return voucherOk;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the internal class variables.
    /// </summary>
    /// <param name="_bankDepositRecID">
    /// The <c>RecID</c> variable for the class.
    /// </param>
    /// <param name="_transDate">
    /// The <c>TransDate</c> variable for the class.
    /// </param>
    /// <param name="_journalName">
    /// The <c>LedgerJournalName</c> variable for the class.
    /// </param>
    /// <param name="_cancelReason">
    /// The <c>ReasonCode</c> variable for the class.
    /// </param>
    /// <param name="_cancelReasonComment">
    /// The <c>ReasonComment</c> variable for the class.
    /// </param>
    protected void initValues(
        RecId _bankDepositRecID,
        TransDate _transDate,
        LedgerJournalNameId _journalName,
        ReasonCode _cancelReason,
        ReasonComment _cancelReasonComment)
    {
        bankDepositRecID = _bankDepositRecID;
        transDate = _transDate;
        journalName = _journalName;
        cancelReason = _cancelReason;
        cancelReasonComment = _cancelReasonComment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>BankDepositCreateCancelJourExt</c> class.
    /// </summary>
    /// <remarks>
    /// Use the <c>newDepositCreateCancelJour</c> method to create a new instance of the class, instead of
    /// the <c>new</c> method.
    /// </remarks>
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPaymDateAndVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the values of the <c>paymDate</c> and <c>paymVoucher</c> class variables.
    /// </summary>
    protected void setPaymDateAndVoucher()
    {
        paymDate = bankDeposit.TransDate;
        paymVoucher = bankDeposit.Voucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAndUpdateBankAccountTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates and updates the <c>BankAccountTrans</c> record related to the deposit cancellation.
    /// </summary>
    /// <returns>
    /// true if the related <c>BankAccountTrans</c> record is successfully updated; otherwise, false.
    /// </returns>
    /// <exception cref="M:Exception::UpdateConflict">
    /// An update conflict on the <c>BankAccountTrans</c> table could not be resolved.
    /// </exception>
    /// <exception cref="M:Exception::UpdateConflictNotRecovered">
    /// An update conflict on the <c>BankAccountTrans</c> table could not be resolved.
    /// </exception>
    protected boolean validateAndUpdateBankAccountTrans()
    {
        #OCCRetryCount
        boolean validateOk = true;

        try
        {
            bankAccountTrans = BankAccountTrans::findByDepositNum(bankDeposit.DepositNum, true);

            if (bankAccountTrans)
            {
                if (bankAccountTrans.Reconciled)
                {
                    validateOk = checkFailed(strFmt("@SYS24084", bankDeposit.PaymReference));
                }

                if (validateOk && bankAccountTrans.CancelPending)
                {
                    // Only one deposit per bank account transaction can be pending cancellation at a time.
                    // The bank account transaction is already pending cancellation, so another deposit cannot be cancelled.
                    validateOk = checkFailed(strFmt("@SYS117289", bankDeposit.DepositNum));
                }

                if (validateOk)
                {
                    // Update the BankAccountTrans for the 'Pending cancellation'
                    bankAccountTrans.CancelPending = NoYes::Yes;
                    bankAccountTrans.ReasonRefRecID = ReasonTableRef::checkCreateInCompany(reasonTableRefRecID, bankAccountTrans.DataAreaId);

                    if (!bankAccountTrans.validateWrite())
                    {
                        validateOk = false;
                    }
                    else
                    {
                        bankAccountTrans.write();
                    }
                }
            }
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
        catch (Exception::Error)
        {
            exceptionTextFallThrough();
            validateOk = false;
        }

        return validateOk;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAndUpdateBankDeposit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates and updates a <c>BankDeposit</c> record related to the deposit cancellation.
    /// </summary>
    /// <returns>
    /// true if the <c>BankDeposit</c> record related to the deposit cancellation is updated; otherwise,
    /// false.
    /// </returns>
    /// <exception cref="M:Exception::UpdateConflict">
    /// An update conflict on the <c>BankDeposit</c> table could not be resolved.
    /// </exception>
    /// <exception cref="M:Exception::UpdateConflictNotRecovered">
    /// An update conflict on the <c>BankDeposit</c> table could not be resolved.
    /// </exception>
    protected boolean validateAndUpdateBankDeposit()
    {
        #OCCRetryCount
        boolean validateOk = true;

        try
        {
            // Find and validate the deposit.
            bankDeposit = BankDeposit::find(bankDepositRecID, true);

            if (!bankDeposit)
            {
                validateOk = checkFailed(strFmt("@SYS102169", bankDepositRecID));
            }

            if (validateOk && bankDeposit.PaymReference == '')
            {
                validateOk = checkFailed(strFmt("@SYS24523", bankDeposit.DepositNum));
            }

            if (validateOk && bankDeposit.Canceled)
            {
                validateOk = checkFailed(strFmt("@SYS26849", bankDeposit.DepositNum));
            }

            if (validateOk && bankDeposit.CancelPending)
            {
                validateOk = checkFailed(strFmt("@SYS117289", bankDeposit.DepositNum));
            }

            if (validateOk)
            {
                if (bankDeposit.RefCompany != '' && bankDeposit.company() != bankDeposit.RefCompany)
                {
                    isDepositSlipInterCompany = true;
                }
                else
                {
                    isDepositSlipInterCompany = false;
                }

                // Update the BankDeposit for the 'Pending cancellation'
                bankDeposit.CancelPending = NoYes::Yes;
                bankDeposit.ReasonRefRecID = ReasonTableRef::checkCreateInCompany(reasonTableRefRecID, bankDeposit.DataAreaId);

                if (!bankDeposit.validateWrite())
                {
                    validateOk = false;
                }
                else
                {
                    bankDeposit.write();
                }
            }
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
        catch (Exception::Error)
        {
            exceptionTextFallThrough();
            validateOk = false;
        }

        return validateOk;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAndUpdateBankTables</Name>
				<Source><![CDATA[
    /// <summary>
    /// Manages the validation and updating of the related bank tables.
    /// </summary>
    /// <returns>
    /// true if the validation and update are successful; otherwise, false.
    /// </returns>
    protected boolean validateAndUpdateBankTables()
    {
        boolean validateOk = true;

        validateOk = this.validateAndUpdateBankDeposit();

        if (validateOk)
        {
            validateOk = this.validateAndUpdateBankAccountTrans();
        }

        return validateOk;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRelatedCustTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a related <c>CustTrans</c> table record.
    /// </summary>
    /// <returns>
    /// A <c>CustTrans</c> table record that is related to
    /// the <c>BankDeposit</c> table record being cancelled.
    /// </returns>
    protected CustTrans findRelatedCustTrans()
    {
        CustTrans relatedCustTrans;
        container refCompany;

        // Use deposit slip to get the CustTrans
        if (isDepositSlipInterCompany)
        {
            refCompany += [bankDeposit.RefCompany];
        }
        else
        {
            refCompany += [bankDeposit.company()];
        }

        // Get the offset customer transaction.
        select firstonly crossCompany:refCompany relatedCustTrans
            where relatedCustTrans.RecId == bankDeposit.RefRecId;

        return relatedCustTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCustTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the related customer transaction.
    /// </summary>
    /// <param name = "_custTrans">The customer transaction to validate</param>
    /// <returns>
    /// true if the related customer transaction is valid; otherwise, false.
    /// </returns>
    protected boolean validateCustTrans(CustTrans _custTrans)
    {
        boolean isValid = true;

        if (transDate < _custTrans.TransDate)
        {
            isValid = checkFailed(strFmt("@SYS91506", date2StrUsr(transDate, DateFlags::FormatAll), _custTrans.TransDate));
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRelatedSubledgerVoucherGeneralJournalEntry</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a related <c>SubledgerVoucherGeneralJournalEntry</c> table record.
    /// </summary>
    /// <returns>
    /// A <c>SubledgerVoucherGeneralJournalEntry</c> table record that is related to
    /// the <c>BankDeposit</c> table record being cancelled.
    /// </returns>
    protected SubledgerVoucherGeneralJournalEntry findRelatedSubledgerVoucherGeneralJournalEntry()
    {
        GeneralJournalEntry generalJournalEntry;
        SubledgerVoucherGeneralJournalEntry subledgerVoucherGeneralJournalEntry;

        select firstonly AccountingDate from subledgerVoucherGeneralJournalEntry
            where subledgerVoucherGeneralJournalEntry.Voucher == paymVoucher
                && subledgerVoucherGeneralJournalEntry.AccountingDate == paymDate
                && subledgerVoucherGeneralJournalEntry.VoucherDataAreaId == curext()
            join RecId from generalJournalEntry
                where generalJournalEntry.RecId == subledgerVoucherGeneralJournalEntry.GeneralJournalEntry
                    && generalJournalEntry.Ledger == Ledger::current()
            join generalJournalAccountEntry
                where generalJournalEntry.RecId == generalJournalAccountEntry.GeneralJournalEntry
                    && generalJournalAccountEntry.PostingType == LedgerPostingType::LedgerJournal
                    && generalJournalAccountEntry.AccountingCurrencyAmount == -bankAccountTrans.AmountMST;

        return subledgerVoucherGeneralJournalEntry;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSubledgerGeneralJournalEntry</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the related subledger voucher general journal transaction.
    /// </summary>
    /// <param name = "_subledgerVoucherGeneralJournalEntry">The transaction to validate</param>
    /// <returns>
    /// true if the related subledger voucher general journal transaction is valid; otherwise, false.
    /// </returns>
    protected boolean validateSubledgerGeneralJournalEntry(SubledgerVoucherGeneralJournalEntry _subledgerVoucherGeneralJournalEntry)
    {
        boolean isValid = true;

        if (transDate < _subledgerVoucherGeneralJournalEntry.AccountingDate)
        {
            isValid = checkFailed(strFmt("@SYS91506", date2StrUsr(transDate, DateFlags::FormatAll), _subledgerVoucherGeneralJournalEntry.AccountingDate));
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateRelatedTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Manages the validation of the transaction related to the deposit cancellation.
    /// </summary>
    /// <returns>
    /// true if the transaction is valid; otherwise, false.
    /// </returns>
    protected boolean validateRelatedTransaction()
    {
        boolean validateOk = true;

        custTrans = this.findRelatedCustTrans();
        if (custTrans)
        {
            validateOk = this.validateCustTrans(custTrans);
        }
        else
        {
            SubledgerVoucherGeneralJournalEntry subledgerVoucherGeneralJournalEntry = this.findRelatedSubledgerVoucherGeneralJournalEntry();
            if (subledgerVoucherGeneralJournalEntry)
            {
                validateOk = this.validateSubledgerGeneralJournalEntry(subledgerVoucherGeneralJournalEntry);
            }
            else
            {
                validateOk = checkFailed(strFmt("@SYS117290", bankDeposit.Voucher, bankDeposit.DepositNum));
            }
        }

        return validateOk;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>BankDepositCreateCancelJourExt</c> class.
    /// </summary>
    /// <returns>
    /// A new instance of the <c>BankDepositCreateCancelJourExt</c> class.
    /// </returns>
    protected static BankDepositCreateCancelJourExt construct()
    {
        return new BankDepositCreateCancelJourExt();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newDepositCreateCancelJour</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs all the functions required to generate a bank deposit cancellation journal.
    /// </summary>
    /// <param name="_bankDepositRecID">
    /// The RecID of the bank deposit to be canceled.
    /// </param>
    /// <param name="_transDate">
    /// The transaction date of the deposit cancellation.
    /// </param>
    /// <param name="_journalName">
    /// The journal name selected for the journal.
    /// </param>
    /// <param name="_cancelReason">
    /// The reason code for the deposit cancellation; optional.
    /// </param>
    /// <param name="_cancelReasonComment">
    /// The reason comment for the deposit cancellation; optional.
    /// </param>
    [SysObsolete("This method is obsolete. Please use the newBankDepositCreateCancelJourExt() method instead.", false, 30\6\2020)]
    public static void newDepositCreateCancelJour(
        RecId _bankDepositRecID,
        TransDate _transDate,
        LedgerJournalNameId _journalName,
        ReasonCode _cancelReason = '',
        ReasonComment _cancelReasonComment = '')
    {
        Debug::assert(_bankDepositRecID != 0);
        Debug::assert(_transDate != dateNull());
        Debug::assert(_journalName != '');

        BankDepositCreateCancelJourExt bankDepositCreateCancelJour = BankDepositCreateCancelJourExt::construct();

        bankDepositCreateCancelJour.initValues(
            _bankDepositRecID,
            _transDate,
            _journalName,
            _cancelReason,
            _cancelReasonComment);

        bankDepositCreateCancelJour.createDepositCancelJournal();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newBankDepositCreateCancelJourExt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs and initializes <c>BankDepositCreateCancelJourExt</c> class to prepare for bank deposit cancellation journal generation.
    /// </summary>
    /// <param name = "_bankPaymCancel">An instance of <c>BankPaymCancel</c> class by which initialization of <c>BankDepositCreateCancelJourExt</c> class is performed.</param>
    /// <returns>A newly initialized instance of <c>BankDepositCreateCancelJourExt</c> class.</returns>
    public static BankDepositCreateCancelJourExt newBankDepositCreateCancelJourExt(BankPaymCancelExt _bankPaymCancel)
    {
        BankDepositCreateCancelJourExt bankDepositCreateCancelJour = BankDepositCreateCancelJourExt::construct();

        bankDepositCreateCancelJour.bankPaymCancel = _bankPaymCancel;
        
        bankDepositCreateCancelJour.initValues(
            _bankPaymCancel.parmBankDepositToCancel().RecId,
            _bankPaymCancel.parmTransDate(),
            _bankPaymCancel.parmJournalName(),
            _bankPaymCancel.parmReason(),
            _bankPaymCancel.parmReasonComment());

        return bankDepositCreateCancelJour;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>