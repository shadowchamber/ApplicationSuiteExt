<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxWithholdCustVendSettlementHelper_INExt</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxWithholdCustVendSettlementHelper_IN</c> is for processing withholding tax when doing settlement.
/// </summary>
public final class TaxWithholdCustVendSettlementHelper_INExt
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>processWithholdingTaxSettlement_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes withholding tax when doing settlement.
    /// </summary>
    /// <param name = "_vendTransDebit">Vend transaction for debit side.</param>
    /// <param name = "_vendTransCredit">Vend transaction for credit side.</param>
    /// <param name = "_settleAmountCurCredit">The settlement ammount for credit side.</param>
    /// <param name = "_settleAmountCurDebit">The settlement ammount for debit side.</param>
    /// <param name = "_isDebitTransFullySettle">Is debit is fully settled</param>
    /// <param name = "_custVendTransSettlement">The instance of <c>CustVendTransSettlement</c>.</param>
    /// <param name = "_settlementGroupPlaceHolder">The settlement group place holder.</param>
    /// <param name = "_settlementDate">The settlement date.</param>
    public static void processWithholdingTaxSettlement_IN(
        CustVendTrans _vendTransDebit,
        CustVendTrans _vendTransCredit,
        AmountCur _settleAmountCurCredit,
        AmountCur _settleAmountCurDebit,
        boolean _isDebitTransFullySettle,
        CustVendTransSettlement _custVendTransSettlement,
        Counter _settlementGroupPlaceHolder,
        TransDate _settlementDate)
    {
        // Just support the invoice which have invoiceId, for the Gnernal journal which do not have invoice id will not be supported.
        if (_vendTransDebit.TableId == tableNum(VendTrans)
            && _vendTransDebit.Invoice
            && TaxWithholdCustVendSettlementHelper_INExt::canWHTReverse(_vendTransDebit)
            && TaxWithholdCustVendSettlementHelper_INExt::canWHTReverse(_vendTransCredit))
        {
            // process invoice.
            Percent origSettledPercentDebit;
            AmountCur taxWithholdAmountDebit;
            AmountCur taxWithholdInvoiceTotal;
            changecompany(_vendTransDebit.company())
            {
                TaxWithholdTrans_IN taxWithholdTrans;
                TaxWithholdGroupHeading taxWithholdGroupHeading;
                select sum(TaxWithholdAmountCur) from taxWithholdTrans
                    join RecId from taxWithholdGroupHeading
                    where taxWithholdGroupHeading.TaxWithholdGroup == taxWithholdTrans.TaxWithholdGroup
                        && taxWithholdGroupHeading.TaxType_IN == TaxWithholdCodeType_IN::TDS
                        && taxWithholdTrans.Voucher == _vendTransDebit.Voucher
                        && taxWithholdTrans.TransDate == _vendTransDebit.TransDate;

                if (taxWithholdTrans.TaxWithholdAmountCur)
                {
                    if (_isDebitTransFullySettle)
                    {
                        taxWithholdInvoiceTotal = TaxWithholdTrans.TaxWithholdAmountCur;
                        origSettledPercentDebit = (abs(_settleAmountCurDebit)  + abs(TaxWithholdTrans.TaxWithholdAmountCur)) / (abs(_vendTransDebit.AmountCur) + abs(TaxWithholdTrans.TaxWithholdAmountCur));
                    }
                    else
                    {
                        origSettledPercentDebit = abs(_settleAmountCurDebit) / (abs(_vendTransDebit.AmountCur) + abs(TaxWithholdTrans.TaxWithholdAmountCur));
                    }
                    taxWithholdAmountDebit = taxWithholdTrans.TaxWithholdAmountCur * origSettledPercentDebit;
                }
            }

            // process payment.
            Percent origSettledPercentCredit;
            AmountCur taxWithholdAmountCredit;
            changecompany(_vendTransCredit.company())
            {
                LedgerJournalTrans ledgerJournalTrans = LedgerJournalTrans::findJournalForVoucher(_vendTransCredit.Voucher, _vendTransCredit.TransDate);
                if (TaxWithholdCustVendSettlementHelper_INExt::canVendorPaymentBeReversed(ledgerJournalTrans))
                {
                    TaxWithholdTrans_IN taxWithholdTrans;
                    TaxWithholdGroupHeading taxWithholdGroupHeading;
                    select sum(TaxWithholdAmountCur) from taxWithholdTrans
                        join RecId from taxWithholdGroupHeading
                        where taxWithholdGroupHeading.TaxWithholdGroup == taxWithholdTrans.TaxWithholdGroup
                            && taxWithholdGroupHeading.TaxType_IN == TaxWithholdCodeType_IN::TDS
                            && taxWithholdTrans.Voucher == _vendTransCredit.Voucher
                            && taxWithholdTrans.TransDate == _vendTransCredit.TransDate;

                    if (taxWithholdTrans.TaxWithholdAmountCur)
                    {
                        if (abs(_vendTransCredit.AmountCur) == abs(_settleAmountCurCredit)
                            || (abs(_settleAmountCurCredit) + abs(taxWithholdInvoiceTotal)) >= abs(_vendTransCredit.AmountCur))
                        {
                            origSettledPercentCredit = 1;
                        }
                        else if (abs(_vendTransCredit.AmountCur) > abs(_settleAmountCurCredit))
                        {
                            origSettledPercentCredit = (abs(_settleAmountCurCredit) + abs(taxWithholdInvoiceTotal)) / abs(_vendTransCredit.AmountCur);
                        }

                        taxWithholdAmountCredit = taxWithholdTrans.TaxWithholdAmountCur * origSettledPercentCredit;
                    }
                }
            }

            if (taxWithholdAmountCredit && taxWithholdAmountDebit)
            {
                // Reverse the withholding tax which happens later.
                CustVendTrans reversedTrans = _vendTransCredit.TransDate >= _vendTransDebit.TransDate ? _vendTransCredit : _vendTransDebit;
                Percent settleFactor = _vendTransCredit.TransDate >= _vendTransDebit.TransDate ? taxWithholdAmountCredit : origSettledPercentDebit;
                TaxWithholdCustVendSettlementHelper_INExt::reverseTaxWithholdTrans(
                    reversedTrans,
                    settleFactor,
                    _settlementDate,
                    _custVendTransSettlement,
                    _settlementGroupPlaceHolder);
               
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canWHTReverse</Name>
				<Source><![CDATA[
    private static boolean canWHTReverse(VendTrans _vendTrans)
    {
        return _vendTrans.TransType != LedgerTransType::None
            && _vendTrans.TransType != LedgerTransType::Tax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canVendorPaymentBeReversed</Name>
				<Source><![CDATA[
    private static boolean canVendorPaymentBeReversed(LedgerJournalTrans _ledgerJournalTrans)
    {
        return _ledgerJournalTrans
            && ((_ledgerJournalTrans.AccountType == LedgerJournalACType::Vend 
                    && _ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Bank 
                    && _ledgerJournalTrans.AmountCurDebit > 0)
                || (_ledgerJournalTrans.AccountType == LedgerJournalACType::Bank
                    && _ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Vend
                    && _ledgerJournalTrans.AmountCurCredit > 0)
                || (_ledgerJournalTrans.AccountType == LedgerJournalACType::Vend
                    && _ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Ledger
                    && _ledgerJournalTrans.AmountCurDebit > 0
                    && MainAccount::findByLedgerDimension(_ledgerJournalTrans.OffsetLedgerDimension).PostingType == LedgerPostingType::PurchCash)
                || (_ledgerJournalTrans.AccountType == LedgerJournalACType::Ledger
                    && _ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Vend
                    && _ledgerJournalTrans.AmountCurCredit > 0
                    && MainAccount::findByLedgerDimension(_ledgerJournalTrans.LedgerDimension).PostingType == LedgerPostingType::PurchCash));
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseTaxWithholdTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reverses tax withhold trans and voucher transactions.
    /// </summary>
    /// <param name = "_custVendTrans">Customer or vendor transaction.</param>
    /// <param name = "_settledFactor">Settle factor</param>
    /// <param name = "_transDate">Transaction date.</param>
    /// <param name = "_custVendTransSettlement">The intance of <c>CustVendTransSettlement</c>.</param>
    /// <param name = "_settlementGroupPlaceHolder">The settlement group place holder.</param>
    /// <param name = "_parentVendTrans">The parent customer or vendor transaction.</param>
    public static void reverseTaxWithholdTrans(
        CustVendTrans _custVendTrans,
        Factor _settledFactor,
        TransDate _transDate,
        CustVendTransSettlement _custVendTransSettlement = null,
        Counter _settlementGroupPlaceHolder = 0,
        CustVendTrans _parentVendTrans = _custVendTrans)
    {
        changecompany(_custVendTrans.company())
        {
            NumberSequenceReference numberSequenceReference = TaxWithholdParameters_IN::numRefTaxWithholdVendRelatedVoucher_IN();
            NumberSequenceTable numberSequenceTable = numberSequenceReference.numberSequenceTable();
            if (!numberSequenceTable)
            {
                throw error(strFmt("@SYS53911", numberSequenceReference.referenceLabel(), numberSequenceReference.referenceModuleLabel()));
            }
            LedgerVoucher ledgerVoucher = LedgerVoucher::newLedgerPost(DetailSummary::Detail, SysModule::Tax, numberSequenceTable.NumberSequence);
            LedgerPostingController ledgerPostingController = LedgerPostingController::newForLedgerPostingJournal(ledgerVoucher);
            Voucher voucher = NumberSeq::newGetVoucherFromId(numberSequenceTable.RecId, false).voucher();
            LedgerVoucherObject ledgerPostingReference = LedgerVoucherObject::newReference(voucher, _transDate);
            ledgerPostingController.addReference(ledgerPostingReference);
            LedgerVoucherTransObject ledgerVoucherTransObject;

            Money transacationAmount;
            MoneyMST accountingAmount;
            MoneyMST reportingAmount;
            TaxWithholdTrans_IN TaxWithholdTrans;
            TaxWithholdGroupHeading taxWithholdGroupHeading;
            while select TaxWithholdTrans
                join RecId from taxWithholdGroupHeading
                where taxWithholdGroupHeading.TaxWithholdGroup == taxWithholdTrans.TaxWithholdGroup
                    && taxWithholdGroupHeading.TaxType_IN == TaxWithholdCodeType_IN::TDS
                    && taxWithholdTrans.Voucher == _custVendTrans.Voucher
                    && taxWithholdTrans.TransDate == _custVendTrans.TransDate
            {
                CurrencyExchangeHelper currencyExchangeHelper = CurrencyExchangeHelper::newExchangeDate(
                    Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId),
                    taxWithholdTrans.TransDate);
                currencyExchangeHelper.parmExchangeRate1(TaxExchangeRateHelper::getTDSExchangeRate_IN(taxWithholdTrans.CurrencyCode, taxWithholdTrans.TransDate));
                currencyExchangeHelper.parmReportingExchangeRate1(TaxExchangeRateHelper::getTDSExchangeRateRep_IN(taxWithholdTrans.CurrencyCode, Ledger::reportingCurrency(), taxWithholdTrans.TransDate));

                TaxWithholdTrans_IN reverseTaxWithholdTrans = CustVendSettle::initSettlementTaxWithholdTrans(
                    taxWithholdTrans,
                    _settledFactor * -1,
                    voucher,
                    true,
                    false,
                    _transDate);

                ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAccountingAmountsDefault(
                    ledgerPostingController.getReference(),
                    LedgerPostingType::TDS_IN,
                    LedgerDimensionFacade::serviceCreateLedgerDimension(taxWithholdTrans.LedgerDimension, _custVendTrans.DefaultDimension),
                    taxWithholdTrans.CurrencyCode,
                    reverseTaxWithholdTrans.TaxWithholdAmountCur,
                    reverseTaxWithholdTrans.TaxWithholdAmount,
                    currencyExchangeHelper);

                ledgerVoucher.addTrans(ledgerVoucherTransObject);

                transacationAmount += reverseTaxWithholdTrans.TaxWithholdAmountCur;
                accountingAmount += reverseTaxWithholdTrans.TaxWithholdAmount;
                reportingAmount += currencyExchangeHelper.calculateTransactionCurrencyToReportingCurrency(
                    taxWithholdTrans.CurrencyCode, 
                    reverseTaxWithholdTrans.TaxWithholdAmountCur);
            }

            if (transacationAmount)
            {
                VendTable vendTable = vendTable::find(_custVendTrans.AccountNum);

                CustVendVoucher vendVoucher = CustVendVoucher::construct(
                    SysModule::Vend,
                    _custVendTrans.AccountNum,
                    transacationAmount * -1,
                    _custVendTrans.CurrencyCode,
                    LedgerTransTxt::None,
                    _custVendTrans.DefaultDimension,
                    VendParameters::find().PostingProfile,
                    LedgerPostingType::VendBalance,
                    vendTable.PaymTermId,
                    SettlementType::None,
                    HcmWorker::userId2Worker(curUserId()),
                    NoYes::Yes,
                    '',
                    dateNull(),
                    0,
                    _transDate);

                vendVoucher.parmTransTxt("@TDSForPurchaseOfGoods:ReversedTDS");
                vendVoucher.parmPaymMode(vendTable.PaymMode);
                vendVoucher.parmPaymSpec(vendTable.PaymSpec);
                vendVoucher.parmExchRate(ExchangeRateHelper::exchRate(_custVendTrans.CurrencyCode, _transDate));
                vendVoucher.parmExchRateSecondary(ExchangeRateHelper::exchRateSecond(_custVendTrans.CurrencyCode, _transDate));
                vendVoucher.parmAmountMST(accountingAmount * -1);
                vendVoucher.parmReportingCurrencyAmount(reportingAmount * -1);

                VendTrans vendTrans;
                vendVoucher.post(ledgerVoucher, vendTrans);

                if (_custVendTransSettlement)
                {
                    vendTrans = VendTrans::findVoucherDate(voucher, _transDate);
                    _custVendTransSettlement.insertWHTReverseVendTransMap_INExt(_settlementGroupPlaceHolder, vendTrans.RecId);
                }
            }

            ledgerVoucher.createVoucherLinks(_parentVendTrans.Voucher, _parentVendTrans.TransDate);
            ledgerVoucher.end();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processWithholdingTaxReverseSettlement_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes withholding tax when doing reverse settlement.
    /// </summary>
    /// <param name = "_custVendTrans">The reversed transaction.</param>
    /// <param name = "_settlementGroup">Settlement group.</param>
    /// <param name = "_reversedDate">Reversed date.</param>
    public static void processWithholdingTaxReverseSettlement_IN(
        CustVendTrans _custVendTrans,
        RefRecId _settlementGroup,
        TransDate _reversedDate)
    {
        changecompany(_custVendTrans.company())
        {
            LedgerTransVoucherLink parentLedgerTransVoucherLink;
            select firstonly VoucherGroupId from parentLedgerTransVoucherLink
                where parentLedgerTransVoucherLink.Voucher == _custVendTrans.voucher
                    && parentLedgerTransVoucherLink.TransDate == _custVendTrans.TransDate
                    && parentLedgerTransVoucherLink.DataAreaId == _custVendTrans.company();

            VendTrans vendTrans;
            VendTrans_IN vendTransIN;
            LedgerTransVoucherLink childLedgerTransVoucherLink;
            select firstonly vendTrans
                join RecId from childLedgerTransVoucherLink
                where vendTrans.TransDate == childLedgerTransVoucherLink.TransDate
                    && vendTrans.Voucher == childLedgerTransVoucherLink.Voucher
                    && childLedgerTransVoucherLink.VoucherGroupId == parentLedgerTransVoucherLink.VoucherGroupId
                join RecId from vendTransIN
                    where vendTransIN.VendTrans == vendTrans.RecId
                        && vendTransIN.WithholdTaxRefSettleGroup == _settlementGroup;

            if (vendTrans)
            {
                TaxWithholdCustVendSettlementHelper_INExt::reverseTaxWithholdTrans(
                    vendTrans,
                    1,
                    _reversedDate,
                    null,
                    0,
                    _custVendTrans);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>