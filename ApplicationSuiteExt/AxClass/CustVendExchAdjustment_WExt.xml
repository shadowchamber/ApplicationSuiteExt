<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendExchAdjustment_WExt</Name>
	<SourceCode>
		<Declaration><![CDATA[
class CustVendExchAdjustment_WExt
{
    #ISOCountryRegionCodes

    CustVendExchAdj                     custVendExchAdj;
    CustVendExchAdjTrans                custVendExchAdjTrans;
    LedgerVoucher                       ledgerVoucher;
    LedgerVoucherGroup                  ledgerVoucherGroup;
    TransDate                           transactionDate;
    TransactionTxt                      transTxt;
    TransactionTxt                      transTxtVoucher;
    CustVendSettle                      custVendSettle;
    CustVendReversePostingExt           custVendReversePosting;
    TransDate                           periodStart;
    ExchRateDiffCalcType_W              exchRateDiffCalcType;
    boolean                             isFromSettlement;
    CustVendExchAdjParm_W               custVendExchAdjParm;
    LedgerTransType                     ledgerTransType;
    Counter                             settlementGroupPlaceHolder;
    CustVendTransSettlement             custVendTransSettlement;
    boolean                             changeCorrectAccounting;
    boolean                             changeCorrectReporting;
    FiscalCalendarRecId                 calendarRecId;
    BankAdvancedTransType_RU            bankAdvancedTransType;
    CustVendTransSettlement             custVendTransSettlementCurDeal;
    TransDate                           previousUnrealizedDate;
    LedgerVoucher                       parentLedgerVoucher;
    AmountMST                           reverseAmountMST;
    AmountMSTSecondary                  reverseAmountMSTSecondary;
    SettleDatePrinc                     datePrinciple;
    boolean                             reportingCurrencyEnabled;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcTaxExchRateDiff</Name>
				<Source><![CDATA[
    protected TaxAmount calcTaxExchRateDiff(AmountMST           _exchRateDiff,
                                            CustVendTrans       _custVendTrans,
                                            LedgerPostingType   _posting,
                                            CustVendTrans       _exchRateTrans,
                                            LedgerVoucher       _ledgerVoucher = ledgerVoucher,
                                            boolean             _vatAdjustment = false)
    {
        TaxAmount               taxAmount;
        real                    convertFactor;
        TaxExchDiff_RU          taxExchDiff;
        ;

        convertFactor = _exchRateDiff / _custVendTrans.AmountMST;

        taxExchDiff = new TaxExchDiff_RU(_ledgerVoucher.lastVoucher(),
                                         _ledgerVoucher.lastTransDate(),
                                         '',
                                         _exchRateTrans,
                                         convertFactor);

        taxExchDiff.parmLedgerPostingType(_posting);
        taxExchDiff.parmCustVendExchAdjParm(custVendExchAdjParm);
        taxExchDiff.parmVATAdjustment(_vatAdjustment);
        if (parentLedgerVoucher)
        {
            taxExchDiff.parmLedgerVoucherObject(parentLedgerVoucher.findLedgerVoucherObject(_custVendTrans.Voucher, _custVendTrans.TransDate));
        }

        taxAmount = taxExchDiff.calcTaxAmount(_custVendTrans.Voucher, _custVendTrans.TransDate);

        return taxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcUnrealizedExchAdj</Name>
				<Source><![CDATA[
    protected container calcUnrealizedExchAdj(
        AmountMST           _exchRateDiffAccounting,
        AmountMSTSecondary  _exchRateDiffReporting,
        CustVendTrans       _custVendTrans,
        TransDate           _transDate,
        AmountCur           _settleAmountCur)
    {
        AmountMST           unrealisedAmountAccounting;
        AmountMST           openAmountAccounting;
        AmountMSTSecondary  openAmountReporting;

        AmountMSTSecondary  unrealisedAmountReporting;
        AmountCur           openAmountCur;
        AmountCur           pendingSettledAmountCur;

        if (_custVendTrans.AmountCur)
        {
            [openAmountCur, openAmountAccounting, openAmountReporting] = CustVendExchAdjustment_W::getOpenAmounts(_custVendTrans, _transDate, custVendTransSettlement);

            if (custVendTransSettlement)
            {
                [ pendingSettledAmountCur ] = custVendTransSettlement.getSettledAmounts_W(_custVendTrans, _transDate);
            }

            if (CurrencyExchangeHelper::amount(abs(_settleAmountCur), _custVendTrans.CurrencyCode) <= abs(pendingSettledAmountCur))
            {
                openAmountCur += _settleAmountCur;
            }

            unrealisedAmountAccounting  = CurrencyExchangeHelper::amount(_exchRateDiffAccounting * abs(_settleAmountCur / (openAmountCur ? openAmountCur : _settleAmountCur)));
            unrealisedAmountReporting   = CurrencyExchangeHelper::amount(_exchRateDiffReporting * abs(_settleAmountCur / (openAmountCur ? openAmountCur : _settleAmountCur)));
        }

        return [unrealisedAmountAccounting, unrealisedAmountReporting];
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcUnrealizedExchAdjInPostingLog</Name>
				<Source><![CDATA[
    protected container calcUnrealizedExchAdjInPostingLog(CustVendSettlement _custVendSettlement)
    {
        CustVendTransPostingLog_RU postingLogUnrealized;
        RefTableId                 refTableId = _custVendSettlement.TableId == tableNum(CustSettlement) ? tableNum(CustTrans) : tableNum(VendTrans);

        select sum(SettlementExchAdj), sum(ReportingSettlementExchAdj) from postingLogUnrealized
            where ((postingLogUnrealized.TransRecId     == _custVendSettlement.TransRecId
               &&   postingLogUnrealized.OffSetRecId    == _custVendSettlement.OffsetRecId)
               ||  (postingLogUnrealized.TransRecId     == _custVendSettlement.OffsetRecId
               &&   postingLogUnrealized.OffSetRecId    == _custVendSettlement.TransRecId))
               &&   postingLogUnrealized.TransDate      == _custVendSettlement.TransDate
               &&  !postingLogUnrealized.LedgerDimension
               &&  !postingLogUnrealized.OffsetLedgerDimension
               &&  !postingLogUnrealized.AmountMST
               &&  !postingLogUnrealized.AmountMSTSecond
               &&  !postingLogUnrealized.AmountCur
               &&  (postingLogUnrealized.SettlementExchAdj
               ||   postingLogUnrealized.ReportingSettlementExchAdj)
               &&   postingLogUnrealized.PostingLogType == CustVendTransPostingLogType_RU::UnrealisedExchAdj
               &&   postingLogUnrealized.RefTableId     == refTableId;

        return [postingLogUnrealized.SettlementExchAdj, postingLogUnrealized.ReportingSettlementExchAdj];
    }

]]></Source>
			</Method>
			<Method>
				<Name>correct</Name>
				<Source><![CDATA[
    public NoYes correct(LedgerPostingType   _posting,
                         CustVendTrans       _exchRateTrans,
                         Amount              _exchRateDiffPart,
                         boolean             _reporting)
    {
        boolean origCorrect = _reporting ? _exchRateTrans.CustVendTrans::getCustVendTrans_W().CorrectReporting_RU : _exchRateTrans.Correct;
        boolean correct     = origCorrect;
        int     sign        = correct ? -1 : 1;

        if (custVendExchAdjParm.inheritInvoicePosting() &&
            ((_exchRateTrans.TableId == tableNum(CustTrans) && _posting == LedgerPostingType::ExchRateLoss) ||
             (_exchRateTrans.TableId == tableNum(VendTrans) && _posting == LedgerPostingType::ExchRateGain)))
        {
            // Correct should be the same in GL and in CustVendTrans.
            // So after all postings to GL it is needed to change Correct on CustVendTrans
            correct = !correct;
        }

        if (custVendExchAdjParm.inheritInvoicePosting())
        {
            if ((custVendSettle.amount(_exchRateDiffPart) * sign < 0 && _posting == LedgerPostingType::ExchRateLoss) ||
                (custVendSettle.amount(_exchRateDiffPart) * sign > 0 && _posting == LedgerPostingType::ExchRateGain))
            {
                correct = !correct;
            }
        }
        else
        {
            if ((_exchRateDiffPart * sign < 0 && _posting == LedgerPostingType::ExchRateGain) ||
                (_exchRateDiffPart * sign > 0 && _posting == LedgerPostingType::ExchRateLoss))
            {
                correct = !correct;
            }
        }

        if (_reporting)
        {
            changeCorrectReporting = origCorrect != correct;
        }
        else
        {
            changeCorrectAccounting = origCorrect != correct;
        }

        return correct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>correctTax</Name>
				<Source><![CDATA[
    public NoYes correctTax(LedgerPostingType    _posting,
                               CustVendTrans        _exchRateTrans,
                               Amount               _taxAmount)
    {
        NoYes   correct = _exchRateTrans.Correct;
        int     sign    = correct ? -1 : 1;

        if (custVendExchAdjParm.inheritInvoicePostingTax()                     &&
            custVendExchAdjParm.taxable(_posting) == ExchAdjTaxableType_W::Tax &&
            ((_exchRateTrans.TableId == tableNum(CustTrans) && _posting == LedgerPostingType::ExchRateLoss) ||
             (_exchRateTrans.TableId == tableNum(VendTrans) && _posting == LedgerPostingType::ExchRateGain)))
        {
            correct = !correct;
        }

        if ((_taxAmount * sign < 0 && _posting == LedgerPostingType::ExchRateLoss) ||
            (_taxAmount * sign > 0 && _posting == LedgerPostingType::ExchRateGain))
        {
            correct = !correct;
        }

        return correct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLedgerVoucherObject</Name>
				<Source><![CDATA[
    public LedgerVoucherObject createLedgerVoucherObject(LedgerVoucher _ledgerVoucher,
                                                         TransDate     _transDate,
                                                         Voucher       _voucher,
                                                         boolean       _unrealized)
    {
        LedgerVoucherObject ledgerVoucherObject = _ledgerVoucher.findLedgerVoucherObject();
        Voucher             voucher = _voucher;

        if (ledgerVoucherObject)
        {
            if (! voucher)
            {
                voucher = NumberSeq::newGetVoucherFromCode(_ledgerVoucher.parmVoucherSeriesCode()).voucher();
            }
            if (! _ledgerVoucher.findLedgerVoucherObject(voucher, _transDate))
            {
                ledgerVoucherObject = LedgerVoucherObject::newVoucher(voucher,
                                                                        _transDate,
                                                                        _ledgerVoucher.parmSysModuleDefault(),
                                                                        this.ledgerTransType(_unrealized));
                _ledgerVoucher.addVoucher(ledgerVoucherObject);
            }
            else
            {
                ledgerVoucherObject = _ledgerVoucher.findLedgerVoucherObject(voucher, _transDate);
            }
        }

        if (_voucher)
        {
            ledgerVoucherObject.parmVoucherCheck(false);
        }

        return ledgerVoucherObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custVendExchAdjParm</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets current adjustment parm.
    /// </summary>
    /// <returns>
    ///     <c>CustVendExchAdjParm_W</c> instance with params.
    /// </returns>
    public CustVendExchAdjParm_W custVendExchAdjParm()
    {
        return custVendExchAdjParm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPrevUnrealExchAdj</Name>
				<Source><![CDATA[
    private CustVendTrans findPrevUnrealExchAdj(CustVendTransData _custVendTransData,
                                                CustVendTrans     _exchRateTrans)
    {
        if (_exchRateTrans.Correct)
        {
            return this.findPrevUnrealExchAdj(_custVendTransData,
                                              _custVendTransData.findLastUnrealExchAdjTrans_W(_exchRateTrans.TransDate - 1, custVendTransSettlement));
        }

        return _exchRateTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAmounts</Name>
				<Source><![CDATA[
    protected container getAmounts(CustVendTrans          _custVendTrans,
                                   TransDate              _postingDate,
                                   TransDate              _exchRateDate,
                                   TransDate              _periodStart,
                                   ExchRateDiffCalcType_W _exchRateDiffCalcType,
                                   CustVendSettlement     _custVendSettlementRealized,
                                   CustVendSettlement     _custVendSettlementUnrealized)
    {
        AmountMST               newAmountAccounting;
        AmountMST               regAmountAccounting;
        AmountMST               reverseAmountAccounting;
        AmountMST               realizedReverseAmountAccounting;

        AmountMSTSecondary      newAmountReporting;
        AmountMSTSecondary      regAmountReporting;
        AmountMSTSecondary      reverseAmountReporting;
        AmountMSTSecondary      realizedReverseAmountReporting;

        CustVendTrans           exchRateTrans;
        CustVendTrans           realizedExchRateTrans = _custVendTrans.data();
        AmountCur               openAmountCur;
        AmountMST               openAmountAccounting;
        AmountMSTSecondary      openAmountReporting;

        NoneTableTrans          dimSpec;

        PostingProfile          postingProfile;
        CustVendExchPrinciples  exchPrinciple;
        TransDate               exchRateDate;

        ExchRate                exchRateAccounting;
        ExchRate                exchRateReporting;

        DimensionDefault        defaultDimension;
        AmountMSTExchAdjustment exchAdjustmentUnrealizedAccounting;
        AmountMSTExchAdjustment exchAdjustmentUnrealizedReporting;

        TransactionSelect       postingSpec;

        AmountMST getNewAmountAccountingOnDate(TransDate _locExchRateDate)
        {
            return CurrencyExchangeHelper::mstAmount(openAmountCur, _custVendTrans.CurrencyCode, _locExchRateDate, Currency::noYes2UnknownNoYes(_custVendTrans.euroTriangulation));
        }

        AmountMSTSecondary getNewAmountReportingOnDate(TransDate _locExchRateDate)
        {
            return CurrencyExchangeHelper::amountCur2MSTSecond_RU(openAmountCur, _custVendTrans.CurrencyCode, 0, _locExchRateDate);
        }

        void selectRealExchRateTrans()
        {
            CustVendTrans  tmpExchRateTrans;

            select sum(ExchAdjustmentUnrealized) from realizedExchRateTrans
                where realizedExchRateTrans.OffsetRecId       == _custVendTrans.RecId
                  && (realizedExchRateTrans.TransType         == LedgerTransType::ExchAdjustment
                  ||  realizedExchRateTrans.TransType         == LedgerTransType::AdvanceAdjustment_RU)
                  &&  realizedExchRateTrans.TransDate         >= exchRateTrans.TransDate
                  &&  realizedExchRateTrans.TransDate         <= _postingDate
                  &&  realizedExchRateTrans.ExchAdjustmentUnrealized
                  && !realizedExchRateTrans.LastExchAdj
                  && !realizedExchRateTrans.LastExchAdjVoucher;

            realizedReverseAmountAccounting = realizedExchRateTrans.ExchAdjustmentUnrealized;

            select sum(ExchAdjustmentUnrealized) from realizedExchRateTrans
                where realizedExchRateTrans.OffsetRecId       == _custVendTrans.RecId
                  && (realizedExchRateTrans.TransType         == LedgerTransType::ExchAdjustment
                  ||  realizedExchRateTrans.TransType         == LedgerTransType::AdvanceAdjustment_RU)
                  &&  realizedExchRateTrans.TransDate         == _postingDate
                  &&  realizedExchRateTrans.LastExchAdjRate   != exchRateAccounting
                  &&  realizedExchRateTrans.ExchAdjustmentUnrealized
                  && !realizedExchRateTrans.LastExchAdj
                  && !realizedExchRateTrans.LastExchAdjVoucher;

            realizedReverseAmountAccounting     -= realizedExchRateTrans.ExchAdjustmentUnrealized;
            exchAdjustmentUnrealizedAccounting  += realizedReverseAmountAccounting;

            if (reportingCurrencyEnabled)
            {
                select sum(ReportingExchAdjustmentUnrealized) from realizedExchRateTrans
                    where realizedExchRateTrans.OffsetRecId                == _custVendTrans.RecId
                      && (realizedExchRateTrans.TransType                  == LedgerTransType::ExchAdjustment
                      ||  realizedExchRateTrans.TransType                  == LedgerTransType::AdvanceAdjustment_RU)
                      &&  realizedExchRateTrans.TransDate                  >= exchRateTrans.TransDate
                      &&  realizedExchRateTrans.TransDate                  <= _postingDate
                      &&  realizedExchRateTrans.ReportingExchAdjustmentUnrealized
                      && !realizedExchRateTrans.LastExchAdj
                      && !realizedExchRateTrans.LastExchAdjVoucher;

                realizedReverseAmountReporting = realizedExchRateTrans.ReportingExchAdjustmentUnrealized;

                select sum(ReportingExchAdjustmentUnrealized) from realizedExchRateTrans
                    where realizedExchRateTrans.OffsetRecId                == _custVendTrans.RecId
                      && (realizedExchRateTrans.TransType                  == LedgerTransType::ExchAdjustment
                      ||  realizedExchRateTrans.TransType                  == LedgerTransType::AdvanceAdjustment_RU)
                      &&  realizedExchRateTrans.TransDate                  == _postingDate
                      &&  realizedExchRateTrans.LastExchAdjRateReporting   != exchRateReporting
                      &&  realizedExchRateTrans.ReportingExchAdjustmentUnrealized
                      && !realizedExchRateTrans.LastExchAdj
                      && !realizedExchRateTrans.LastExchAdjVoucher;

                realizedReverseAmountReporting      -= realizedExchRateTrans.ReportingExchAdjustmentUnrealized;
                exchAdjustmentUnrealizedReporting   += realizedReverseAmountReporting;
            }
        }

        realizedExchRateTrans.clear();

        [openAmountCur, openAmountAccounting, openAmountReporting] = CustVendExchAdjustment_W::getOpenAmounts(
            _custVendTrans,
            _postingDate,
            custVendTransSettlementCurDeal ? custVendTransSettlementCurDeal : custVendTransSettlement);

        if (_custVendSettlementRealized && datePrinciple != SettleDatePrinc::SelectDate)
        {
            openAmountCur           += _custVendSettlementRealized.SettleAmountCur;

            openAmountAccounting    += _custVendSettlementRealized.SettleAmountMST          -
                                       _custVendSettlementRealized.ExchAdjustment           +
                                       _custVendSettlementUnrealized.ExchAdjustment;

            openAmountReporting     += _custVendSettlementRealized.SettleAmountReporting    -
                                       _custVendSettlementRealized.ExchAdjustmentReporting  +
                                       _custVendSettlementUnrealized.ExchAdjustmentReporting;
        }

        exchRateTrans = CustVendTransData::construct(_custVendTrans).findLastUnrealExchAdjTrans_W(_postingDate, custVendTransSettlement);

        [dimSpec,
         defaultDimension,
         postingProfile,
         exchPrinciple,
         exchRateDate,
         postingSpec] = this.getUnrealizedParameters(CustVendTransData::construct(_custVendTrans), exchRateTrans);

        if (exchRateTrans && (exchRateTrans.TransDate < _periodStart || _exchRateDiffCalcType == ExchRateDiffCalcType_W::Incremental))
        {
            newAmountAccounting = getNewAmountAccountingOnDate(_exchRateDate);
            regAmountAccounting = newAmountAccounting - getNewAmountAccountingOnDate(exchRateDate);

            if (reportingCurrencyEnabled)
            {
                newAmountReporting = getNewAmountReportingOnDate(_exchRateDate);
                regAmountReporting = newAmountReporting - getNewAmountReportingOnDate(exchRateDate);
            }
        }
        else
        {
            newAmountAccounting = getNewAmountAccountingOnDate(_exchRateDate);
            regAmountAccounting = CurrencyExchangeHelper::amount(newAmountAccounting - openAmountAccounting, Ledger::accountingCurrency());

            if (reportingCurrencyEnabled)
            {
                newAmountReporting = getNewAmountReportingOnDate(_exchRateDate);
                regAmountReporting = CurrencyExchangeHelper::amount(newAmountReporting - openAmountReporting, Ledger::reportingCurrency());
            }

            if (!_custVendSettlementRealized)
            {
                [exchRateAccounting, exchRateReporting] = this.getNextExchRate(exchRateTrans, _postingDate);

                // we should select transactions both already existing in the database and pending until the end of settlement/reversal
                // contained in CustVendTransSettlement class
                selectRealExchRateTrans();

                realizedExchRateTrans = custVendTransSettlement.getCustVendTransTmp_W(_custVendTrans);
                selectRealExchRateTrans();

                realizedExchRateTrans.ExchAdjustmentUnrealized          = exchAdjustmentUnrealizedAccounting;
                realizedExchRateTrans.ReportingExchAdjustmentUnrealized = exchAdjustmentUnrealizedReporting;
            }

            CustVendExchAdjustment_W::reverseTransAmounts(exchRateTrans);
            CustVendExchAdjustment_W::reverseTransAmounts(realizedExchRateTrans);

            reverseAmountAccounting = exchRateTrans.Correct ? 0 : exchRateTrans.ExchAdjustmentUnrealized + realizedExchRateTrans.ExchAdjustmentUnrealized;
            reverseAmountReporting  = exchRateTrans.Correct ? 0 : exchRateTrans.ReportingExchAdjustmentUnrealized + realizedExchRateTrans.ReportingExchAdjustmentUnrealized;
        }

        return [regAmountAccounting, reverseAmountAccounting, newAmountAccounting, regAmountReporting, reverseAmountReporting, newAmountReporting, exchRateTrans];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNextExchRate</Name>
				<Source><![CDATA[
    protected container getNextExchRate(CustVendTrans _lastExchAdjTrans, TransDate _postingDate)
    {
        ExchRate      exchRateAccounting;
        ExchRate      exchRateReporting;
        CustVendTrans exchRateTrans = _lastExchAdjTrans.data();

        void selectExchRateTrans()
        {
            select maxof(LastExchAdjRate) from exchRateTrans
                where exchRateTrans.LastSettleVoucher == _lastExchAdjTrans.LastSettleVoucher
                  && (exchRateTrans.TransType         == LedgerTransType::ExchAdjustment
                  ||  exchRateTrans.TransType         == LedgerTransType::AdvanceAdjustment_RU)
                  &&  exchRateTrans.TransDate         == _lastExchAdjTrans.TransDate
                  &&  exchRateTrans.AccountNum        == _lastExchAdjTrans.AccountNum
                  &&  exchRateTrans.Invoice           == _lastExchAdjTrans.Invoice
                  &&  exchRateTrans.LastExchAdj       == exchRateTrans.TransDate
                  &&  exchRateTrans.ExchAdjustmentUnrealized
                  && !exchRateTrans.LastExchAdjVoucher;

            exchRateAccounting = max(exchRateTrans.LastExchAdjRate, exchRateAccounting);

            if (reportingCurrencyEnabled)
            {
                select maxof(LastExchAdjRateReporting) from exchRateTrans
                    where exchRateTrans.LastSettleVoucher == _lastExchAdjTrans.LastSettleVoucher
                      && (exchRateTrans.TransType         == LedgerTransType::ExchAdjustment
                      ||  exchRateTrans.TransType         == LedgerTransType::AdvanceAdjustment_RU)
                      &&  exchRateTrans.TransDate         == _lastExchAdjTrans.TransDate
                      &&  exchRateTrans.AccountNum        == _lastExchAdjTrans.AccountNum
                      &&  exchRateTrans.Invoice           == _lastExchAdjTrans.Invoice
                      &&  exchRateTrans.LastExchAdj       == exchRateTrans.TransDate
                      &&  exchRateTrans.ReportingExchAdjustmentUnrealized
                      && !exchRateTrans.LastExchAdjVoucher;

                exchRateReporting = max(exchRateTrans.LastExchAdjRateReporting, exchRateReporting);
            }
        }

        if (_lastExchAdjTrans.TransDate == _postingDate)
        {
            // we should select transactions both already existing in the database and pending until the end of settlement/reversal
            // contained in CustVendTransSettlement class
            selectExchRateTrans();

            exchRateTrans = custVendTransSettlement.getCustVendTransTmp_W(_lastExchAdjTrans);
            selectExchRateTrans();

            return [exchRateAccounting + 100,  exchRateReporting + 100];
        }

        return [0, 0];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUnrealizedExchAdjByDate</Name>
				<Source><![CDATA[
    protected container getUnrealizedExchAdjByDate(CustVendTrans _exchRateTrans, CustVendTrans _custVendTrans)
    {
        ExchRate            exchRateAccounting;
        ExchRate            exchRateReporting;
        CustVendTrans       unrealExchRateTrans         = _exchRateTrans.data();
        AmountMST           unrealizedExchAdjAccounting = _exchRateTrans.ExchAdjustment;
        AmountMSTSecondary  unrealizedExchAdjReporting  = _exchRateTrans.ExchAdjustmentReporting;

        void selectUnrealExchRateTrans()
        {
            select sum(ExchAdjustment) from unrealExchRateTrans
                where unrealExchRateTrans.OffsetRecId       == _custVendTrans.RecId
                  && (unrealExchRateTrans.TransType         == LedgerTransType::ExchAdjustment
                  ||  unrealExchRateTrans.TransType         == LedgerTransType::AdvanceAdjustment_RU)
                  &&  unrealExchRateTrans.TransDate         == _exchRateTrans.TransDate
                  &&  unrealExchRateTrans.LastExchAdjRate   == exchRateAccounting
                  &&  unrealExchRateTrans.ExchAdjustmentUnrealized
                  && !unrealExchRateTrans.LastExchAdj
                  && !unrealExchRateTrans.LastExchAdjVoucher;

            CustVendExchAdjustment_W::reverseTransAmounts(unrealExchRateTrans);

            unrealizedExchAdjAccounting += unrealExchRateTrans.ExchAdjustment;

            if (reportingCurrencyEnabled)
            {
                select sum(ExchAdjustmentReporting) from unrealExchRateTrans
                    where unrealExchRateTrans.OffsetRecId               == _custVendTrans.RecId
                      && (unrealExchRateTrans.TransType                 == LedgerTransType::ExchAdjustment
                      ||  unrealExchRateTrans.TransType                 == LedgerTransType::AdvanceAdjustment_RU)
                      &&  unrealExchRateTrans.TransDate                 == _exchRateTrans.TransDate
                      &&  unrealExchRateTrans.LastExchAdjRateReporting  == exchRateReporting
                      &&  unrealExchRateTrans.ReportingExchAdjustmentUnrealized
                      && !unrealExchRateTrans.LastExchAdjRateReporting
                      && !unrealExchRateTrans.LastExchAdjVoucher;

                CustVendExchAdjustment_W::reverseTransAmounts(unrealExchRateTrans);

                unrealizedExchAdjReporting += unrealExchRateTrans.ExchAdjustmentReporting;
            }
        }

        unrealExchRateTrans.clear();

        [exchRateAccounting, exchRateReporting] = this.getNextExchRate(_exchRateTrans, _exchRateTrans.TransDate);

        // we should select transactions both already existing in the database and pending until the end of settlement/reversal
        // contained in CustVendTransSettlement class
        selectUnrealExchRateTrans();

        unrealExchRateTrans = custVendTransSettlement.getCustVendTransTmp_W(_exchRateTrans);
        selectUnrealExchRateTrans();

        return [unrealizedExchAdjAccounting, unrealizedExchAdjReporting];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUnrealizedExchAdjByPeriod</Name>
				<Source><![CDATA[
    protected container getUnrealizedExchAdjByPeriod(CustVendTrans _custVendTrans, TransDate _fromDate, TransDate _toDate)
    {
        CustVendSettlement  custVendSettlement;
        AmountMST           unrealizedExchAdjAccounting;
        AmountMSTSecondary  unrealizedExchAdjReporting;
        CustVendTransStatic custVendTransStatic = CustVendTransStatic::construct(_custVendTrans);

        void selectSettlement()
        {
            select sum(ExchAdjustment), sum(ExchAdjustmentReporting) from custVendSettlement
                where custVendSettlement.TransRecId == _custVendTrans.RecId
                   && custVendSettlement.TransDate  >= _fromDate
                   && custVendSettlement.TransDate  <= _toDate
                   && !custVendSettlement.SettleAmountCur
                   && !custVendSettlement.SettleAmountMST
                   && (!reportingCurrencyEnabled
                   || !custVendSettlement.SettleAmountReporting);

            CustVendExchAdjustment_W::reverseSettlementAmounts(custVendSettlement);

            unrealizedExchAdjAccounting += custVendSettlement.ExchAdjustment;
            unrealizedExchAdjReporting  += custVendSettlement.ExchAdjustmentReporting;
        }

        custVendSettlement = custVendTransStatic.custVendSettlement();

        // we should select transactions both already existing in the database and pending until the end of settlement/reversal
        // contained in CustVendTransSettlement class
        selectSettlement();

        custVendSettlement = custVendTransSettlement.getCustVendSettlementTmp_W(_custVendTrans);
        selectSettlement();

        return [unrealizedExchAdjAccounting, unrealizedExchAdjReporting];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUnrealizedParameters</Name>
				<Source><![CDATA[
    protected container getUnrealizedParameters(CustVendTransData _custVendTransData, CustVendTrans _exchRateTrans, boolean _getPrevParameters = true)
    {
        NoneTableTrans          dimSpec;
        DimensionDefault        defaultDimension;
        PostingProfile          postingProfile;
        TransactionSelect       postingSpec;
        CustVendExchPrinciples  exchPrinciple;
        TransDate               exchRateDate;
        CustVendTrans           custVendTrans = _custVendTransData.parmCustVendTransStatic().custVendTrans();

        if (_getPrevParameters)
        {
            while select custVendTrans
                group by CreatedTransactionId
                where custVendTrans.TransDate == _exchRateTrans.TransDate &&
                      custVendTrans.Voucher   == _exchRateTrans.Voucher
            {
                [dimSpec,
                 exchPrinciple,
                 postingSpec,
                 postingProfile,
                 exchRateDate] = _custVendTransData.getUnrealizedParameters_W(custVendTrans.CreatedTransactionId, previousUnrealizedDate);

                if (exchPrinciple == CustVendExchPrinciples::InvDatePrinciple)
                {
                    exchRateDate = _custVendTransData.parmCustVendTrans().TransDate;
                }

                if (exchRateDate)
                {
                    break;
                }
            }
        }
        else if (! isFromSettlement)
        {
            dimSpec        = custVendExchAdj.dimSpec();
            exchPrinciple  = custVendExchAdj.exchPrinciples();
            postingSpec    = custVendExchAdj.postingSpec();
            postingProfile = custVendExchAdj.postingProfile();
            exchRateDate   = custVendExchAdj.exchRateDate();
        }

        switch (dimSpec)
        {
            case NoneTableTrans::None :
                defaultDimension = 0;
                break;

            case NoneTableTrans::Table :
                defaultDimension = _custVendTransData.custVendTable().DefaultDimension;
                break;

            case NoneTableTrans::Transaction :
                defaultDimension = _custVendTransData.parmCustVendTrans().DefaultDimension;
                break;
        }

        if (postingSpec == TransactionSelect::Transaction)
        {
            postingProfile = _custVendTransData.parmCustVendTrans().PostingProfile;
        }

        return [dimSpec, defaultDimension, postingProfile, exchPrinciple, exchRateDate, postingSpec];
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLedgerVoucher</Name>
				<Source><![CDATA[
    protected void initLedgerVoucher(CustVendTrans _custVendTrans, boolean _realized)
    {
        NumberSeq                    numberSeq;
        Voucher                      voucher;

        if (_realized)
        {
            numberSeq = NumberSeq::newGetVoucher(custVendExchAdj.module() == SysModule::Cust ?
                                                 CustParameters::numRefCustPaymVoucher()     :
                                                 VendParameters::numRefVendPaymentVoucher());
        }
        else
        {
            numberSeq = NumberSeq::newGetVoucher(custVendExchAdj.module() == SysModule::Cust ?
                                                 CustParameters::numRefCustExchAdjVoucher()  :
                                                 VendParameters::numRefVendExchAdjVoucher());
        }
        voucher = numberSeq.voucher();

        transTxtVoucher = TransactionTxt::construct();
        transTxtVoucher.setType(custVendExchAdj.module() == SysModule::Cust ?
                                LedgerTransTxt::CustExchAdjLedger           :
                                LedgerTransTxt::VendExchAdjLedger);

        transTxtVoucher.setVoucher(voucher);
        transTxtVoucher.setFormLetter(_custVendTrans.Invoice);
        transTxtVoucher.setKey1(_custVendTrans.AccountNum);

        transTxt = TransactionTxt::construct();
        transTxt.setType(custVendExchAdj.module() == SysModule::Cust ?
                         LedgerTransTxt::CustExchAdjCust             :
                         LedgerTransTxt::VendExchAdjVend);
        transTxt.setLanguage(_custVendTrans.languageId());
        transTxt.setVoucher(voucher);
        transTxt.setFormLetter(_custVendTrans.Invoice);
        transTxt.setKey1(_custVendTrans.AccountNum);

        ledgerVoucher = LedgerVoucher::newLedgerPost(DetailSummary::Detail,
                                                     custVendExchAdj.module(),
                                                     numberSeq.parmVoucherSequenceCode());

        ledgerVoucher.parmCheckBlockedDimensions(false);
        ledgerVoucher.parmCompanyId(_custVendTrans.company());

        ledgerVoucher.addVoucher(
            LedgerVoucherObject::newVoucher(voucher,
                                            custVendExchAdj.postingDate(),
                                            custVendExchAdj.module(),
                                            this.ledgerTransType(! _realized)));

        ledgerVoucher.findLedgerVoucherObject().lastTransTxt(transTxtVoucher.txt(custVendExchAdj.transExchAdjTxt()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInventoryClosed</Name>
				<Source><![CDATA[
    public boolean isInventoryClosed(CustVendTrans _custVendTrans, TransDate _transDate)
    {
        boolean   ret;
        TransDate closingDate;

        if (_custVendTrans.TableId == tableNum(VendTrans))
        {
            closingDate = InventClosing::closingDate();

            if (closingDate < _transDate)
            {
                closingDate = InventClosing::closingDate(false, InventTransCurrency_RU::SecondaryCur);
            }

            if (closingDate >= _transDate)
            {
                ret = true;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSpecialPosting</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines if special posting is needed.
    /// </summary>
    /// <param name="_unrealized">
    ///     true if an unrealized exchange adjustment; otherwise, false a realized exchange adjustment.
    /// </param>
    /// <param name="_custVendTrans">
    ///     <c>CustVendTrans</c> buffer.
    /// </param>
    /// <param name="_exchRateTrans">
    ///     <c>CustVendTrans</c> buffer.
    /// </param>
    /// <returns>
    ///     true if the special posting is needed; otherwise, false.
    /// </returns>
    public boolean isSpecialPosting(boolean _unrealized, CustVendTrans _custVendTrans, CustVendTrans _exchRateTrans)
    {
        return  (_unrealized                                                                ||
                !_custVendTrans.Invoice                                                     ||
                (_custVendTrans.Invoice && !custVendExchAdjParm.inheritInvoicePosting())    ||
                this.isInventoryClosed(_custVendTrans, _exchRateTrans.TransDate));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isVATAdjustment</Name>
				<Source><![CDATA[
    public boolean isVATAdjustment(boolean         _unrealized,
                                    CustVendTrans   _custVendTransDebet,
                                    CustVendTrans   _custVendTransCredit)
    {
        boolean ret;

        if (this.ledgerTransType(_unrealized) == LedgerTransType::AdvanceAdjustment_RU &&
            (_custVendTransCredit.Prepayment || _custVendTransDebet.Prepayment))
        {
            ret = true;

            if (_custVendTransCredit.Prepayment)
            {
                ret = _custVendTransCredit.CurrencyCode != CompanyInfoHelper::standardCurrency();
            }
            if (_custVendTransDebet.Prepayment)
            {
                ret = ret && _custVendTransDebet.CurrencyCode != CompanyInfoHelper::standardCurrency();
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerTransType</Name>
				<Source><![CDATA[
    public LedgerTransType ledgerTransType(boolean _unrealized)
    {
        if (_unrealized)
        {
            return LedgerTransType::ExchAdjustment;
        }

        return ledgerTransType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        exchRateDiffCalcType        = LedgerParameters::find().ExchRateDiffCalcType_W;
        ledgerTransType             = LedgerTransType::ExchAdjustment;
        calendarRecId               = CompanyInfoHelper::fiscalCalendarRecId();
        reportingCurrencyEnabled    = Ledger::reportingCurrency() != '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBankAdvancedTransType</Name>
				<Source><![CDATA[
    public BankAdvancedTransType_RU parmBankAdvancedTransType(BankAdvancedTransType_RU _bankAdvancedTransType = bankAdvancedTransType)
    {
        bankAdvancedTransType = _bankAdvancedTransType;
        return bankAdvancedTransType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustVendExchAdj</Name>
				<Source><![CDATA[
    public CustVendExchAdj parmCustVendExchAdj(CustVendExchAdj _custVendExchAdj = custVendExchAdj)
    {
        ;
        custVendExchAdj = _custVendExchAdj;
        return custVendExchAdj;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustVendExchAdjTrans</Name>
				<Source><![CDATA[
    public CustVendExchAdjTrans parmCustVendExchAdjTrans(CustVendExchAdjTrans _custVendExchAdjTrans = custVendExchAdjTrans)
    {
        ;
        custVendExchAdjTrans = _custVendExchAdjTrans;
        return custVendExchAdjTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustVendReversePosting</Name>
				<Source><![CDATA[
    public CustVendReversePostingExt parmCustVendReversePosting(CustVendReversePostingExt _custVendReversePosting = custVendReversePosting)
    {
        ;
        custVendReversePosting = _custVendReversePosting;
        return custVendReversePosting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustVendSettle</Name>
				<Source><![CDATA[
    public CustVendSettle parmCustVendSettle(CustVendSettle _custVendSettle = custVendSettle)
    {
        ;
        custVendSettle = _custVendSettle;
        return custVendSettle;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDatePrinciple</Name>
				<Source><![CDATA[
    public SettleDatePrinc parmDatePrinciple(SettleDatePrinc _datePrinciple = datePrinciple)
    {
        ;
        datePrinciple = _datePrinciple;

        return datePrinciple;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsFromSettlement</Name>
				<Source><![CDATA[
    public boolean parmIsFromSettlement(boolean _isFromSettlement = isFromSettlement)
    {
        isFromSettlement = _isFromSettlement;
        return isFromSettlement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerVoucher</Name>
				<Source><![CDATA[
    public LedgerVoucher parmLedgerVoucher(LedgerVoucher _ledgerVoucher = ledgerVoucher)
    {
        ;
        if (prmisDefault(_ledgerVoucher) && isFromSettlement)
        {
            ledgerVoucher = custVendReversePosting ? custVendReversePosting.parmLedgerVoucher_W() : custVendSettle.parmLedgerVoucher_W();
        }
        else
        {
            ledgerVoucher = _ledgerVoucher;
        }

        return ledgerVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParentLedgerVoucher</Name>
				<Source><![CDATA[
    public LedgerVoucher parmParentLedgerVoucher(LedgerVoucher _parentLedgerVoucher = parentLedgerVoucher)
    {
        ;
        parentLedgerVoucher = _parentLedgerVoucher;

        return parentLedgerVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPreviousUnrealizedDate</Name>
				<Source><![CDATA[
    public TransDate parmPreviousUnrealizedDate(TransDate _previousUnrealizedDate = previousUnrealizedDate)
    {
        previousUnrealizedDate = _previousUnrealizedDate;
        return previousUnrealizedDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransactionDate</Name>
				<Source><![CDATA[
    public TransDate parmTransactionDate(TransDate _transactionDate = transactionDate)
    {
        ;
        transactionDate = _transactionDate;
        return transactionDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postExchAdj</Name>
				<Source><![CDATA[
    protected container postExchAdj(
        AmountMST            _exchRateDiffAccounting,
        AmountMST            _standardExchRateDiffAccounting,
        AmountMSTSecondary   _exchRateDiffReporting,
        AmountMSTSecondary   _standardExchRateDiffReporting,
        CustVendTrans        _custVendTrans,
        boolean              _unrealized,
        boolean              _reverseAccounting,
        boolean              _reverseReporting,
        Voucher              _lastExchAdjVoucher,
        TransDate            _lastExchAdj,
        ExchRate             _lastExchAdjRateAccounting,
        ExchRate             _lastExchAdjRateReporting,
        NoneTableTrans       _dimSpec,
        DimensionDefault     _defaultDimension,
        PostingProfile       _postingProfile,
        boolean              _createNewVoucherObject,
        PostingProfile       _custVendTransCreditPostingProfile,
        boolean              _useStandardExchRateDiff,
        CustVendTrans        _custVendTransDebet,
        CustVendTrans        _custVendTransCredit,
        Voucher              _voucher,
        TransactionSelect   _postingSpec,
        boolean              _createUnrelizedPostingLog = false,
        boolean              _postLedger                = true)
    {
        Counter             signAccounting  = _reverseAccounting ? -1 : 1;
        Counter             signReporting   = _reverseReporting ?  -1 : 1;
        CustVendTrans       exchRateTrans   = _custVendTrans.data();
        LedgerVoucherObject ledgerVoucherObject;
        LedgerPostingType   postingAccounting;
        LedgerPostingType   postingReporting;
        PostingProfile      postingProfile;
        TransactionTxt      exchDiffText;
        DimensionDefault    defaultDimension;

        Voucher             origLastVoucher;
        TransDate           origLastTransDate;
        Amount              locExchRateDiffAccounting;
        Amount              locExchRateDiffReporting;
        CustVendTrans_W     custVendTrans_W;

        ledgerVoucher       = this.parmLedgerVoucher();
        origLastVoucher     = ledgerVoucher.lastVoucher();
        origLastTransDate   = ledgerVoucher.lastTransDate();

        custVendExchAdjParm = CustVendExchAdjParm_W::newFromParm(
            _custVendTrans,
            custVendSettle.isExchAmountDiff_RU(),
            _unrealized,
            this.ledgerTransType(_unrealized),
            false,
            bankAdvancedTransType != BankAdvancedTransType_RU::None);

        custVendSettle.parmCustVendExchAdjParm_W(custVendExchAdjParm);

        exchDiffText = TransactionTxt::construct(
            custVendSettle.exchAdjTxt(),
            _custVendTrans.languageId(),
            transactionDate,
            _custVendTrans.Invoice,
            _custVendTrans.Voucher);

        exchRateTrans.clear();

        if (_createNewVoucherObject && _postLedger)
        {
            ledgerVoucherObject = this.createLedgerVoucherObject(ledgerVoucher, transactionDate, _voucher, _unrealized);
            ledgerVoucher.lastVoucher(ledgerVoucherObject.parmVoucher());
            ledgerVoucher.lastTransDate(ledgerVoucherObject.parmTransDate());
        }
        else
        {
            ledgerVoucherObject = ledgerVoucher.findLedgerVoucherObject();
        }

        if (! _unrealized                                                            &&
            (this.parmBankAdvancedTransType() == BankAdvancedTransType_RU::CurrBuy   ||
             this.parmBankAdvancedTransType() == BankAdvancedTransType_RU::CurrSell))
        {
            exchRateTrans.TransType         = LedgerTransType::GainLossCurrencyDeal_RU;
            _exchRateDiffReporting          = CurrencyExchangeHelper::amountMST2MSTSecond_RU(_exchRateDiffAccounting, transactionDate);
            _standardExchRateDiffReporting  = CurrencyExchangeHelper::amountMST2MSTSecond_RU(_standardExchRateDiffAccounting, transactionDate);
        }
        else
        {
            exchRateTrans.TransType = this.ledgerTransType(_unrealized);
        }

        exchRateTrans.RecId         = settlementGroupPlaceHolder;  // this enables correct tax reference creation when posting tax on exchange adjustment
        exchRateTrans.OffsetRecId   = _custVendTrans.RecId;
        exchRateTrans.PaymReference = _custVendTransCredit.PaymReference;
        exchRateTrans.AccountNum    = _custVendTrans.AccountNum;
        exchRateTrans.Invoice       = _custVendTrans.Invoice;
        exchRateTrans.Voucher       = ledgerVoucher.lastVoucher();
        exchRateTrans.Approved      = NoYes::Yes;

        if (isFromSettlement)
        {
            transTxt.setType(custVendSettle.exchAdjTxt());
            transTxt.setVoucher(_custVendTrans.Voucher);
            transTxt.setFormLetter(_custVendTrans.Invoice);
            exchRateTrans.Txt = transTxt.txt();
        }
        else
        {
            exchRateTrans.Txt = custVendExchAdj.transExchAdjTxt();
        }

        if (!ledgerVoucherObject.lastTransTxt())
        {
            ledgerVoucherObject.lastTransTxt(exchRateTrans.Txt);
        }

        exchRateTrans.CurrencyCode              = _custVendTrans.CurrencyCode;
        exchRateTrans.AmountMST                 = _exchRateDiffAccounting * signAccounting;
        exchRateTrans.ReportingCurrencyAmount   = _exchRateDiffReporting * signReporting;
        exchRateTrans.LastExchAdj               = _lastExchAdj;
        exchRateTrans.LastExchAdjVoucher        = _lastExchAdjVoucher;
        exchRateTrans.LastExchAdjRate           = _lastExchAdjRateAccounting;
        exchRateTrans.LastExchAdjRateReporting  = _lastExchAdjRateReporting;

        exchRateTrans.Correct                   = _reverseAccounting;

        custVendTrans_W = exchRateTrans.CustVendTrans::getCustVendTrans_W();
        custVendTrans_W.CorrectReporting_RU     = _reverseReporting;
        exchRateTrans.CustVendTrans::packCustVendTrans_W(custVendTrans_W);

        postingAccounting                       = custVendExchAdjParm.postingType(_exchRateDiffAccounting);
        postingReporting                        = custVendExchAdjParm.postingType(_exchRateDiffReporting);

        if (_unrealized)
        {
            postingProfile                                  = _postingProfile;
            defaultDimension                                = _defaultDimension;

            exchRateTrans.ExchAdjustmentUnrealized          = -_exchRateDiffAccounting * signAccounting;
            exchRateTrans.ExchAdjustment                    = -_exchRateDiffAccounting * signAccounting;

            exchRateTrans.ReportingExchAdjustmentUnrealized = - _exchRateDiffReporting * signReporting;
            exchRateTrans.ExchAdjustmentReporting           = - _exchRateDiffReporting * signReporting;

            exchRateTrans.TransDate                         = max(_lastExchAdj, transactionDate);
        }
        else
        {
            postingProfile                                  = _custVendTransCreditPostingProfile ? _custVendTransCreditPostingProfile : _custVendTrans.PostingProfile;
            exchRateTrans.ExchAdjustmentRealized            = -_exchRateDiffAccounting * signAccounting;
            exchRateTrans.ExchAdjustment                    = -_exchRateDiffAccounting * signAccounting;
            exchRateTrans.ReportingExchAdjustmentRealized   = -_exchRateDiffReporting  * signReporting;
            exchRateTrans.ExchAdjustmentReporting           = -_exchRateDiffReporting  * signReporting;
            exchRateTrans.TransDate                         = transactionDate;
            defaultDimension                                = _custVendTrans.DefaultDimension;
        }

        if (_exchRateDiffAccounting)
        {
            custVendExchAdjParm.rTax25ExchAdjDimension().parmExchAdjType(RTax25ExchAdjDimension::postingType2AdjType(postingAccounting));
            exchRateTrans.DefaultDimension = custVendExchAdjParm.rTax25ExchAdjDimension().getDefaultDimension(defaultDimension);
        }
        else
        {
            exchRateTrans.DefaultDimension = defaultDimension;
        }

        if (_exchRateDiffReporting)
        {
            custVendExchAdjParm.rTax25ExchAdjDimension().parmExchAdjType(RTax25ExchAdjDimension::postingType2AdjType(postingReporting));
            custVendTrans_W = exchRateTrans.CustVendTrans::getCustVendTrans_W();
            custVendTrans_W.DefaultDimensionReporting_RU = custVendExchAdjParm.rTax25ExchAdjDimension().getDefaultDimension(defaultDimension);
            exchRateTrans.CustVendTrans::packCustVendTrans_W(custVendTrans_W);
        }
        else
        {
            custVendTrans_W = exchRateTrans.CustVendTrans::getCustVendTrans_W();
            custVendTrans_W.DefaultDimensionReporting_RU = defaultDimension;
            exchRateTrans.CustVendTrans::packCustVendTrans_W(custVendTrans_W);
        }

        exchRateTrans.Closed                = CustVendTransData::construct(exchRateTrans).maxSettlementDate(isFromSettlement ? transactionDate : exchRateTrans.TransDate);
        exchRateTrans.SettleAmountMST       = _exchRateDiffAccounting * signAccounting;
        exchRateTrans.SettleAmountReporting = _exchRateDiffReporting  * signReporting;
        exchRateTrans.AmountCur             = 0;
        exchRateTrans.SettleAmountCur       = 0;
        exchRateTrans.LastSettleVoucher     = _custVendTrans.Voucher;
        exchRateTrans.LastSettleCompany     = _custVendTrans.company();
        exchRateTrans.LastSettleAccountNum  = _custVendTrans.AccountNum;
        exchRateTrans.LastSettleDate        = exchRateTrans.TransDate;

        exchRateTrans.initFromPostingProfile(postingProfile);

        if (_unrealized || _exchRateDiffAccounting || _exchRateDiffReporting)
        {
            locExchRateDiffAccounting   = (_useStandardExchRateDiff ? _standardExchRateDiffAccounting : _exchRateDiffAccounting) * signAccounting;
            locExchRateDiffReporting    = (_useStandardExchRateDiff ? _standardExchRateDiffReporting  : _exchRateDiffReporting)  * signReporting;

            _custVendTrans.ExchAdjustment           += locExchRateDiffAccounting;
            _custVendTrans.ExchAdjustmentReporting  += locExchRateDiffReporting;

            if (_unrealized)
            {
                _custVendTrans.ExchAdjustmentUnrealized             += locExchRateDiffAccounting;
                _custVendTrans.ReportingExchAdjustmentUnrealized    += locExchRateDiffReporting;
            }
            else
            {
                if (_custVendTrans.RecId == _custVendTransCredit.RecId)
                {
                    _custVendTrans.SettleAmountMST          += locExchRateDiffAccounting;
                    _custVendTrans.SettleAmountReporting    += locExchRateDiffReporting;
                }

                if (_postLedger)
                {
                    _custVendTrans.ExchAdjustmentRealized           += locExchRateDiffAccounting;
                    _custVendTrans.ReportingExchAdjustmentRealized  += locExchRateDiffReporting;
                }
            }
        }

        if (_postLedger)
        {
            if (isFromSettlement)
            {
                exchDiffText.setType(custVendSettle.exchAdjTxt(LedgerJournalACType::Ledger));
                ledgerVoucherObject.lastTransTxt(exchDiffText.txt());
                ledgerVoucherObject.parmPaymentReference(_custVendTransCredit.PaymReference);
            }

            this.postExchAdjLedgerTrans(
                // accounting
                postingAccounting,
                custVendExchAdjParm.postingType(_standardExchRateDiffAccounting),
                custVendSettle.amount(_exchRateDiffAccounting * signAccounting),
                custVendSettle.amount(_standardExchRateDiffAccounting * signAccounting),

                // reporting
                postingReporting,
                custVendExchAdjParm.postingType(_standardExchRateDiffReporting),
                custVendSettle.amount(_exchRateDiffReporting * signReporting),
                custVendSettle.amount(_standardExchRateDiffReporting * signReporting),

                _custVendTrans,
                exchRateTrans,
                _dimSpec != NoneTableTrans::Transaction,
                _unrealized,
                _custVendTransDebet,
                _custVendTransCredit,
                _createUnrelizedPostingLog,
                _postingSpec
                );
        }

        if (changeCorrectAccounting)
        {
            exchRateTrans.Correct = ! exchRateTrans.Correct;
        }

        if (changeCorrectReporting)
        {
            custVendTrans_W = exchRateTrans.CustVendTrans::getCustVendTrans_W();
            custVendTrans_W.CorrectReporting_RU = ! custVendTrans_W.CorrectReporting_RU;
            exchRateTrans.CustVendTrans::packCustVendTrans_W(custVendTrans_W);
        }

        custVendSettle.reverseAmounts(exchRateTrans);

        if (_unrealized || _exchRateDiffAccounting || _exchRateDiffReporting)
        {
            custVendTransSettlement.addTransAndDefaultSettlement(exchRateTrans, settlementGroupPlaceHolder);
        }

        custVendSettle.reverseAmounts(exchRateTrans);

        ledgerVoucher.lastVoucher(origLastVoucher);
        ledgerVoucher.lastTransDate(origLastTransDate);

        if (!_reverseAccounting)
        {
            reverseAmountMST = exchRateTrans.AmountMST;
        }

        if (!_reverseReporting)
        {
            reverseAmountMSTSecondary = exchRateTrans.ReportingCurrencyAmount;
        }

        return [exchRateTrans.AmountMST, exchRateTrans.ReportingCurrencyAmount];
    }

]]></Source>
			</Method>
			<Method>
				<Name>postExchAdjLedgerTrans</Name>
				<Source><![CDATA[
    protected void postExchAdjLedgerTrans(
        LedgerPostingType   _postingAccounting,
        LedgerPostingType   _standardPostingAccounting,
        AmountMST           _exchRateDiffAccounting,
        AmountMST           _standardExchRateDiffAccounting,
        LedgerPostingType   _postingReporting,
        LedgerPostingType   _standardPostingReporting,
        AmountMSTSecondary  _exchRateDiffReporting,
        AmountMSTSecondary  _standardExchRateDiffReporting,
        CustVendTrans       _custVendTrans,
        CustVendTrans       _exchRateTrans,
        boolean             _forceSingleDistribution,
        boolean             _unrealized,
        CustVendTrans       _custVendTransDebet,
        CustVendTrans       _custVendTransCredit,
        boolean             _createUnrealizedPostingLog,
        TransactionSelect   _postingSpec
        )
    {
        boolean                         isExchAmountDiff;
        CustVendExchAdjustmentPost_WExt exchAdjustmentPost;
        Amount                          exchRateDiffLineTotalAccounting;
        Amount                          exchRateDiffLineTotalReporting;
        Amount                          standardExchRateDiffLineTotalReporting;
        Amount                          standardExchRateDiffLineTotalAccounting;

        exchAdjustmentPost = CustVendExchAdjustmentPost_WExt::newFromExchAdjustment(
            this,
            _unrealized,
            _custVendTrans,
            _exchRateTrans,
            _forceSingleDistribution,
            _custVendTransDebet,
            _custVendTransCredit,
            _createUnrealizedPostingLog);

        exchAdjustmentPost.parmPostingSpec(_postingSpec);

        if (_exchRateDiffAccounting || _standardExchRateDiffAccounting)
        {
            exchAdjustmentPost.postAccountingCurrency(
                _postingAccounting,
                _standardPostingAccounting,
                _exchRateDiffAccounting,
                _standardExchRateDiffAccounting);

            exchRateDiffLineTotalAccounting         = exchAdjustmentPost.exchRateDiffLineTotal();
            standardExchRateDiffLineTotalAccounting = exchAdjustmentPost.standardExchRateDiffLineTotal();
        }

        if (_exchRateDiffReporting || _standardExchRateDiffReporting)
        {
            exchAdjustmentPost.postReportingCurrency(
                _postingReporting,
                _standardPostingReporting,
                _exchRateDiffReporting,
                _standardExchRateDiffReporting);

            exchRateDiffLineTotalReporting          = exchAdjustmentPost.exchRateDiffLineTotal();
            standardExchRateDiffLineTotalReporting  = exchAdjustmentPost.standardExchRateDiffLineTotal();
        }

        if (! _unrealized && _custVendTrans.TableId == tableNum(VendTrans))
        {
            custVendSettle.postVATTransitAmountDiff_RU(_exchRateTrans, false, ledgerVoucher);
        }

        if (exchRateDiffLineTotalAccounting || standardExchRateDiffLineTotalAccounting || exchRateDiffLineTotalReporting || standardExchRateDiffLineTotalReporting)
        {
            this.postExchAdj(
                exchRateDiffLineTotalAccounting,
                standardExchRateDiffLineTotalAccounting,
                exchRateDiffLineTotalReporting,
                standardExchRateDiffLineTotalReporting,
                _custVendTrans,
                _unrealized,
                false,
                false,
                '',
                dateNull(),
                0,
                0,
                NoneTableTrans::Transaction,
                _custVendTrans.DefaultDimension,
                '',
                false,
                _custVendTrans.PostingProfile,
                true,
                _custVendTransDebet,
                _custVendTransCredit,
                '',
                _postingSpec,
                false,
                false);
        }

        if (_exchRateDiffAccounting                                                     &&
            this.ledgerTransType(_unrealized) == LedgerTransType::AdvanceAdjustment_RU  &&
            this.isSpecialPosting(_unrealized, _custVendTrans, _exchRateTrans))
        {
            FactureJourCreate_RU::newAmountDiffFactureCustVendTrans(
                ledgerVoucher,
                _exchRateTrans,
                _custVendTransDebet.RecId,
                _custVendTransCredit.RecId,
                max(_custVendTransDebet.TransDate, _custVendTransCredit.TransDate),
                FactureType_RU::AdvanceAdjustment,
                _exchRateDiffAccounting);
        }

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([ #isoRU ]) && _exchRateDiffAccounting)
        {
            if (LedgerParameters::find().ExchRateDiffCalcType_W != ExchRateDiffCalcType_W::Standard &&
                this.ledgerTransType(_unrealized) != LedgerTransType::AdvanceAdjustment_RU &&
                ! _custVendTransDebet.bankCurrencyTransferId_RU())
            {
                if (_standardExchRateDiffAccounting &&
                    custVendExchAdjParm.taxable(_standardPostingAccounting) == ExchAdjTaxableType_W::Tax)
                {
                    isExchAmountDiff = custVendSettle && custVendSettle.isExchAmountDiff_RU();
                    FactureJourCreate_RU::newAmountDiffFactureCustVendTrans(
                        ledgerVoucher,
                        _exchRateTrans,
                        _custVendTransDebet.RecId,
                        _custVendTransCredit.RecId,
                        max(_custVendTransDebet.TransDate, _custVendTransCredit.TransDate),
                        FactureType_RU::ExchAdj,
                        _standardExchRateDiffAccounting,
                        _custVendTrans.RecId,
                        isExchAmountDiff);

                    if (isExchAmountDiff)
                    {
                        FactureCalcAmountAdjustments_RU::newCustVendTrans(_custVendTrans).calc();
                    }
                }
            }

            if (this.ledgerTransType(_unrealized) == LedgerTransType::AdvanceAdjustment_RU &&
                custVendExchAdjParm.vatAdjustment() && this.isVATAdjustment(_unrealized, _custVendTransDebet, _custVendTransCredit))
            {
                FactureJourCreate_RU::newAmountDiffFactureCustVendTrans(
                    ledgerVoucher,
                    _exchRateTrans,
                    _custVendTransDebet.RecId,
                    _custVendTransCredit.RecId,
                    max(_custVendTransDebet.TransDate, _custVendTransCredit.TransDate),
                    FactureType_RU::VATAdjustment,
                    -_standardExchRateDiffAccounting);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processRealizedExchAdj</Name>
				<Source><![CDATA[
    #ISOCountryRegionCodes
    public container processRealizedExchAdj(
        AmountMST            _exchRateDiffAccounting,
        AmountMST            _exchRateDiffReporting,
        CustVendTrans        _firstCustVendTrans,
        CustVendTrans        _custVendTransDebet,
        CustVendTrans        _custVendTransCredit,
        CustVendTransOpen    _custVendTransOpenDebet,
        CustVendTransOpen    _custVendTransOpenCredit,
        AmountCur            _settleAmountCurDebet,
        AmountCur            _settleAmountCurCredit,
        DiscAmount           _utilizedCashDisc,
        DiscAmount           _utilizedCashDiscCredit,
        Voucher              _taxVoucherDebet,
        Voucher              _taxVoucherCredit,
        Amount               _paym2Invoice,
        PennyDiff            _pennyDiffDebet       = 0,
        PennyDiff            _pennyDiffCredit      = 0,
        TransDate            _transDate            = transactionDate,
        boolean              _recalcFuture         = false,
        boolean              _reverseDebet         = true,
        boolean              _isReversedDebet      = true,
        boolean              _isReversedCredit     = true)
    {
        AmountMST                   finalExchRateDiffAccounting;
        AmountMSTSecondary          finalExchRateDiffReporting;

        AmountMST                   reversedAmountDebetAccounting;
        AmountMST                   reversedAmountCreditAccounting;
        AmountMST                   standardReversedAmountDebetAccounting;
        AmountMST                   standardReversedAmountCreditAccounting;

        AmountMSTSecondary          reversedAmountDebetReporting;
        AmountMSTSecondary          reversedAmountCreditReporting;
        AmountMSTSecondary          standardReversedAmountDebetReporting;
        AmountMSTSecondary          standardReversedAmountCreditReporting;

        boolean                     debetReversed, creditReversed;
        CustVendTransOpen           custVendTransOpenDebetLocal, custVendTransOpenCreditLocal;
        CustVendSettlement          custVendSettlementDebet, custVendSettlementCredit;
        CustVendSettlement          custVendSettlement;

        if (CustVendExchAdjustment_W::isAdvanceAdjustment(_firstCustVendTrans, _custVendTransDebet, _custVendTransCredit))
        {
            ledgerTransType                = LedgerTransType::AdvanceAdjustment_RU;
            //custVendAdvAdjustmentDocUpdate = CustVendAdvAdjustmentDocUpdate_W::newFromSettlement(transactionDate);
        }

        // reverse of previously calculated unrealised exchange difference if it is needed
        _custVendTransDebet.LastSettleVoucher       = _custVendTransCredit.Voucher;
        _custVendTransDebet.LastSettleCompany       = _custVendTransCredit.company();
        _custVendTransDebet.LastSettleAccountNum    = _custVendTransCredit.AccountNum;

        _custVendTransCredit.LastSettleVoucher      = _custVendTransDebet.Voucher;
        _custVendTransCredit.LastSettleCompany      = _custVendTransDebet.company();
        _custVendTransCredit.LastSettleAccountNum   = _custVendTransDebet.AccountNum;

        transTxt  = TransactionTxt::construct();
        if (_reverseDebet)
        {
            [debetReversed,
             reversedAmountDebetAccounting,
             standardReversedAmountDebetAccounting,
             reversedAmountDebetReporting,
             standardReversedAmountDebetReporting] = this.reverseUnrealizedExchAdj(
                _custVendTransDebet,
                _custVendTransOpenDebet,
                _settleAmountCurDebet,
                _transDate,
                _custVendTransCredit,
                _recalcFuture,
                _utilizedCashDisc);
        }

        [creditReversed,
         reversedAmountCreditAccounting,
         standardReversedAmountCreditAccounting,
         reversedAmountCreditReporting,
         standardReversedAmountCreditReporting] = this.reverseUnrealizedExchAdj(
            _custVendTransCredit,
            _custVendTransOpenCredit,
            (! _settleAmountCurCredit && _paym2Invoice) ?
            _settleAmountCurDebet / _paym2Invoice       :
            _settleAmountCurCredit,
            _transDate,
            _custVendTransDebet,
            _recalcFuture,
            _utilizedCashDiscCredit);

        // post new realized exchange difference
        if (debetReversed || creditReversed)
        {
            finalExchRateDiffAccounting = _exchRateDiffAccounting - standardReversedAmountDebetAccounting + reversedAmountDebetAccounting - standardReversedAmountCreditAccounting + reversedAmountCreditAccounting;
            finalExchRateDiffReporting  = _exchRateDiffReporting  - standardReversedAmountDebetReporting  + reversedAmountDebetReporting  - standardReversedAmountCreditReporting  + reversedAmountCreditReporting;
        }
        else
        {
            finalExchRateDiffAccounting = _exchRateDiffAccounting - standardReversedAmountDebetAccounting - standardReversedAmountCreditAccounting;
            finalExchRateDiffReporting  = _exchRateDiffReporting  - standardReversedAmountDebetReporting  - standardReversedAmountCreditReporting;
        }

        if (finalExchRateDiffAccounting || _exchRateDiffAccounting || finalExchRateDiffReporting || _exchRateDiffReporting)
        {
            this.postExchAdj(
                -finalExchRateDiffAccounting,
                -_exchRateDiffAccounting,
                -finalExchRateDiffReporting,
                -_exchRateDiffReporting,
                _firstCustVendTrans,
                false,
                false,
                false,
                '',
                dateNull(),
                0,
                0,
                NoneTableTrans::Transaction,
                _firstCustVendTrans.DefaultDimension,
                '',
                true,
                SysCountryRegionCode::isLegalEntityInCountryRegion([ #isoRU ]) ? _firstCustVendTrans.PostingProfile : _custVendTransCredit.PostingProfile,
                true,
                _custVendTransDebet,
                _custVendTransCredit,
                '',
                TransactionSelect::Transaction,
                false);
        }

        if (!finalExchRateDiffAccounting && _exchRateDiffAccounting)
        {
            _firstCustVendTrans.ExchAdjustmentRealized -= _exchRateDiffAccounting;
            _firstCustVendTrans.ExchAdjustment         -= _exchRateDiffAccounting;

            if (_firstCustVendTrans.RecId == _custVendTransCredit.RecId)
            {
                _firstCustVendTrans.SettleAmountMST -= _exchRateDiffAccounting;
            }
        }

        if (!finalExchRateDiffReporting && _exchRateDiffReporting)
        {
            _firstCustVendTrans.ReportingExchAdjustmentRealized -= _exchRateDiffReporting;
            _firstCustVendTrans.ExchAdjustmentReporting         -= _exchRateDiffReporting;

            if (_firstCustVendTrans.RecId == _custVendTransCredit.RecId)
            {
                _firstCustVendTrans.SettleAmountReporting -= _exchRateDiffReporting;
            }
        }

        if (isFromSettlement)
        {
            if (_reverseDebet)
            {
                custVendSettlementCredit = custVendSettle.updateTransaction_W(_custVendTransCredit, _custVendTransOpenCredit, _utilizedCashDiscCredit, 0, NoYes::No, true, false, _taxVoucherCredit);
                custVendSettlementDebet  = custVendSettle.updateTransaction_W(_custVendTransDebet, _custVendTransOpenDebet, _utilizedCashDisc, 0, NoYes::No, true, false, _taxVoucherDebet);

                custVendSettlementCredit.CanBeReversed = NoYes::Yes;
                custVendSettlementDebet.CanBeReversed = NoYes::Yes;

                if (!custVendSettle.isSettlementActive_W())
                {
                    custVendTransSettlement.addSettlement(custVendSettlementCredit, settlementGroupPlaceHolder, _custVendTransCredit.TransType);
                    custVendTransSettlement.addSettlement(custVendSettlementDebet, settlementGroupPlaceHolder, _custVendTransDebet.TransType);
                }

                // re-find open transactions, because we could delete them during settlement routine
                changecompany(_custVendTransOpenDebet.company())
                {
                    custVendTransOpenDebetLocal = CustVendTransOpen::find_RU(_custVendTransOpenDebet.TableId, _custVendTransOpenDebet.RecId, true);
                    CustVendExchAdjustment_W::reverseTransOpenAmounts(custVendTransOpenDebetLocal);
                }

                changecompany(_custVendTransOpenCredit.company())
                {
                    custVendTransOpenCreditLocal = CustVendTransOpen::find_RU(_custVendTransOpenCredit.TableId, _custVendTransOpenCredit.RecId, true);
                    CustVendExchAdjustment_W::reverseTransOpenAmounts(custVendTransOpenCreditLocal);
                }

                this.recalcFutureUnrealizedExchAdj(_custVendTransDebet,  custVendTransOpenDebetLocal);
                this.recalcFutureUnrealizedExchAdj(_custVendTransCredit, custVendTransOpenCreditLocal);

                // put updated data into initial cursor for correct settlement with next transaction
                _custVendTransOpenDebet.data(custVendTransOpenDebetLocal);
                _custVendTransOpenCredit.data(custVendTransOpenCreditLocal);
            }
        }
        else
        {
            if (_firstCustVendTrans.RecId == _custVendTransDebet.RecId)
            {
                _custVendTransDebet.OffsetRecId = _custVendTransCredit.RecId;
            }
            else
            {
                _custVendTransCredit.OffsetRecId = _custVendTransDebet.RecId;
            }

            if (_isReversedDebet)
            {
                custVendSettlement = custVendSettle.updateTransaction_W(_custVendTransDebet, _custVendTransOpenDebet, _utilizedCashDisc, _pennyDiffDebet, NoYes::Yes, true, false, _taxVoucherDebet);
                if (!custVendSettle.isSettlementActive_W())
                {
                    custVendTransSettlement.addSettlement(custVendSettlement, settlementGroupPlaceHolder, _custVendTransDebet.TransType);
                }
            }
            if (_isReversedCredit)
            {
                custVendSettlement = custVendSettle.updateTransaction_W(_custVendTransCredit, _custVendTransOpenCredit, _utilizedCashDiscCredit, _pennyDiffCredit, NoYes::Yes, true, false, _taxVoucherCredit, true, _custVendTransDebet.RecId);
                if (!custVendSettle.isSettlementActive_W())
                {
                    custVendTransSettlement.addSettlement(custVendSettlement, settlementGroupPlaceHolder, _custVendTransCredit.TransType);
                }
            }
        }

        return [finalExchRateDiffAccounting,
                standardReversedAmountDebetAccounting,
                reversedAmountDebetAccounting,
                standardReversedAmountCreditAccounting,
                reversedAmountCreditAccounting,
                finalExchRateDiffReporting,
                standardReversedAmountDebetReporting,
                reversedAmountDebetReporting,
                standardReversedAmountCreditReporting,
                reversedAmountCreditReporting,
                custVendSettlementDebet,
                custVendSettlementCredit];
    }

]]></Source>
			</Method>
			<Method>
				<Name>processUnrealizedExchAdj</Name>
				<Source><![CDATA[
    public boolean processUnrealizedExchAdj(CustVendTrans          _custVendTrans,
                                            CustVendTransOpen      _custVendTransOpen,
                                            TransDate              _postingDate,
                                            TransDate              _exchRateDate,
                                            NoneTableTrans         _dimSpec,
                                            DimensionDefault       _defaultDimension,
                                            PostingProfile         _postingProfile,
                                            TransactionSelect      _postingSpec,
                                            TransDate              _lastExchAdj                  = dateNull(),
                                            Voucher                _voucher                      = '',
                                            CustVendSettlement     _custVendSettlementRealized   = null,
                                            CustVendSettlement     _custVendSettlementUnrealized = null)
    {
        AmountMST               newAmountAccounting;
        AmountMST               regAmountAccounting;
        AmountMST               reverseAmountAccounting;

        AmountMST               newAmountReporting;
        AmountMST               regAmountReporting;
        AmountMST               reverseAmountReporting;

        TransDate               lastDate;
        ExchangeRateHelper      exchangeRateHelper;
        CustVendTransData       custVendTransData = CustVendTransData::construct(_custVendTrans);
        CustVendTrans           lastExchAdjTrans;
        NoneTableTrans          dimSpec;
        DimensionDefault        defaultDimension;
        PostingProfile          postingProfile;
        CustVendExchPrinciples  exchPrinciple;
        TransDate               exchRateDate, origTransactionDate = transactionDate;
        CustVendSettlement      custVendSettlement;
        TransactionSelect       postingSpec;

        changecompany(_custVendTrans.company())
        {
            if (! periodStart || isFromSettlement)
            {
                periodStart = LedgerFiscalCalendar::findPeriodStartDateByDate(calendarRecId, _lastExchAdj ? _lastExchAdj : _postingDate);
            }

            [regAmountAccounting,
             reverseAmountAccounting,
             newAmountAccounting,
             regAmountReporting,
             reverseAmountReporting,
             newAmountReporting,
             lastExchAdjTrans] = this.getAmounts(_custVendTrans,
                                                  (_custVendSettlementRealized && datePrinciple != SettleDatePrinc::SelectDate) ? _custVendSettlementRealized.TransDate : _postingDate,
                                                  ! isFromSettlement ? custVendExchAdjTrans.getExchangeRateDateToUse(_custVendTrans) : _exchRateDate,
                                                  periodStart,
                                                  _custVendTrans.bankCurrencyTransferId_RU() ? ExchRateDiffCalcType_W::Incremental : exchRateDiffCalcType,
                                                  _custVendSettlementRealized,
                                                  _custVendSettlementUnrealized);

            if (isFromSettlement                                                                                                    ||
                (! isFromSettlement                                                                                                 &&
                   (custVendExchAdjTrans.shouldAdjustAmount(regAmountAccounting, _custVendTrans.ExchAdjustmentUnrealized)           ||
                    custVendExchAdjTrans.shouldAdjustAmount(regAmountReporting, _custVendTrans.ReportingExchAdjustmentUnrealized))  &&
                   custVendExchAdjTrans.checkTrans()))
            {
                if (isFromSettlement)
                {
                    _custVendTrans.LastExchAdj    = _postingDate;
                    _custVendTrans.LastSettleDate = _postingDate;
                    lastDate                      = _lastExchAdj;
                }
                else
                {
                    this.initLedgerVoucher(_custVendTrans, false);

                    exchangeRateHelper = ExchangeRateHelper::newExchangeDate(
                        Ledger::current(),
                        _custVendTrans.CurrencyCode,
                        custVendExchAdjTrans.getExchangeRateDateToUse(_custVendTrans));

                    exchangeRateHelper.parmErrorType(AifErrorType::None);
                    _custVendTrans.LastExchAdjRate = exchangeRateHelper.getCrossRate();

                    if (reportingCurrencyEnabled)
                    {                        
                        exchangeRateHelper.parmToCurrency(Ledger::reportingCurrency()); 
                        exchangeRateHelper.parmExchangeRateTypeRecId(Ledger::reportingCurrencyExchangeRateType());
                        _custVendTrans.LastExchAdjRateReporting = exchangeRateHelper.getCrossRate();
                    }

                    lastDate                          = _postingDate;
                    _custVendTrans.LastSettleVoucher  = ledgerVoucher.lastVoucher();
                    _custVendTrans.LastSettleCompany  = ledgerVoucher.parmCompanyId();
                    _custVendTrans.LastExchAdjVoucher = _custVendTrans.LastSettleVoucher;
                    _custVendTrans.LastExchAdj        = lastDate;
                    _custVendTrans.LastSettleDate     = _custVendTrans.LastExchAdj;
                }

                transactionDate = _custVendTrans.LastExchAdj;
                custVendSettle.parmTransactionDate_W(transactionDate);

                // set LastExchAdjRate field for transactions made at the same date
                this.updatePrevExchRateTrans(lastExchAdjTrans, _postingDate);

                //reverse latest unrealised exchange adjustment
                if (reverseAmountAccounting || reverseAmountReporting)
                {
                    [dimSpec, defaultDimension, postingProfile, exchPrinciple, exchRateDate, postingSpec] = this.getUnrealizedParameters(custVendTransData, lastExchAdjTrans);

                    _custVendTransOpen.AmountMST                += reverseAmountAccounting;
                    _custVendTransOpen.ReportingCurrencyAmount  += reverseAmountReporting;

                    this.postExchAdj(
                        -reverseAmountAccounting,
                        0,
                        -reverseAmountReporting,
                        0,
                        _custVendTrans,
                        true,
                        true,
                        true,
                        '',
                        lastDate,
                        0,
                        0,
                        dimSpec,
                        defaultDimension,
                        postingProfile,
                        isFromSettlement,
                        '',
                        false,
                        _custVendTrans,
                        _custVendTrans,
                        _voucher,
                        postingSpec);

                    if (isFromSettlement) // to put correct voucher to CustVendSettlement
                    {
                        _custVendTrans.LastSettleVoucher = ledgerVoucher.lastVoucher();
                        _custVendTrans.LastSettleCompany = ledgerVoucher.parmCompanyId();
                    }

                    custVendSettle.updateTransOpen(_custVendTrans, _custVendTransOpen);
                    custVendSettlement = custVendSettle.updateTransactionReverseExchAdj_W(_custVendTrans, _custVendTransOpen);

                    custVendTransSettlement.addSettlement(custVendSettlement, settlementGroupPlaceHolder, _custVendTrans.TransType);

                    regAmountAccounting -= reverseAmountAccounting;
                    regAmountReporting  -= reverseAmountReporting;
                }

                if (regAmountAccounting || regAmountReporting)
                {
                    //post new exchange adjustment
                    _custVendTransOpen.AmountMST                += regAmountAccounting;
                    _custVendTransOpen.ReportingCurrencyAmount  += regAmountReporting;

                    this.postExchAdj(
                        regAmountAccounting,
                        0,
                        regAmountReporting,
                        0,
                        _custVendTrans,
                        true,
                        false,
                        false,
                        '',
                        lastDate,
                        0,
                        0,
                        _dimSpec,
                        _defaultDimension,
                        _postingProfile,
                        isFromSettlement,
                        '',
                        false,
                        _custVendTrans,
                        _custVendTrans,
                        _voucher,
                        _postingSpec
                        );

                    if (isFromSettlement) // to put correct voucher and company to CustVendSettlement
                    {
                        _custVendTrans.LastSettleVoucher = ledgerVoucher.lastVoucher();
                        _custVendTrans.LastSettleCompany = ledgerVoucher.parmCompanyId();
                    }

                    custVendSettle.updateTransOpen(_custVendTrans, _custVendTransOpen);
                    custVendSettlement = custVendSettle.updateTransaction_W(_custVendTrans, _custVendTransOpen);

                    custVendTransSettlement.addSettlement(custVendSettlement, settlementGroupPlaceHolder, _custVendTrans.TransType);
                }

                if (!isFromSettlement)
                {
                    ledgerVoucher.end();
                }

                transactionDate = origTransactionDate;
                custVendSettle.parmTransactionDate_W(transactionDate);

                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recalcFutureRealizedExchAdj</Name>
				<Source><![CDATA[
    public void recalcFutureRealizedExchAdj(CustVendTrans     _custVendTrans,
                                            CustVendTransOpen _custVendTransOpen,
                                            TransDate         _postingDate)
    {
        CustVendTrans           exchRateTrans       = _custVendTrans.data();
        CustVendTrans           firstCustVendTrans  = _custVendTrans.data();
        TransDate               origLastExchAdj     = _custVendTrans.LastExchAdj;
        TransDate               origLastSettleDate  = _custVendTrans.LastSettleDate;
        TransDate               origOffsetLastExchAdj;
        TransDate               origOffsetLastSettleDate;
        CustVendTransData       custVendTransData   = CustVendTransData::construct(_custVendTrans);
        CustVendTransStatic     custVendTransStatic = CustVendTransStatic::newTrans(_custVendTrans);
        CustVendSettlement      custVendSettlement, custVendSettlementOffset;
        CustVendTrans           custVendTransDebet, custVendTransCredit, custVendTransOffset;
        CustVendTransOpen       custVendTransOpenDebet, custVendTransOpenCredit, custVendTransOpenOffset;
        TransDate               periodEnd;
        AmountMST               exchRateDiffAccounting;
        AmountMST               exchRateDiffOffsetAccounting;
        AmountMST               unrealExchAdjAccounting;
        AmountMST               unrealSettleExchAdjAccounting;
        AmountMST               prevUnrealizedFromPostingLogAccounting;

        AmountMSTSecondary      exchRateDiffReporting;
        AmountMST               exchRateDiffOffsetReporting;
        AmountMST               unrealExchAdjReporting;
        AmountMST               unrealSettleExchAdjReporting;
        AmountMST               prevUnrealizedFromPostingLogReporting;

        boolean                 isReversed, isReversedOffset;

        CustVendSettlement custVendSettlement(boolean _debet)
        {
            if (_debet)
            {
                return _custVendTrans.RecId == custVendTransDebet.RecId ? custVendSettlement : custVendSettlementOffset;
            }

            return _custVendTrans.RecId == custVendTransCredit.RecId ? custVendSettlement : custVendSettlementOffset;
        }

        boolean checkRecalc()
        {
            if (custVendSettlement.ExchAdjustment || (reportingCurrencyEnabled && custVendSettlement.ExchAdjustmentReporting) ||
                ((custVendSettlementOffset.ExchAdjustment || (reportingCurrencyEnabled && custVendSettlementOffset.ExchAdjustmentReporting)) &&
                  custVendTransOffset.TransDate > _postingDate))
            {
                return true;
            }

            if ((!custVendSettlement.ExchAdjustment && !custVendSettlementOffset.ExchAdjustment) &&
                (! reportingCurrencyEnabled ||  (!custVendSettlement.ExchAdjustmentReporting && !custVendSettlementOffset.ExchAdjustmentReporting)))
            {
                if (custVendTransOffset.TransDate       >  _postingDate ||
                    (_custVendTrans.TransDate           <= _postingDate &&
                     custVendTransOffset.TransDate      <= _postingDate &&
                     custVendSettlement.SettleAmountCur >  0))
                {
                    return true;
                }
            }

            return false;
        }

        changecompany(_custVendTrans.company())
        {
            ledgerVoucherGroup = LedgerVoucherGroup::construct();

            this.initLedgerVoucher(_custVendTrans, true);

            custVendSettle.parmLedgerVoucher_W(_custVendTrans.company(), ledgerVoucher, ledgerVoucherGroup);

            custVendSettlement       = custVendTransStatic.custVendSettlement();
            custVendSettlementOffset = custVendTransStatic.custVendSettlement();
            periodEnd                = LedgerFiscalCalendar::findPeriodEndDateByDate(calendarRecId, _postingDate);

            while select forupdate custVendSettlement
                where custVendSettlement.SettleAmountCur                            &&
                      custVendSettlement.TransRecId     == _custVendTrans.RecId     &&
                      custVendSettlement.TransCompany   == _custVendTrans.company() &&
                      custVendSettlement.TransDate      > _postingDate              &&
                      custVendSettlement.CanBeReversed
            {
                while select forupdate crosscompany custVendSettlementOffset
                    where custVendSettlementOffset.TransRecId       == custVendSettlement.OffsetRecId   &&
                          custVendSettlementOffset.TransCompany     == custVendSettlement.OffsetCompany &&
                          custVendSettlementOffset.OffsetRecId      == custVendSettlement.TransRecId    &&
                          custVendSettlementOffset.OffsetCompany    == custVendSettlement.TransCompany  &&
                          custVendSettlementOffset.TransDate        == custVendSettlement.TransDate     &&
                          custVendSettlementOffset.CanBeReversed
                {
                    custVendTransOffset = custVendTransStatic.custVendTrans();
                    select firstonly forupdate crosscompany custVendTransOffset
                        where custVendTransOffset.RecId      == custVendSettlementOffset.TransRecId
                           && custVendTransOffset.DataAreaId == custVendSettlementOffset.TransCompany;

                    if (checkRecalc())
                    {
                        transactionDate = custVendSettlement.TransDate;

                        [prevUnrealizedFromPostingLogAccounting, prevUnrealizedFromPostingLogReporting] = this.calcUnrealizedExchAdjInPostingLog(custVendSettlement);

                        [exchRateDiffAccounting,
                         exchRateDiffReporting,
                         isReversed,
                         unrealExchAdjAccounting,
                         unrealSettleExchAdjAccounting,
                         unrealExchAdjReporting,
                         unrealSettleExchAdjReporting] = this.reverseFromFutureRecalc(_custVendTrans, custVendTransOffset, _custVendTransOpen, custVendSettlement, periodEnd);

                        changecompany(custVendTransOffset.company())
                        {
                            custVendTransOpenOffset = custVendTransStatic.custVendTransOpen();
                            custVendTransOpenOffset = CustVendTransOpen::findRefId(custVendTransOffset.TableId, custVendTransOffset.RecId, true);
                        }

                        CustVendExchAdjustment_W::reverseTransAmounts(custVendTransOffset);
                        CustVendExchAdjustment_W::reverseTransOpenAmounts(custVendTransOpenOffset);

                        [exchRateDiffOffsetAccounting, exchRateDiffOffsetReporting, isReversedOffset] = this.reverseFromFutureRecalc(
                            custVendTransOffset,
                            _custVendTrans,
                            custVendTransOpenOffset,
                            custVendSettlementOffset,
                            periodEnd,
                            (custVendSettlementOffset.ExchAdjustment || custVendSettlementOffset.ExchAdjustmentReporting) && custVendTransOffset.TransDate > _postingDate,
                            unrealExchAdjAccounting,
                            unrealSettleExchAdjAccounting,
                            unrealExchAdjReporting,
                            unrealSettleExchAdjReporting);

                        if (! custVendSettlement.ExchAdjustment && ! custVendSettlement.ExchAdjustmentReporting)
                        {
                            exchRateDiffAccounting  = exchRateDiffOffsetAccounting;
                            exchRateDiffReporting   = exchRateDiffOffsetReporting;
                        }

                        origOffsetLastExchAdj              = custVendTransOffset.LastExchAdj;
                        origOffsetLastSettleDate           = custVendTransOffset.LastSettleDate;

                        _custVendTrans.LastExchAdj         = custVendSettlement.TransDate;
                        _custVendTrans.LastSettleDate      = custVendSettlement.TransDate;

                        custVendTransOffset.LastExchAdj    = custVendSettlement.TransDate;
                        custVendTransOffset.LastSettleDate = custVendSettlement.TransDate;

                        firstCustVendTrans = (custVendSettlement.ExchAdjustment || custVendSettlement.ExchAdjustmentReporting) ? _custVendTrans : custVendTransOffset;

                        custVendSettle.parmTransactionDate_W(custVendSettlement.TransDate);

                        CustVendExchAdjustment_W::reverseSettlementAmounts(custVendSettlement);
                        CustVendExchAdjustment_W::reverseSettlementAmounts(custVendSettlementOffset);

                        custVendTransDebet  = _custVendTrans.AmountCur >= 0 ? _custVendTrans : custVendTransOffset;
                        custVendTransCredit = _custVendTrans.AmountCur <  0 ? _custVendTrans : custVendTransOffset;

                        custVendSettle.parmCustVendTransDebit_W(custVendTransDebet);
                        custVendSettle.parmCustVendTransCredit_W(custVendTransCredit);

                        changecompany(custVendTransDebet.company())
                        {
                            custVendTransOpenDebet  = CustVendTransOpen::findRefId(custVendTransDebet.TableId, custVendTransDebet.RecId, true);
                        }

                        changecompany(custVendTransCredit.company())
                        {
                            custVendTransOpenCredit = CustVendTransOpen::findRefId(custVendTransCredit.TableId, custVendTransCredit.RecId, true);
                        }

                        CustVendExchAdjustment_W::reverseTransOpenAmounts(custVendTransOpenDebet);
                        CustVendExchAdjustment_W::reverseTransOpenAmounts(custVendTransOpenCredit);

                        // recalc future realized exchange adjustment
                        this.processRealizedExchAdj(
                            -exchRateDiffAccounting,
                            -exchRateDiffReporting,
                            firstCustVendTrans,
                            custVendTransDebet,
                            custVendTransCredit,
                            custVendTransOpenDebet,
                            custVendTransOpenCredit,
                            custVendSettlement(true).SettleAmountCur,
                            custVendSettlement(false).SettleAmountCur,
                            0,  // cash discount is zero since the cash discount in included in the SettleAmountCur amount
                            0, // cash discount is zero since the cash discount in included in the SettleAmountCur amount
                            //custVendSettlement(true).UtilizedCashDisc,
                            //custVendSettlement(false).UtilizedCashDisc,
                            custVendSettlement(true).TaxVoucher_RU,
                            custVendSettlement(false).TaxVoucher_RU,
                            0,
                            custVendSettlement(true).PennyDiff,
                            custVendSettlement(false).PennyDiff,
                            transactionDate,
                            true,
                            true,
                            _custVendTrans.RecId == custVendTransDebet.RecId  ? isReversed : isReversedOffset,
                            _custVendTrans.RecId == custVendTransCredit.RecId ? isReversed : isReversedOffset);

                        // it is needed to reselect open transaction because it has been changed in previous method
                        _custVendTransOpen = CustVendTransOpen::find_RU(_custVendTransOpen.TableId, _custVendTransOpen.RecId, true);
                        CustVendExchAdjustment_W::reverseTransOpenAmounts(_custVendTransOpen);

                        changecompany(custVendTransOffset.company())
                        {
                            custVendTransOffset.LastExchAdj    = origOffsetLastExchAdj;
                            custVendTransOffset.LastSettleDate = origOffsetLastSettleDate;

                            CustVendExchAdjustment_W::reverseTransAmounts(custVendTransOffset);
                            custVendTransOffset.update();
                            CustVendExchAdjustment_W::reverseTransAmounts(custVendTransOffset);
                        }

                        if (custVendSettlement.company() == custVendSettlementOffset.company())
                        {
                            this.restoreBalanceProfile(
                                custVendSettlement,
                                custVendSettlementOffset,
                                prevUnrealizedFromPostingLogAccounting,
                                prevUnrealizedFromPostingLogReporting);
                        }
                    }
                }
            }

            _custVendTrans.LastExchAdj    = origLastExchAdj;
            _custVendTrans.LastSettleDate = origLastSettleDate;

            CustVendExchAdjustment_W::reverseTransAmounts(_custVendTrans);
            _custVendTrans.update();
            CustVendExchAdjustment_W::reverseTransAmounts(_custVendTrans);

            ledgerVoucherGroup.end();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>recalcFutureUnrealizedExchAdj</Name>
				<Source><![CDATA[
    protected void recalcFutureUnrealizedExchAdj(
        CustVendTrans      _custVendTrans,
        CustVendTransOpen  _custVendTransOpen,
        CustVendSettlement _custVendSettlementRealized   = null,
        CustVendSettlement _custVendSettlementUnrealized = null,
        ExchRate           _exchRateAccounting           = 0,
        ExchRate           _exchRateReporting            = 0)
    {
        CustVendTrans           exchRateTrans         = _custVendTrans.data(), rateTrans = _custVendTrans.data();
        TransDate               origLastExchAdj       = _custVendTrans.LastExchAdj;
        TransDate               origLastSettleDate    = _custVendTrans.LastSettleDate;
        TransDate               origTransactionDate   = transactionDate;
        Map                     datesMap              = new Map(Types::Container, Types::Container);
        Map                     recIdMap              = new Map(Types::Date, Types::Container);
        CustVendTransData       custVendTransData     = CustVendTransData::construct(_custVendTrans);
        Voucher                 origLastSettleVoucher = _custVendTrans.LastSettleVoucher;
        CompanyId               origLastSettleCompany = _custVendTrans.LastSettleCompany;
        MapEnumerator           datesMapEnumerator;
        NoneTableTrans          dimSpec;
        DimensionDefault        defaultDimension;
        PostingProfile          postingProfile;
        CustVendExchPrinciples  exchPrinciple;
        TransDate               exchRateDate, transDate, lastDate;
        Voucher                 voucher;
        TransDate               periodStartLocal;
        container               recIdCon;
        int                     i;
        RecId                   recId;
        TransDate               futureDate = min(_custVendSettlementRealized           ?
                                                 _custVendSettlementRealized.TransDate :
                                                 transactionDate,
                                                 transactionDate);
        boolean                 calc;
        Set                     recIdSetOneDate = new Set(typeName2Type(extendedTypeStr(RecId)));
        SetEnumerator           recIdSetOneDateEnumerator;
        CustVendSettlement      custVendSettlement;
        container               recidContainer;
        TransactionSelect       postingSpec;
        CustVendTrans_W         custVendTrans_W;

        void selectRateTrans()
        {
            select firstonly rateTrans
                order by TransDate, LastExchAdjVoucher, Correct
                where rateTrans.OffsetRecId     == _custVendTrans.RecId
                 &&  (rateTrans.TransType       == LedgerTransType::ExchAdjustment
                 ||   rateTrans.TransType       == LedgerTransType::AdvanceAdjustment_RU)
                 &&   rateTrans.TransDate       == futureDate
                 &&   rateTrans.LastExchAdj     == rateTrans.TransDate
                 &&   rateTrans.LastExchAdjRate == _exchRateAccounting
                 &&  (reportingCurrencyEnabled
                 ||   rateTrans.LastExchAdjRateReporting == _exchRateReporting)
                 &&  (rateTrans.ExchAdjustmentUnrealized
                 ||  (reportingCurrencyEnabled
                 &&   rateTrans.ReportingExchAdjustmentUnrealized));
        }

        changecompany(_custVendTrans.company())
        {
            // strono all previously calculated unrealized exchange adjustments
            while select forupdate exchRateTrans
                order by TransDate, LastExchAdjVoucher, Correct
                where exchRateTrans.OffsetRecId == _custVendTrans.RecId
                 &&  (exchRateTrans.TransType   == LedgerTransType::ExchAdjustment
                 ||   exchRateTrans.TransType   == LedgerTransType::AdvanceAdjustment_RU)
                 &&   exchRateTrans.TransDate   >= futureDate
                 &&   exchRateTrans.LastExchAdj == exchRateTrans.TransDate
                 &&  (exchRateTrans.ExchAdjustmentUnrealized
                 ||  (reportingCurrencyEnabled
                 &&   exchRateTrans.ReportingExchAdjustmentUnrealized))
            {
                calc = false;
                if (exchRateTrans.TransDate > futureDate)
                {
                    calc = true;
                }
                else
                {
                    if (_custVendSettlementRealized)
                    {
                        if (exchRateTrans.LastExchAdjRate > _exchRateAccounting || (reportingCurrencyEnabled && exchRateTrans.LastExchAdjRateReporting > _exchRateReporting))
                        {
                            calc = true;
                        }
                        else
                        {
                            if ((exchRateTrans.LastExchAdjRate == _exchRateAccounting && exchRateTrans.LastExchAdjRate) ||
                                (reportingCurrencyEnabled && exchRateTrans.LastExchAdjRateReporting == _exchRateReporting && exchRateTrans.LastExchAdjRateReporting))
                            {
                                recIdSetOneDate.add(exchRateTrans.RecId);
                            }
                            else if (!exchRateTrans.LastExchAdjRate || (reportingCurrencyEnabled && !exchRateTrans.LastExchAdjRateReporting))
                            {
                                // we should select transactions both already existing in the database and pending until the end of settlement/reversal
                                // contained in CustVendTransSettlement class
                                selectRateTrans();

                                if (!rateTrans)
                                {
                                    rateTrans = custVendTransSettlement.getCustVendTransTmp_W(_custVendTrans);
                                    selectRateTrans();
                                }

                                if (rateTrans)
                                {
                                    calc = true;
                                }
                            }
                        }
                    }
                }

                if (calc)
                {
                    transDate = max(exchRateTrans.TransDate, transactionDate);

                    if ((! exchRateTrans.LastExchAdjVoucher) ||
                         ! datesMap.exists([transDate, exchRateTrans.Voucher]))
                    {
                        CustVendExchAdjustment_W::reverseTransAmounts(exchRateTrans);

                        [dimSpec, defaultDimension, postingProfile, exchPrinciple, exchRateDate, postingSpec] = this.getUnrealizedParameters(custVendTransData,
                                                                                                                                this.findPrevUnrealExchAdj(custVendTransData, exchRateTrans));

                        if (! datesMap.exists([transDate, exchRateTrans.Voucher]))
                        {
                            if (! exchRateTrans.Correct)
                            {
                                datesMap.insert([transDate, exchRateTrans.Voucher],
                                                [dimSpec, defaultDimension, postingProfile, exchPrinciple, exchRateDate, postingSpec, exchRateTrans.TransDate]);
                            }
                            else
                            {
                                datesMap.insert([transDate, exchRateTrans.Voucher],
                                                this.getUnrealizedParameters(custVendTransData, exchRateTrans) + exchRateTrans.TransDate);
                            }
                        }
                    }
                    if (! exchRateTrans.LastExchAdjVoucher)
                    {
                        _custVendTrans.LastExchAdj   =  transDate;
                        _custVendTransOpen.AmountMST += exchRateTrans.ExchAdjustmentUnrealized;

                        transactionDate = transDate;
                        custVendSettle.parmTransactionDate_W(transactionDate);

                        custVendTrans_W = exchRateTrans.CustVendTrans::getCustVendTrans_W();
                        this.postExchAdj(
                            exchRateTrans.Correct ? exchRateTrans.ExchAdjustmentUnrealized : - exchRateTrans.ExchAdjustmentUnrealized,
                            0,
                            custVendTrans_W.CorrectReporting_RU ? exchRateTrans.ReportingExchAdjustmentUnrealized : - exchRateTrans.ReportingExchAdjustmentUnrealized,
                            0,
                            _custVendTrans,
                            true,
                            !exchRateTrans.Correct,
                            !custVendTrans_W.CorrectReporting_RU,
                            exchRateTrans.Voucher,
                            exchRateTrans.LastExchAdj,
                            exchRateTrans.LastExchAdjRate,
                            exchRateTrans.LastExchAdjRateReporting,
                            dimSpec,
                            defaultDimension,
                            postingProfile,
                            true,
                            '',
                            false,
                            _custVendTrans,
                            _custVendTrans,
                            exchRateTrans.Voucher,
                            postingSpec);

                        _custVendTrans.LastSettleVoucher = this.parmLedgerVoucher().lastVoucher();
                        _custVendTrans.LastSettleCompany = this.parmLedgerVoucher().parmCompanyId();

                        custVendSettle.updateTransOpen(_custVendTrans, _custVendTransOpen);
                        custVendSettlement = custVendSettle.updateTransactionReverseExchAdj_W(_custVendTrans, _custVendTransOpen);

                        custVendTransSettlement.addSettlement(custVendSettlement, settlementGroupPlaceHolder, _custVendTrans.TransType);

                        exchRateTrans.LastExchAdjVoucher = exchRateTrans.Voucher;
                        exchRateTrans.LastExchAdj        = transDate;

                        CustVendExchAdjustment_W::reverseTransAmounts(exchRateTrans);
                        exchRateTrans.update();

                        transactionDate = origTransactionDate;
                        // for reverse settlement routine
                        if (exchRateTrans.TransDate != transDate)
                        {
                            if (recIdMap.exists(exchRateTrans.TransDate))
                            {
                                recidContainer = recIdMap.lookup(exchRateTrans.TransDate) + exchRateTrans.RecId;
                            }
                            else
                            {
                                recidContainer = [exchRateTrans.RecId];
                            }
                            recIdMap.insert(exchRateTrans.TransDate, recidContainer);
                        }
                    }
                }
            }

            transactionDate = origTransactionDate;
            custVendSettle.parmTransactionDate_W(transactionDate);

            recIdSetOneDateEnumerator = recIdSetOneDate.getEnumerator();
            while (recIdSetOneDateEnumerator.moveNext())
            {
                select firstonly forupdate exchRateTrans
                    where exchRateTrans.RecId == recIdSetOneDateEnumerator.current();
                exchRateTrans.LastExchAdjRate = 0;
                exchRateTrans.doUpdate();
            }

            datesMapEnumerator = datesMap.getEnumerator();
            while (datesMapEnumerator.moveNext())
            {
                [transDate, voucher]    = datesMapEnumerator.currentKey();

                [dimSpec, defaultDimension, postingProfile, exchPrinciple, exchRateDate, postingSpec, lastDate] = datesMapEnumerator.currentValue();

                if (transDate != lastDate)
                {
                    periodStartLocal = LedgerFiscalCalendar::findPeriodStartDateByDate(calendarRecId, transDate);

                    if (lastDate >= periodStartLocal)
                    {
                        lastDate = transDate;
                    }
                }

                this.processUnrealizedExchAdj(_custVendTrans,
                                              _custVendTransOpen,
                                              transDate,
                                              exchRateDate,
                                              dimSpec,
                                              defaultDimension,
                                              postingProfile,
                                              postingSpec,
                                              lastDate,
                                              voucher,
                                              (transDate == transactionDate && transDate != _custVendSettlementRealized.TransDate) ? _custVendSettlementRealized   : null,
                                              (transDate == transactionDate && transDate != _custVendSettlementRealized.TransDate) ? _custVendSettlementUnrealized : null);

                // for reverse settlement routine
                if (recIdMap.exists(lastDate))
                {
                    recIdCon = recIdMap.lookup(lastDate);
                    for (i = 1; i <= conLen(recIdCon); i ++)
                    {
                        recId = conPeek(recIdCon, i);
                        select firstonly forupdate exchRateTrans
                            where exchRateTrans.RecId == recId;
                        exchRateTrans.LastExchAdjVoucher = '';
                        exchRateTrans.LastExchAdj        = exchRateTrans.TransDate;

                        // sign of unrealized exchange adjustment should be consistent with field ExchRateTrans.ExchAdjustment
                        exchRateTrans.ExchAdjustmentUnrealized          = abs(reverseAmountMST) * sign(exchRateTrans.ExchAdjustment);
                        exchRateTrans.ReportingExchAdjustmentUnrealized = abs(reverseAmountMSTSecondary)  * sign(exchRateTrans.ExchAdjustmentReporting);
                        exchRateTrans.doUpdate();
                    }
                    recIdMap.remove(lastDate);
                }
            }

            if (datesMap.elements())
            {
                _custVendTrans.LastExchAdj       = origLastExchAdj;
                _custVendTrans.LastSettleDate    = origLastSettleDate;
                _custVendTrans.LastSettleVoucher = origLastSettleVoucher;
                _custVendTrans.LastSettleCompany = origLastSettleCompany;
                CustVendExchAdjustment_W::reverseTransAmounts(_custVendTrans);
                _custVendTrans.doUpdate();
                CustVendExchAdjustment_W::reverseTransAmounts(_custVendTrans);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>restoreBalanceProfile</Name>
				<Source><![CDATA[
    protected void restoreBalanceProfile(
        CustVendSettlement  _custVendSettlement,
        CustVendSettlement  _custVendSettlementOffset,
        AmountMST           _prevUnrealizedFromPostingLogAccounting,
        AmountMSTSecondary  _prevUnrealizedFromPostingLogReporting)
    {
        CustVendTransPostingLog_RU      postingLogBalance, postingLogUnrealized;
        CustVendReversePostingLog_RU    custVendReversePostingLog;
        CustVendSettlePostingLog_RU     custVendSettlePostingLog;
        AmountMST                       balanceAmountAccounting;
        AmountMSTSecondary              balanceAmountReporting;
        AmountCur                       balanceAmountCur;
        LedgerDimensionDefaultAccount   defaultAccount, offsetDefaultAccount;
        LedgerPostingType               postingType;
        CustVendTrans                   custVendTransDebet, custVendTransCredit;
        int                             sign = 1;
        RefTableId                      refTableId = _custVendSettlement.TableId == tableNum(CustSettlement) ? tableNum(CustTrans) : tableNum(VendTrans);

        CustVendTransPostingLog_RU findPostingLog(CustVendTransPostingLogType_RU _postingLogType)
        {
            CustVendTransPostingLog_RU postingLog;

            select firstonly AmountCur, AmountMST, AmountMSTSecond, PostingLogType, TransRecId, RecId from postingLog
                where ((postingLog.TransRecId     == _custVendSettlement.TransRecId
                   &&   postingLog.OffSetRecId    == _custVendSettlement.OffsetRecId)
                   ||  (postingLog.TransRecId     == _custVendSettlementOffset.TransRecId
                   &&   postingLog.OffSetRecId    == _custVendSettlementOffset.OffsetRecId))
                   &&   postingLog.TransDate      == _custVendSettlement.TransDate
                   &&   postingLog.PostingLogType == _postingLogType
                   &&   postingLog.RefTableId     == refTableId;

            return postingLog;
        }

        ledgerVoucher     = this.parmLedgerVoucher();
        postingLogBalance = findPostingLog(CustVendTransPostingLogType_RU::PrepaymentStorno);

        if (!postingLogBalance)
        {
            postingLogBalance = findPostingLog(CustVendTransPostingLogType_RU::Balance);
            sign              = - 1;
        }

        select firstonly RecId from postingLogUnrealized
            where ((postingLogUnrealized.TransRecId     == _custVendSettlement.TransRecId
               &&   postingLogUnrealized.OffSetRecId    == _custVendSettlement.OffsetRecId)
               ||  (postingLogUnrealized.TransRecId     == _custVendSettlementOffset.TransRecId
               &&   postingLogUnrealized.OffSetRecId    == _custVendSettlementOffset.OffsetRecId))
               &&   postingLogUnrealized.TransDate      == _custVendSettlement.TransDate
               &&  !postingLogUnrealized.LedgerDimension
               &&  !postingLogUnrealized.OffsetLedgerDimension
               &&  !postingLogUnrealized.AmountMST
               &&  !postingLogUnrealized.AmountMSTSecond
               &&  !postingLogUnrealized.AmountCur
               &&  (postingLogUnrealized.SettlementExchAdj
               ||   postingLogUnrealized.ReportingSettlementExchAdj)
               &&   postingLogUnrealized.PostingLogType == CustVendTransPostingLogType_RU::UnrealisedExchAdj
               &&   postingLogUnrealized.RefTableId     == refTableId;

        if (postingLogBalance && postingLogUnrealized && (!_custVendSettlement.ExchAdjustment && ! (reportingCurrencyEnabled && _custVendSettlement.ExchAdjustmentReporting)))
        {
            balanceAmountCur        = postingLogBalance.AmountCur;
            balanceAmountAccounting = postingLogBalance.AmountMST;
            balanceAmountReporting  = postingLogBalance.AmountMSTSecond;

            custVendTransDebet  = postingLogBalance.TransRecId == _custVendSettlement.TransRecId ?
                                  _custVendSettlement.custVendTrans()                            :
                                  _custVendSettlementOffset.custVendTrans();

            custVendTransCredit = postingLogBalance.TransRecId == _custVendSettlement.TransRecId ?
                                  _custVendSettlementOffset.custVendTrans()                      :
                                  _custVendSettlement.custVendTrans();

            if (custVendTransDebet.TableId == tableNum(CustTrans))
            {
                defaultAccount       = CustLedgerAccounts::summaryLedgerDimension(custVendTransDebet.AccountNum, custVendTransDebet.PostingProfile);
                offsetDefaultAccount = CustLedgerAccounts::summaryLedgerDimension(custVendTransCredit.AccountNum, custVendTransCredit.PostingProfile);
                postingType          = LedgerPostingType::CustPayment;
            }
            else
            {
                defaultAccount       = VendLedgerAccounts::summaryLedgerDimension(custVendTransDebet.AccountNum, custVendTransDebet.PostingProfile);
                offsetDefaultAccount = VendLedgerAccounts::summaryLedgerDimension(custVendTransCredit.AccountNum, custVendTransCredit.PostingProfile);
                postingType          = LedgerPostingType::VendPayment;
            }

            custVendReversePostingLog = CustVendReversePostingLog_RU::newCustVendSettlement(postingLogBalance.TransRecId == _custVendSettlement.TransRecId ?
                                                                                            _custVendSettlement                                            :
                                                                                            _custVendSettlementOffset,
                                                                                            ledgerVoucher,
                                                                                            true);
            custVendReversePostingLog.voucherStateSave();
            custVendReversePostingLog.addAllowedPostingLogType(postingLogBalance.PostingLogType);
            settlementGroupPlaceHolder++;
            custVendReversePostingLog.parmCustVendTransSettlement(custVendTransSettlement);
            custVendReversePostingLog.parmSettlementGroupPlaceHolder(settlementGroupPlaceHolder);
            custVendReversePostingLog.doReverse(true, false);

            if (custVendReversePosting)
            {
                custVendReversePosting.parmReversePostingLogSet_RU(Set::union(custVendReversePosting.parmReversePostingLogSet_RU(),
                                                                              custVendReversePostingLog.getReversePostingLogSet()));
            }

            select sum(SettlementExchAdj), sum(ReportingSettlementExchAdj) from postingLogUnrealized
                where ((postingLogUnrealized.TransRecId     == _custVendSettlement.TransRecId
                   &&   postingLogUnrealized.OffSetRecId    == _custVendSettlement.OffsetRecId)
                   ||  (postingLogUnrealized.TransRecId     == _custVendSettlementOffset.TransRecId
                   &&   postingLogUnrealized.OffSetRecId    == _custVendSettlementOffset.OffsetRecId))
                   &&   postingLogUnrealized.TransDate      == _custVendSettlement.TransDate
                   &&  !postingLogUnrealized.LedgerDimension
                   &&  !postingLogUnrealized.OffsetLedgerDimension
                   &&  !postingLogUnrealized.AmountMST
                   &&  !postingLogUnrealized.AmountMSTSecond
                   &&  !postingLogUnrealized.AmountCur
                   &&  (postingLogUnrealized.SettlementExchAdj
                   ||   postingLogUnrealized.ReportingSettlementExchAdj)
                   &&   postingLogUnrealized.PostingLogType == CustVendTransPostingLogType_RU::UnrealisedExchAdj
                   &&   postingLogUnrealized.RefTableId     == refTableId;

            balanceAmountAccounting -= postingLogUnrealized.SettlementExchAdj  * sign;
            balanceAmountAccounting += _prevUnrealizedFromPostingLogAccounting * sign;

            balanceAmountReporting  -= postingLogUnrealized.ReportingSettlementExchAdj  * sign;
            balanceAmountReporting  += _prevUnrealizedFromPostingLogReporting           * sign;

            settlementGroupPlaceHolder++;

            CustVendSettle::postingProfileSettle_RU(ledgerVoucher,
                                                    custVendTransDebet,
                                                    balanceAmountCur,
                                                    custVendTransSettlement,
                                                    settlementGroupPlaceHolder,
                                                    custVendTransDebet.DefaultDimension,
                                                    custVendTransDebet.PostingProfile,
                                                    LedgerTransTxt::Settlement,
                                                    balanceAmountAccounting,
                                                    balanceAmountReporting);

            CustVendSettle::postingProfileSettle_RU(ledgerVoucher,
                                                    custVendTransCredit,
                                                    - balanceAmountCur,
                                                    custVendTransSettlement,
                                                    settlementGroupPlaceHolder,
                                                    custVendTransCredit.DefaultDimension,
                                                    custVendTransCredit.PostingProfile,
                                                    LedgerTransTxt::Settlement,
                                                    -balanceAmountAccounting,
                                                    -balanceAmountReporting,
                                                    custVendTransDebet.CurrencyCode);

            ledgerVoucher.bondLast2_RU();

            custVendSettlePostingLog = CustVendSettlePostingLog_RU::newCustVendSettle(postingLogBalance.PostingLogType,
                                                                                      custVendTransDebet,
                                                                                      custVendTransDebet,
                                                                                      custVendTransCredit);
            custVendSettlePostingLog.parmVoucher(ledgerVoucher.lastVoucher());
            custVendSettlePostingLog.parmTransDate(ledgerVoucher.lastTransDate());
            custVendSettlePostingLog.parmCorrect(ledgerVoucher.findLedgerVoucherObject().parmIsCorrectionDefault());
            custVendSettlePostingLog.parmReverseTrans(true);
            custVendSettlePostingLog.parmCustVendSettle(custVendReversePosting ? null : custVendSettle);
            custVendSettlePostingLog.createTrans(postingType,
                                                 LedgerDimensionFacade::serviceCreateLedgerDimension(defaultAccount, custVendTransDebet.DefaultDimension),
                                                 LedgerDimensionFacade::serviceCreateLedgerDimension(offsetDefaultAccount, custVendTransCredit.DefaultDimension),
                                                 custVendTransDebet.CurrencyCode,
                                                 balanceAmountCur,
                                                 balanceAmountAccounting,
                                                 balanceAmountReporting);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>restoreExchAdjustment</Name>
				<Source><![CDATA[
    public container restoreExchAdjustment(CustVendSettlement _custVendSettlement,
                                           CustVendTrans      _custVendTrans,
                                           CustVendTransOpen  _custVendTransOpen,
                                           boolean            _useVoucherDate = true)
    {
        CustVendTrans                  custVendTransLocal, exchRateTrans;
        CustVendSettlement             custVendSettlementLocal;
        TransDate                      amountExchDate;
        Voucher                        amountExchVoucher;
        CustVendReversePostingLog_RU   postingLog;
        AmountMST                      exchAdjustmentAmountAccounting;
        AmountMST                      settlementExchAdjAccounting;

        AmountMSTSecondary             exchAdjustmentAmountReporting;
        AmountMSTSecondary             settlementExchAdjReporting;

        container                      conDateAndVoucher;
        CustVendTransStatic            custVendTransStatic = CustVendTransStatic::construct(_custVendTrans);
        CustVendTrans_W                custVendTrans_W;

        ledgerVoucher           = this.parmLedgerVoucher();
        custVendTransLocal      = custVendTransStatic.custVendTrans();
        custVendSettlementLocal = custVendTransStatic.custVendSettlement();

        postingLog = CustVendReversePostingLog_RU::newCustVendSettlement(_custVendSettlement,
                                                                         ledgerVoucher,
                                                                         true);
        postingLog.voucherStateSave();

        conDateAndVoucher = custVendReversePosting.custVendSettleRef_RU(_custVendSettlement, CustVendTransPostingLogType_RU::UnrealisedExchAdj);

        [amountExchDate,
         amountExchVoucher,
         exchAdjustmentAmountAccounting,
         settlementExchAdjAccounting,
         exchAdjustmentAmountReporting,
         settlementExchAdjReporting] = conPeek(conDateAndVoucher, 1);

        postingLog.addAllowedPostingLogType(CustVendTransPostingLogType_RU::UnrealisedExchAdj);

        if (exchAdjustmentAmountAccounting || exchAdjustmentAmountReporting)
        {
            custVendTransLocal.OffsetRecId       = _custVendTrans.RecId;
            custVendTransLocal.AccountNum        = _custVendTrans.AccountNum;
            custVendTransLocal.Invoice           = _custVendTrans.Invoice;
            custVendTransLocal.Approved          = NoYes::Yes;
            custVendTransLocal.CurrencyCode      = _custVendTrans.CurrencyCode;
            custVendTransLocal.LastSettleDate    = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
            custVendTransLocal.DefaultDimension  = _custVendTrans.DefaultDimension;
            custVendTransLocal.TransType         = LedgerTransType::ExchAdjustment;
            custVendTransLocal.TransDate         = transactionDate;
            custVendTransLocal.AmountCur         = 0;
            custVendTransLocal.SettleAmountCur   = 0;
            custVendTransLocal.Settlement        = NoYes::No;
            custVendTransLocal.Closed            = CustVendTransData::construct(custVendTransLocal).maxSettlementDate(custVendTransLocal.TransDate);
            custVendTransLocal.LastSettleDate    = dateNull();
            custVendTransLocal.LastSettleVoucher = _custVendTrans.Voucher;
            custVendTransLocal.LastSettleCompany = _custVendTrans.company();
            custVendTransLocal.LastSettleAccountNum = _custVendTrans.AccountNum;
            custVendTransLocal.PostingProfile    = _custVendTrans.PostingProfile;

            ledgerVoucher.findLedgerVoucherObject().parmTransDate (_custVendTrans.TransDate);
            ledgerVoucher.findLedgerVoucherObject().parmCorrection(_custVendTrans.Correct);

            postingLog.setTaxReverseTax(new TaxReverseTaxAmountDiff_RU(ledgerVoucher.lastVoucher(),
                                                                       ledgerVoucher.lastTransDate(),
                                                                       ''));

            postingLog.setAllowedVoucher(amountExchVoucher);

            custVendTransLocal.AmountMST                = exchAdjustmentAmountAccounting;
            custVendTransLocal.SettleAmountMST          = custVendTransLocal.AmountMST;
            custVendTransLocal.ExchAdjustmentUnrealized = -custVendTransLocal.AmountMST;
            custVendTransLocal.ExchAdjustment           = -custVendTransLocal.AmountMST;

            custVendTransLocal.ReportingCurrencyAmount              = exchAdjustmentAmountReporting;
            custVendTransLocal.SettleAmountReporting                = custVendTransLocal.ReportingCurrencyAmount;
            custVendTransLocal.ReportingExchAdjustmentUnrealized    = -custVendTransLocal.ReportingCurrencyAmount;
            custVendTransLocal.ExchAdjustmentReporting              = -custVendTransLocal.ReportingCurrencyAmount;

            custVendTransLocal.Voucher = amountExchVoucher;

            postingLog.doReverse(true, _useVoucherDate);
            if (custVendReversePosting)
            {
                custVendReversePosting.parmReversePostingLogSet_RU(Set::union(custVendReversePosting.parmReversePostingLogSet_RU(),
                                                                              postingLog.getReversePostingLogSet()));
            }

            custVendTransLocal.Correct                      = postingLog.foundCorrection();
            custVendTransLocal.DefaultDimension             = postingLog.foundOffsetDefaultDimension();
            custVendTrans_W = custVendTransLocal.CustVendTrans::getCustVendTrans_W();
            custVendTrans_W.CorrectReporting_RU          = postingLog.foundCorrectionReporting();
            custVendTrans_W.DefaultDimensionReporting_RU = postingLog.foundOffsetDefaultDimensionReporting();
            custVendTransLocal.CustVendTrans::packCustVendTrans_W(custVendTrans_W);

            custVendTransLocal.Txt                          = strFmt('%1 %2 %3 ', "@SYS4412", "@SYS12371", custVendTransLocal.Voucher);

            exchRateTrans                               = custVendTransStatic.findVoucherDate(amountExchVoucher, amountExchDate);
            custVendTransLocal.LastExchAdjRate          = exchRateTrans.LastExchAdjRate;
            custVendTransLocal.LastExchAdjRateReporting = exchRateTrans.LastExchAdjRateReporting;

            custVendTransLocal.insert();
        }

        // create unrealized settlement transaction
        if (settlementExchAdjAccounting || settlementExchAdjReporting)
        {
            if (!exchAdjustmentAmountAccounting || (reportingCurrencyEnabled && !exchAdjustmentAmountReporting))
            {
                postingLog.doReverse(true, _useVoucherDate);
                if (custVendReversePosting)
                {
                    custVendReversePosting.parmReversePostingLogSet_RU(Set::union(custVendReversePosting.parmReversePostingLogSet_RU(),
                                                                                  postingLog.getReversePostingLogSet()));
                }
            }

            custVendSettlementLocal.clear();
            custVendSettlementLocal.AccountNum              = _custVendSettlement.AccountNum;
            custVendSettlementLocal.OffsetTransVoucher      = _custVendSettlement.OffsetTransVoucher;
            custVendSettlementLocal.OffsetCompany           = _custVendSettlement.OffsetCompany;
            custVendSettlementLocal.OffsetAccountNum        = _custVendSettlement.OffsetAccountNum;
            custVendSettlementLocal.TransDate               = transactionDate;
            custVendSettlementLocal.TransRecId              = _custVendSettlement.TransRecId;
            custVendSettlementLocal.ExchAdjustment          = settlementExchAdjAccounting;
            custVendSettlementLocal.ExchAdjustmentReporting = settlementExchAdjReporting;
            custVendSettlementLocal.DueDate                 = _custVendTransOpen.DueDate;
            custVendSettlementLocal.insert();
        }

        _custVendTrans.ExchAdjustmentUnrealized             += settlementExchAdjAccounting;
        _custVendTrans.ExchAdjustment                       += settlementExchAdjAccounting;
        _custVendTrans.ReportingExchAdjustmentUnrealized    += settlementExchAdjReporting;
        _custVendTrans.ExchAdjustmentReporting              += settlementExchAdjReporting;
        _custVendTrans.update();

        if (_custVendTransOpen)
        {
            _custVendTransOpen.AmountMST                += settlementExchAdjAccounting;
            _custVendTransOpen.ReportingCurrencyAmount  += settlementExchAdjReporting;
            _custVendTransOpen.update();
        }

        postingLog.voucherStateRestore();

        transTxt  = TransactionTxt::construct();

        CustVendExchAdjustment_W::reverseTransAmounts(_custVendTrans);
        CustVendExchAdjustment_W::reverseTransOpenAmounts(_custVendTransOpen);

        if (isFromSettlement)
        {
            CustVendExchAdjustment_W::reverseSettlementAmounts(_custVendSettlement);
            CustVendExchAdjustment_W::reverseSettlementAmounts(custVendSettlementLocal);

            this.recalcFutureUnrealizedExchAdj(
                _custVendTrans,
                _custVendTransOpen,
                _custVendSettlement,
                custVendSettlementLocal,
                exchRateTrans.LastExchAdjRate,
                exchRateTrans.LastExchAdjRateReporting);

            CustVendExchAdjustment_W::reverseSettlementAmounts(_custVendSettlement);
            CustVendExchAdjustment_W::reverseSettlementAmounts(custVendSettlementLocal);
        }

        CustVendExchAdjustment_W::reverseTransAmounts(_custVendTrans);
        CustVendExchAdjustment_W::reverseTransOpenAmounts(_custVendTransOpen);

        return [exchAdjustmentAmountAccounting, settlementExchAdjAccounting, exchAdjustmentAmountReporting, settlementExchAdjReporting];
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseFromFutureRecalc</Name>
				<Source><![CDATA[
    protected container reverseFromFutureRecalc(CustVendTrans      _custVendTrans,
                                                CustVendTrans      _custVendTransOffset,
                                                CustVendTransOpen  _custVendTransOpen,
                                                CustVendSettlement _custVendSettlement,
                                                TransDate          _periodEnd,
                                                boolean            _reverseOffset           = false,
                                                AmountMST          _unrealExchAdjPrevAccounting       = 0,
                                                AmountMST          _unrealSettleExchAdjPrevAccounting = 0,
                                                AmountMSTSecondary _unrealExchAdjPrevReporting        = 0,
                                                AmountMSTSecondary _unrealSettleExchAdjPrevReporting  = 0)
    {
        CustVendTransData       custVendTransData   = CustVendTransData::construct(_custVendTrans);
        CustVendTransStatic     custVendTransStatic = CustVendTransStatic::newTrans(_custVendTrans);

        AmountMST               exchRateDiffAccounting;
        AmountMST               origSettleAmountAccounting;
        AmountMST               unrealExchAdjAccounting;
        AmountMST               unrealSettleExchAdjAccounting;

        AmountMSTSecondary      exchRateDiffReporting;
        AmountMSTSecondary      origSettleAmountReporting;
        AmountMSTSecondary      unrealExchAdjReporting;
        AmountMSTSecondary      unrealSettleExchAdjReporting;

        AmountCur               origSettleAmountCur;
        boolean                 isReversed;

        changecompany(_custVendTrans.company())
        {
            // reverse previously calculated future realized exchange adjustment
            custVendReversePosting = CustVendReversePostingExt::construct(custVendTransData.custVendTable(), ledgerVoucherGroup);
            custVendReversePosting.parmTransactionDate_W(transactionDate);
            custVendReversePosting.parmCustVendTrans_W(_custVendTrans);
            custVendReversePosting.parmCustVendTransOffset_W(_custVendTransOffset);
            custVendReversePosting.parmCustVendSettlement_W(_custVendSettlement);
            custVendReversePosting.parmLedgerVoucher_W(ledgerVoucher);
            custVendReversePosting.parmCustVendTransSettlement_W(custVendTransSettlement);
            custVendReversePosting.parmSettlementGroupPlaceHolder_W(settlementGroupPlaceHolder);

            if (! custVendReversePosting.validate())
            {
                throw error("@SYS25608");
            }

            CustVendExchAdjustment_W::reverseTransAmounts(_custVendTrans);
            CustVendExchAdjustment_W::reverseTransOpenAmounts(_custVendTransOpen);

            [unrealExchAdjAccounting,
             unrealSettleExchAdjAccounting,
             unrealExchAdjReporting,
             unrealSettleExchAdjReporting] = this.restoreExchAdjustment(_custVendSettlement, _custVendTrans, _custVendTransOpen, false);

            CustVendExchAdjustment_W::reverseTransAmounts(_custVendTrans);
            CustVendExchAdjustment_W::reverseTransOpenAmounts(_custVendTransOpen);

            if (  (
                      (!unrealExchAdjAccounting &&  unrealSettleExchAdjAccounting) &&
                      (! reportingCurrencyEnabled || (!unrealExchAdjReporting && unrealSettleExchAdjReporting))
                  ) ||
                  (
                        (!unrealExchAdjAccounting && !unrealSettleExchAdjAccounting)                                &&
                        (!reportingCurrencyEnabled || (!unrealExchAdjReporting && !unrealSettleExchAdjReporting))   &&
                        (_periodEnd < _custVendSettlement.TransDate || exchRateDiffCalcType == ExchRateDiffCalcType_W::Incremental || _custVendTrans.bankCurrencyTransferId_RU())
                  )  ||
                  (_reverseOffset && (
                        (!_unrealExchAdjPrevAccounting && _unrealSettleExchAdjPrevAccounting) ||
                        (reportingCurrencyEnabled && !_unrealExchAdjPrevReporting && _unrealSettleExchAdjPrevReporting)
                  ))
            )
            {
                CustVendExchAdjustment_W::reverseSettlementAmounts(_custVendSettlement);
                exchRateDiffAccounting = _custVendSettlement.ExchAdjustment;
                exchRateDiffReporting  = _custVendSettlement.ExchAdjustmentReporting;

                origSettleAmountCur         = _custVendTrans.SettleAmountCur;
                origSettleAmountAccounting  = _custVendTrans.SettleAmountMST       - ((_custVendTrans.AmountCur <  0) ? _custVendSettlement.ExchAdjustment : 0);
                origSettleAmountReporting   = _custVendTrans.SettleAmountReporting - ((_custVendTrans.AmountCur <  0) ? _custVendSettlement.ExchAdjustmentReporting : 0);

                CustVendExchAdjustment_W::reverseSettlementAmounts(_custVendSettlement);
                CustVendExchAdjustment_W::reverseTransAmounts(_custVendTrans);
                CustVendExchAdjustment_W::reverseTransOpenAmounts(_custVendTransOpen);

                custVendReversePosting.reverseExchAdjustment_RU(false);
                custVendReversePosting.reverseSettlement(_custVendSettlement);
                custVendReversePosting.updateSettlement();

                CustVendExchAdjustment_W::reverseTransOpenAmounts(_custVendTransOpen);
                CustVendExchAdjustment_W::reverseTransAmounts(_custVendTrans);
                CustVendExchAdjustment_W::reverseSettlementAmounts(_custVendSettlement);

                _custVendTrans.SettleAmountCur -= _custVendSettlement.SettleAmountCur;
                _custVendTrans.SettleAmountMST -= _custVendSettlement.SettleAmountMST;
                _custVendTrans.SettleAmountReporting -= _custVendSettlement.SettleAmountReporting;

                CustVendExchAdjustment_W::reverseSettlementAmounts(_custVendSettlement);

                CustVendExchAdjustment_W::reverseTransAmounts(_custVendTrans);
                _custVendTrans.update();
                CustVendExchAdjustment_W::reverseTransAmounts(_custVendTrans);

                _custVendTrans.SettleAmountCur          = origSettleAmountCur;
                _custVendTrans.SettleAmountMST          = origSettleAmountAccounting;
                _custVendTrans.SettleAmountReporting    = origSettleAmountReporting;
                isReversed = true;
            }
            else
            {
                exchRateDiffAccounting = 0;
                exchRateDiffReporting  = 0;
            }
        }

        return [exchRateDiffAccounting, exchRateDiffReporting, isReversed, unrealExchAdjAccounting, unrealSettleExchAdjAccounting, unrealExchAdjReporting, unrealSettleExchAdjReporting];
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseUnrealizedExchAdj</Name>
				<Source><![CDATA[
    public container reverseUnrealizedExchAdj(CustVendTrans          _custVendTrans,
                                              CustVendTransOpen      _custVendTransOpen,
                                              AmountCur              _settleAmountCur,
                                              TransDate              _transDate,
                                              CustVendTrans          _custVendTransOffset,
                                              boolean                _recalcFuture,
                                              DiscAmount             _cashDisc)
    {
        CustVendTrans               exchRateTrans;
        AmountMST                   reversedUnrealAmountAccounting;
        AmountMST                   standardReversedUnrealAmountAccounting;
        AmountMSTSecondary          reversedUnrealAmountReporting;
        AmountMSTSecondary          standardReversedUnrealAmountReporting;

        TransDate                   origLastExchAdj = _custVendTrans.LastExchAdj;
        boolean                     reversed;
        NoneTableTrans              dimSpec;
        DimensionDefault            defaultDimension;
        PostingProfile              postingProfile;
        CustVendExchPrinciples      exchPrinciple;
        CustVendTransData           custVendTransData;
        AmountMST                   standardUnrealAmountAccounting;
        AmountMSTSecondary          standardUnrealAmountReporting;
        AmountMST                   unrealAmountAccounting;
        AmountMSTSecondary          unrealAmountReporting;
        TransDate                   exchRateDate, transDate;
        AmountMST                   origSettleAmountAccounting;
        AmountMSTSecondary          origSettleAmountReporting;
        AmountCur                   origSettleAmountCur;
        CustVendTrans               origCustVendTrans;
        CustVendTransPostingLog_RU  custVendTransPostingLog;
        CustVendTrans               custVendTransEmpty;
        ExchRate                    exchRateAccounting;
        ExchRate                    exchRateReporting;
        CustVendSettlement          custVendSettlement;
        TransactionSelect           postingSpec;
        CustVendTrans_W             custVendTrans_W;

        transTxt = TransactionTxt::construct();
        changecompany(_custVendTrans.company())
        {
            transDate = _recalcFuture ? _transDate - 1 : transactionDate;
            periodStart = LedgerFiscalCalendar::findPeriodStartDateByDate(calendarRecId, transactionDate);

            custVendTransData    = CustVendTransData::construct(_custVendTrans);

            exchRateTrans        = custVendTransData.findLastUnrealExchAdjTrans_W(transDate, custVendTransSettlement);

            CustVendExchAdjustment_W::reverseTransAmounts(exchRateTrans);

            [standardUnrealAmountAccounting, standardUnrealAmountReporting] = this.getUnrealizedExchAdjByPeriod(_custVendTrans, dateNull(), transDate);
            [standardReversedUnrealAmountAccounting, standardReversedUnrealAmountReporting]  = this.calcUnrealizedExchAdj(
                -standardUnrealAmountAccounting,
                -standardUnrealAmountReporting,
                _custVendTrans,
                transDate,
                _settleAmountCur + _cashDisc);

            if (ledgerTransType == LedgerTransType::AdvanceAdjustment_RU)
            {
                //unrealAmount         = standardUnrealAmount;
                reversedUnrealAmountAccounting  = standardReversedUnrealAmountAccounting;
                reversedUnrealAmountReporting   = standardReversedUnrealAmountReporting;
            }
            else if (!exchRateTrans.Correct                                             &&
                      exchRateTrans.TransDate >= periodStart                            &&
                      exchRateDiffCalcType == ExchRateDiffCalcType_W::SummarizedPeriod  &&
                     !_custVendTrans.bankCurrencyTransferId_RU())
            {
                [unrealAmountAccounting, unrealAmountReporting] = this.getUnrealizedExchAdjByDate(exchRateTrans, _custVendTrans);
                [reversedUnrealAmountAccounting, reversedUnrealAmountReporting] = this.calcUnrealizedExchAdj(
                    unrealAmountAccounting,
                    unrealAmountReporting,
                    _custVendTrans,
                    exchRateTrans.TransDate,
                    _settleAmountCur + _cashDisc);
            }

            if (reversedUnrealAmountAccounting || standardReversedUnrealAmountAccounting || reversedUnrealAmountReporting || standardReversedUnrealAmountReporting)
            {
                _custVendTransOpen.AmountMST                += standardReversedUnrealAmountAccounting;
                _custVendTransOpen.ReportingCurrencyAmount  += standardReversedUnrealAmountReporting;
                custVendSettle.updateTransOpen(_custVendTrans, _custVendTransOpen);

                if ((!exchRateTrans.Correct                                             &&
                      exchRateTrans.TransDate >= periodStart                            &&
                      exchRateDiffCalcType == ExchRateDiffCalcType_W::SummarizedPeriod  &&
                     !_custVendTrans.bankCurrencyTransferId_RU())                       ||
                      ledgerTransType == LedgerTransType::AdvanceAdjustment_RU)
                {
                    reversed = true;

                    [dimSpec,
                     defaultDimension,
                     postingProfile,
                     exchPrinciple,
                     exchRateDate,
                     postingSpec] = this.getUnrealizedParameters(custVendTransData, exchRateTrans, isFromSettlement);

                    [exchRateAccounting, exchRateReporting] = this.getNextExchRate(exchRateTrans, transDate);
                    this.postExchAdj(
                        -reversedUnrealAmountAccounting,
                        -standardReversedUnrealAmountAccounting,
                        -reversedUnrealAmountReporting,
                        -standardReversedUnrealAmountReporting,
                        _custVendTrans,
                        true,
                        true,
                        true,
                        '',
                        dateNull(),
                        exchRateAccounting,
                        exchRateReporting,
                        dimSpec,
                        defaultDimension,
                        postingProfile,
                        true,
                        '',
                        true,
                        _custVendTrans,
                        _custVendTransOffset,
                        '',
                        postingSpec,
                        true);
                }
                else
                {
                    _custVendTrans.ExchAdjustmentUnrealized             += standardReversedUnrealAmountAccounting;
                    _custVendTrans.ExchAdjustment                       += standardReversedUnrealAmountAccounting;

                    _custVendTrans.ReportingExchAdjustmentUnrealized    += standardReversedUnrealAmountReporting;
                    _custVendTrans.ExchAdjustmentReporting              += standardReversedUnrealAmountReporting;

                    // create (reverse) empty posting log record
                    custVendTransEmpty = _custVendTrans.data();
                    custVendTransEmpty.TransDate = transactionDate;
                    custVendTransEmpty.Voucher   = this.parmLedgerVoucher().lastVoucher();

                    custVendTransEmpty.Correct                      = true;
                    custVendTrans_W = custVendTransEmpty.CustVendTrans::getCustVendTrans_W();
                    custVendTrans_W.CorrectReporting_RU          = true;
                    custVendTransEmpty.CustVendTrans::packCustVendTrans_W(custVendTrans_W);

                    custVendTransEmpty.DefaultDimension             = defaultDimension;

                    custVendTransPostingLog = custVendSettle.createPostingTransLog_RU(
                        CustVendTransPostingLogType_RU::UnrealisedExchAdj,
                        custVendTransEmpty,
                        LedgerPostingType::ExchRateGain,
                        0,
                        0,
                        0,
                        0,
                        null,
                        0,
                        0,
                        _custVendTrans,
                        _custVendTransOffset,
                        custVendSettle.amount(-standardReversedUnrealAmountAccounting),
                        custVendSettle.amount(-standardReversedUnrealAmountReporting));
                }

                _custVendTrans.LastExchAdj = transactionDate;
                custVendSettlement = custVendSettle.updateTransactionReverseExchAdj_W(_custVendTrans, _custVendTransOpen);
                custVendTransSettlement.addSettlement(custVendSettlement, settlementGroupPlaceHolder, _custVendTrans.TransType);
                _custVendTrans.LastExchAdj = origLastExchAdj;

                if (! isFromSettlement)
                {
                    origSettleAmountCur         = _custVendTrans.SettleAmountCur;
                    origSettleAmountAccounting  = _custVendTrans.SettleAmountMST;
                    origSettleAmountReporting   = _custVendTrans.SettleAmountReporting;

                    CustVendExchAdjustment_W::reverseTransAmounts(_custVendTrans);

                    origCustVendTrans = _custVendTrans.orig();
                    _custVendTrans.SettleAmountCur          = origCustVendTrans.SettleAmountCur;
                    _custVendTrans.SettleAmountMST          = origCustVendTrans.SettleAmountMST;
                    _custVendTrans.SettleAmountReporting    = origCustVendTrans.SettleAmountReporting;

                    _custVendTrans.update();

                    CustVendExchAdjustment_W::reverseTransAmounts(_custVendTrans);

                    _custVendTrans.SettleAmountCur          = origSettleAmountCur;
                    _custVendTrans.SettleAmountMST          = origSettleAmountAccounting;
                    _custVendTrans.SettleAmountReporting    = origSettleAmountReporting;
                }
            }
        }

        return [reversed, reversedUnrealAmountAccounting, standardReversedUnrealAmountAccounting, reversedUnrealAmountReporting, standardReversedUnrealAmountReporting];
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCustVendTransSettlement</Name>
				<Source><![CDATA[
    public void setCustVendTransSettlement(CustVendTransSettlement _custVendTransSettlement)
    {
        ;
        custVendTransSettlement = _custVendTransSettlement;

        if (!custVendSettle.isSettlementActive_W())
        {
            custVendSettle.parmCustVendTransSettlement_W(custVendTransSettlement);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCustVendTransSettlementCurDeal</Name>
				<Source><![CDATA[
    public void setCustVendTransSettlementCurDeal(CustVendTransSettlement _custVendTransSettlement)
    {
        custVendTransSettlementCurDeal = _custVendTransSettlement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSettlementGroupPlaceHolder</Name>
				<Source><![CDATA[
    public void setSettlementGroupPlaceHolder(Counter _settlementGroupPlaceHolder)
    {
        ;
        settlementGroupPlaceHolder = _settlementGroupPlaceHolder;

        if (!custVendSettle.isSettlementActive_W())
        {
            custVendSettle.parmSettlementGroupPlaceHolder_W(_settlementGroupPlaceHolder);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePrevExchRateTrans</Name>
				<Source><![CDATA[
    private void updatePrevExchRateTrans(CustVendTrans _lastExchAdjTrans, TransDate _postingDate)
    {
        CustVendTrans exchRateTrans = _lastExchAdjTrans.data();
        ExchRate      exchRateAccounting;
        ExchRate      exchRateReporting;

        [exchRateAccounting, exchRateReporting] = this.getNextExchRate(_lastExchAdjTrans, _postingDate);

        if (_lastExchAdjTrans.TransDate == _postingDate)
        {
            while select forupdate exchRateTrans
                where exchRateTrans.LastSettleVoucher == _lastExchAdjTrans.LastSettleVoucher
                 &&  (exchRateTrans.TransType         == LedgerTransType::ExchAdjustment
                 ||   exchRateTrans.TransType         == LedgerTransType::AdvanceAdjustment_RU)
                 &&   exchRateTrans.TransDate         == _postingDate
                 &&   exchRateTrans.AccountNum        == _lastExchAdjTrans.AccountNum
                 &&   exchRateTrans.Invoice           == _lastExchAdjTrans.Invoice
                 &&   exchRateTrans.LastExchAdj       == exchRateTrans.TransDate
                 &&   exchRateTrans.ExchAdjustmentUnrealized
                 &&  !exchRateTrans.LastExchAdjVoucher
                 && (!exchRateTrans.LastExchAdjRate
                 ||  !exchRateTrans.LastExchAdjRateReporting)

            {
                if (!exchRateTrans.LastExchAdjRate)
                {
                    exchRateTrans.LastExchAdjRate = exchRateAccounting;
                }

                if (!exchRateTrans.LastExchAdjRateReporting)
                {
                    exchRateTrans.LastExchAdjRateReporting = exchRateReporting;
                }

                exchRateTrans.doUpdate();
            }
        }

        custVendTransSettlement.updatePrevExchRateTrans_W(_lastExchAdjTrans, _postingDate, exchRateAccounting, exchRateReporting);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static CustVendExchAdjustment_WExt construct()
    {
        return new CustVendExchAdjustment_WExt();
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsPrepayments</Name>
				<Source><![CDATA[
    public static boolean existsPrepayments(ModuleCustVend _module, CustVendAC _custVendAccount, TransDate _transDate)
    {
        CustVendTrans       custVendTrans;
        CustVendTransOpen   custVendTransOpen;
        SpecTrans           specTrans;
        CustVendTransStatic custVendTransStatic = CustVendTransStatic::newModuleCustVend(_module);
        ;

        custVendTrans     = custVendTransStatic.custVendTrans();
        custVendTransOpen = custVendTransStatic.custVendTransOpen();

        select firstonly custVendTrans
            where custVendTrans.AccountNum == _custVendAccount &&
                  ! custVendTrans.Invoice                      &&
                 (custVendTrans.Prepayment                     ||
                 (! custVendTrans.Prepayment && custVendTrans.TransDate < _transDate))
        exists join custVendTransOpen
            where custVendTransOpen.RefRecId == custVendTrans.RecId
        notexists join specTrans
            where specTrans.RefTableId == custVendTransOpen.TableId &&
                  specTrans.RefRecId   == custVendTransOpen.RecId;

        return custVendTrans.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFinalPostingType</Name>
				<Source><![CDATA[
    static public LedgerPostingType getFinalPostingType(LedgerPostingType              _posting,
                                                        CustVendTransPostingLogType_RU _postingLogType)
    {
        LedgerPostingType posting = _posting;

        if (_postingLogType == CustVendTransPostingLogType_RU::AdvanceAdjustment &&
            (_posting == LedgerPostingType::ExchRateGain ||
             _posting == LedgerPostingType::ExchRateLoss))
        {
            posting = _posting == LedgerPostingType::ExchRateGain ?
                      LedgerPostingType::AdvanceAdjustmentGain_RU :
                      LedgerPostingType::AdvanceAdjustmentLoss_RU;
        }

        return posting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOpenAmounts</Name>
				<Source><![CDATA[
    public static container getOpenAmounts(CustVendTrans            _custVendTrans,
                                           TransDate                _transDate,
                                           CustVendTransSettlement  _custVendTransSettlement = null)
    {
        CustVendTransDetails    custVendTransDetails;
        AmountCur               openAmountCur;
        AmountMST               openAmountAccounting;
        AmountMSTSecondary      openAmountReporting;

        AmountCur               pendingSettledAmountCur;
        AmountMST               pendingSettledAmountAccounting;
        AmountMSTSecondary      pendingSettledAmountReporting;
        int                     sign = _custVendTrans.TableId == tableNum(CustTrans) ? 1 : -1;

        if (_custVendTransSettlement)
        {
            [pendingSettledAmountCur, pendingSettledAmountAccounting, pendingSettledAmountReporting] = _custVendTransSettlement.getSettledAmounts_W(_custVendTrans, _transDate);
        }

        custVendTransDetails = new CustVendTransDetails(_custVendTrans, _transDate);

        CustVendExchAdjustment_W::reverseTransAmounts(_custVendTrans);

        openAmountCur           = _custVendTrans.AmountCur - custVendTransDetails.amountCurSettled() - pendingSettledAmountCur;
        openAmountAccounting    = _custVendTrans.AmountMST - custVendTransDetails.amountMSTSettled() - pendingSettledAmountAccounting - custVendTransDetails.pennyDiff_W();
        openAmountReporting     = _custVendTrans.ReportingCurrencyAmount - custVendTransDetails.amountReportingSettled_RU() - pendingSettledAmountReporting - custVendTransDetails.pennyDiffReporting_RU();

        CustVendExchAdjustment_W::reverseTransAmounts(_custVendTrans);

        return [openAmountCur * sign, openAmountAccounting * sign, openAmountReporting * sign];
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAdvanceAdjustment</Name>
				<Source><![CDATA[
    public static boolean isAdvanceAdjustment(CustVendTrans _firstCustVendTrans,
                                              CustVendTrans _custVendTransDebet,
                                              CustVendTrans _custVendTransCredit)
    {
        if (((! _firstCustVendTrans && (_custVendTransDebet.Invoice || _custVendTransCredit.Invoice)) || _firstCustVendTrans.Invoice) &&
            (_custVendTransDebet.Prepayment || _custVendTransCredit.Prepayment)                                                       &&
            LedgerParameters::find().AdvanceAdjustment_W)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromExchAdj</Name>
				<Source><![CDATA[
    public static CustVendExchAdjustment_WExt newFromExchAdj(CustVendExchAdj _custVendExchAdj, CustVendExchAdjTrans _custVendExchAdjTrans)
    {
        CustVendExchAdjustment_WExt  custVendExchAdjustment;
        ;

        custVendExchAdjustment = CustVendExchAdjustment_WExt::construct();
        custVendExchAdjustment.parmCustVendExchAdj(_custVendExchAdj);
        custVendExchAdjustment.parmCustVendExchAdjTrans(_custVendExchAdjTrans);
        custVendExchAdjustment.parmCustVendSettle(CustVendSettle::construct(_custVendExchAdj.module()));
        custVendExchAdjustment.parmIsFromSettlement(false);

        return custVendExchAdjustment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromReverseSettlement</Name>
				<Source><![CDATA[
    public static CustVendExchAdjustment_WExt newFromReverseSettlement(SysModule _module, CustVendReversePostingExt _custVendReversePosting)
    {
        CustVendExchAdjustment_WExt  custVendExchAdjustment;
        ;

        custVendExchAdjustment = CustVendExchAdjustment_WExt::construct();
        custVendExchAdjustment.parmCustVendReversePosting(_custVendReversePosting);
        custVendExchAdjustment.parmCustVendSettle(CustVendSettle::construct(_module));
        custVendExchAdjustment.parmTransactionDate(_custVendReversePosting.parmTransactionDate_W());
        custVendExchAdjustment.parmLedgerVoucher(_custVendReversePosting.parmLedgerVoucher_W());
        custVendExchAdjustment.parmIsFromSettlement(true);

        return custVendExchAdjustment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromSettlement</Name>
				<Source><![CDATA[
    public static CustVendExchAdjustment_WExt newFromSettlement(CustVendSettle _custVendSettle)
    {
        CustVendExchAdjustment_WExt  custVendExchAdjustment;
        ;

        custVendExchAdjustment = CustVendExchAdjustment_WExt::construct();
        custVendExchAdjustment.parmCustVendSettle(_custVendSettle);
        custVendExchAdjustment.parmTransactionDate(_custVendSettle.parmTransactionDate_W());
        custVendExchAdjustment.parmLedgerVoucher(_custVendSettle.parmLedgerVoucher_W());
        custVendExchAdjustment.parmParentLedgerVoucher(_custVendSettle.parmParentLedgerVoucher_RU());
        custVendExchAdjustment.parmIsFromSettlement(true);

        return custVendExchAdjustment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseSettlementAmounts</Name>
				<Source><![CDATA[
    public static void reverseSettlementAmounts(CustVendSettlement _custVendSettlement)
    {
        if (_custVendSettlement.TableId == tableNum(VendSettlement))
        {
            _custVendSettlement.SettleAmountCur         = -_custVendSettlement.SettleAmountCur;
            _custVendSettlement.SettleAmountMST         = -_custVendSettlement.SettleAmountMST;
            _custVendSettlement.SettleAmountReporting   = -_custVendSettlement.SettleAmountReporting;
            _custVendSettlement.ExchAdjustment          = -_custVendSettlement.ExchAdjustment;
            _custVendSettlement.ExchAdjustmentReporting = -_custVendSettlement.ExchAdjustmentReporting;
            _custVendSettlement.UtilizedCashDisc        = -_custVendSettlement.UtilizedCashDisc;
            _custVendSettlement.PennyDiff               = -_custVendSettlement.PennyDiff;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseTransAmounts</Name>
				<Source><![CDATA[
    public static void reverseTransAmounts(CustVendTrans _custVendTrans)
    {
        if (_custVendTrans.TableId == tableNum(VendTrans))
        {
            _custVendTrans.AmountCur                            = - _custVendTrans.AmountCur;
            _custVendTrans.AmountMST                            = - _custVendTrans.AmountMST;
            _custVendTrans.ReportingCurrencyAmount              = - _custVendTrans.ReportingCurrencyAmount;
            _custVendTrans.SettleAmountCur                      = - _custVendTrans.SettleAmountCur;
            _custVendTrans.SettleAmountMST                      = - _custVendTrans.SettleAmountMST;
            _custVendTrans.SettleAmountReporting                = - _custVendTrans.SettleAmountReporting;
            _custVendTrans.ExchAdjustment                       = - _custVendTrans.ExchAdjustment;
            _custVendTrans.ExchAdjustmentReporting              = - _custVendTrans.ExchAdjustmentReporting;
            _custVendTrans.ExchAdjustmentRealized               = - _custVendTrans.ExchAdjustmentRealized;
            _custVendTrans.ExchAdjustmentUnrealized             = - _custVendTrans.ExchAdjustmentUnrealized;
            _custVendTrans.ReportingExchAdjustmentRealized      = - _custVendTrans.ReportingExchAdjustmentRealized;
            _custVendTrans.ReportingExchAdjustmentUnrealized    = - _custVendTrans.ReportingExchAdjustmentUnrealized;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseTransOpenAmounts</Name>
				<Source><![CDATA[
    public static void reverseTransOpenAmounts(CustVendTransOpen _custVendTransOpen)
    {
        if (_custVendTransOpen.TableId == tableNum(VendTransOpen))
        {
            _custVendTransOpen.AmountCur                = -_custVendTransOpen.AmountCur;
            _custVendTransOpen.AmountMST                = -_custVendTransOpen.AmountMST;
            _custVendTransOpen.ReportingCurrencyAmount  = -_custVendTransOpen.ReportingCurrencyAmount;
            _custVendTransOpen.PossibleCashDisc         = -_custVendTransOpen.PossibleCashDisc;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>