<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankPaymAdviceReportGeneratorCustExt</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///  Generates the report data for the <c>BankPaymAdviceCust</c> report.
/// </summary>
public class BankPaymAdviceReportGeneratorCustExt extends BankPaymAdviceReportGeneratorExt
{
    protected CustTable custTable;
    protected CustTrans custTransInvoice;

    private CustTransOpen custTransOpenInvoice;
    private SpecTrans specTrans;

    private Name customerName;
    private Addressing customerAddress;
    private CustAccount customerAccountNum;
    private LogisticsElectronicAddressLocator customerContactEmail;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findRecipient</Name>
				<Source><![CDATA[
    protected void findRecipient(LedgerJournalTrans _ledgerJournalTrans)
    {
        custTable = CustTable::findByCompany(_ledgerJournalTrans.Company,
            _ledgerJournalTrans.parmAccount());

        customerName = custTable.name();
        customerAddress = custTable.postalAddress().Address;
        customerAccountNum = custTable.AccountNum;
        customerContactEmail = custTable.email();
    }

]]></Source>
			</Method>
			<Method>
				<Name>findGrouping</Name>
				<Source><![CDATA[
    protected void findGrouping()
    {
        grouping = ledgerJournalTrans.parmAccount() + this.getPaymentCurrencyCode();
    }

]]></Source>
			</Method>
			<Method>
				<Name>findInvoicesAndCreateData</Name>
				<Source><![CDATA[
    protected void findInvoicesAndCreateData()
    {
        while select crosscompany specTrans
            where specTrans.SpecRecId == ledgerJournalTrans.RecId
                && specTrans.SpecCompany == ledgerJournalTrans.company()
                && specTrans.SpecTableId == tablenum(LedgerJournalTrans)
                && specTrans.RefTableId == tablenum(CustTransOpen)
        {
            custTransOpenInvoice = specTrans.custTransOpen();
            custTransInvoice = custTransOpenInvoice.custTrans();

            this.insertBankPaymAdviceTmp();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateBankPaymAdviceTempCommonInfo</Name>
				<Source><![CDATA[
    protected void populateBankPaymAdviceTempCommonInfo()
    {
        super();

        bankPaymAdviceTmp.Name = customerName;
        bankPaymAdviceTmp.Address = customerAddress;
        bankPaymAdviceTmp.AccountNum = customerAccountNum;
        bankPaymAdviceTmp.ContactEmail = customerContactEmail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateBankPaymAdviceTempPaymentInfo</Name>
				<Source><![CDATA[
    protected void populateBankPaymAdviceTempPaymentInfo()
    {
        bankPaymAdviceTmp.PaymRefLabel = this.getPaymRefLabel();
        bankPaymAdviceTmp.PaymentReference = this.getPaymRef();
        bankPaymAdviceTmp.SettledCurrencyCode = this.getPaymentCurrencyCode();
        bankPaymAdviceTmp.CashDisc = this.getCashDiscAmount();
        bankPaymAdviceTmp.TransDate = ledgerJournalTrans.TransDate;
        bankPaymAdviceTmp.Balance01 = this.calculateAmountInPaymentCurrency(
            ledgerJournalTrans.TransDate,
            custTransInvoice.CurrencyCode,
            SpecTransManager::getSpecTransBalanceForTaxWithholding(specTrans));
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateBankPaymAdviceTempInvoiceInfo</Name>
				<Source><![CDATA[
    protected void populateBankPaymAdviceTempInvoiceInfo()
    {
        bankPaymAdviceTmp.Invoice = custTransInvoice.Invoice;
        bankPaymAdviceTmp.InvoiceDate = custTransInvoice.TransDate;
        bankPaymAdviceTmp.CurrencyCode = custTransInvoice.CurrencyCode;
        bankPaymAdviceTmp.AmountCur = custTransInvoice.AmountCur;
        bankPaymAdviceTmp.TransId = custTransInvoice.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymRefLabel</Name>
				<Source><![CDATA[
    /// <summary>
    /// The payment reference label.
    /// </summary>
    /// <returns>The payment reference label.</returns>
    protected str getPaymRefLabel()
    {
        str paymRefLabel;

        if (ledgerJournalTrans.BankBillOfExchangeNum)
        {
            paymRefLabel = "@SYS69795";
        }
        else
        {
            paymRefLabel = super();
        }

        return paymRefLabel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymRef</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the payment reference.
    /// </summary>
    /// <returns>The payment reference.</returns>
    protected str getPaymRef()
    {
        str paymRef;

        if (ledgerJournalTrans.BankBillOfExchangeNum)
        {
            paymRef = ledgerJournalTrans.BankBillOfExchangeNum;
        }
        else
        {
            paymRef = super();
        }

        return paymRef;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCashDiscAmount</Name>
				<Source><![CDATA[
    protected CustCashDiscAmount getCashDiscAmount()
    {
        return (this.calculateAmountInPaymentCurrency(ledgerJournalTrans.TransDate, custTransInvoice.CurrencyCode, specTrans.CashDiscToTake)) * -1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();

        BankPaymAdviceCustTmp bankPaymAdviceCustTmp;
        bankPaymAdviceTmp = bankPaymAdviceCustTmp;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>