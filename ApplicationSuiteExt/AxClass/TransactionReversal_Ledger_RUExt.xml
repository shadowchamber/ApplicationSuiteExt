<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TransactionReversal_Ledger_RUExt</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class implements Ledger transaction reversal logic for Russian localization.
/// </summary>

class TransactionReversal_Ledger_RUExt extends TransactionReversal_LedgerExt
{
    GeneralJournalAccountEntry  ledgerTrans;
    GeneralJournalAccountEntry  ledgerTransOffset;
    GeneralJournalEntry         generalJournalEntry;
    LedgerVoucherObject         ledgerVoucherObject;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkNumberSequence</Name>
				<Source><![CDATA[
    public void checkNumberSequence()
    {
        NumberSequenceReference numberSequenceReference;
        NumberSequenceTable     numberSequenceTableNum;
        ;

        numberSequenceReference = LedgerParameters::numRefLedgerReversalVoucher();
        if (! numberSequenceReference)
        {
            throw error(strfmt("@SYS53912"));
        }
        numberSequenceTableNum = numberSequenceReference.numberSequenceTable();

        if (!numberSequenceTableNum)
        {
            throw error(strfmt("@SYS53911",numberSequenceReference.referenceLabel(),numberSequenceReference.referenceModuleLabel()));
        }
        if (! numberSequenceTableNum.Continuous)
        {
            throw error(strfmt("@SYS78707",numberSequenceReference.referenceLabel(),numberSequenceReference.referenceModuleLabel()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReversalLinks</Name>
				<Source><![CDATA[
    private void createReversalLinks(GeneralJournalAccountEntry _ledgerTrans)
    {
        GeneralJournalAccountEntry ledgerTransReverse;
        GeneralJournalAccountEntry ledgerTransOriginal;
        GeneralJournalEntry journalEntry, journalEntrySource;
        LedgerVoucherReportDate_RU ledgerVoucherReportDate;
        TransDate           reportingDate;
        LedgerTransLink_RU  ledgerTransLink;
        boolean             isCorrection = this.isCorrection(_ledgerTrans);
        boolean             isCrediting  = (isCorrection != _ledgerTrans.IsCorrection) ? _ledgerTrans.IsCredit : ! _ledgerTrans.IsCredit;

        ledgerTransOriginal = TransLink_RU::getOriginal(_ledgerTrans);
        journalEntry = GeneralJournalEntry::find(ledgerTransOriginal.GeneralJournalEntry);
        ledgerVoucherReportDate = LedgerVoucherReportDate_RU::find(journalEntry.SubledgerVoucher, journalEntry.AccountingDate);

        reportingDate = ledgerVoucherReportDate ? ledgerVoucherReportDate.ReportingDate : journalEntry.AccountingDate;

        select firstonly RecId from ledgerTransReverse
            where ledgerTransReverse.LedgerDimension == _ledgerTrans.LedgerDimension
               && ledgerTransReverse.PostingType     == _ledgerTrans.PostingType
               && ledgerTransReverse.IsCredit        == isCrediting
        join journalEntry
            where journalEntry.RecId            == ledgerTransReverse.GeneralJournalEntry
               && journalEntry.SubledgerVoucher == reversalVoucher
               && journalEntry.AccountingDate   == reversalDate;

        TransLink_RU::createReversal(_ledgerTrans.TableId,
                                     _ledgerTrans.RecId,
                                     ledgerTransReverse.RecId,
                                     journalEntry.AccountingDate);

        journalEntrySource = GeneralJournalEntry::find(_ledgerTrans.GeneralJournalEntry);

        ledgerTransLink = LedgerTransLink_RU::newTrans(journalEntry, journalEntrySource);
        ledgerTransLink.parmAccountingDateField(fieldNum(GeneralJournalEntry, AccountingDate));
        ledgerTransLink.parmVoucherField(fieldNum(GeneralJournalEntry, SubledgerVoucher));
        ledgerTransLink.parmReportingDate(reportingDate);
        ledgerTransLink.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTransObject</Name>
				<Source><![CDATA[
    private void createTransObject(GeneralJournalAccountEntry _ledgerTrans)
    {
        LedgerVoucherTransObject ledgerVoucherTransObject = LedgerVoucherTransObject::newGeneralJournal(_ledgerTrans);

        ledgerVoucherTransObject.invertAmounts();
        ledgerVoucherTransObject.parmCorrect(this.isCorrection(_ledgerTrans));
        ledgerVoucherTransObject.parmTransTxt(transactionTxt.txt());
        ledgerVoucherTransObject.parmSourceTableId(_ledgerTrans.TableId);
        ledgerVoucherTransObject.parmSourceRecId(_ledgerTrans.RecId);
        ledgerVoucherTransObject.parmTaxParentReferenceTableId(_ledgerTrans.TableId);
        ledgerVoucherTransObject.parmTaxParentReferenceRecId(_ledgerTrans.RecId);
        ledgerVoucherTransObject.parmReasonRefRecID(reasonRefRecId);
        ledgerVoucherObject.addTrans(ledgerVoucherTransObject);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCorrection</Name>
				<Source><![CDATA[
    private NoYes isCorrection(GeneralJournalAccountEntry _ledgerTrans)
    {
        GeneralJournalAccountEntry  ledgerTransOriginal;
        NoYes                       ret;

        if (revoke)
        {
            ledgerTransOriginal = TransLink_RU::getOriginal(_ledgerTrans);
            ret = ledgerTransOriginal.IsCorrection;
        }
        else
        {
            ret = LedgerParameters::find().TransactionReversalCorrection ?
                  ! _ledgerTrans.IsCorrection                            :
                    _ledgerTrans.IsCorrection;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postReversal</Name>
				<Source><![CDATA[
    public void postReversal()
    {
        this.createReversalLinks(ledgerTrans);
        this.createReversalLinks(ledgerTransOffset);
    }

]]></Source>
			</Method>
			<Method>
				<Name>reversal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Implements the main logic flow for reversing a ledger transaction.
    /// </summary>
    /// <param name="args">
    /// A calling context arguments.
    /// </param>

    public void reversal(Args args)
    {
        TransLink_RU transLink;

        this.checkNumberSequence();

        ledgerTrans = args.record();

        if (ledgerTrans.canReverse())
        {
            transLink = TransLink_RU::findSec(ledgerTrans.TableId, ledgerTrans.RecId);
            generalJournalEntry = GeneralJournalEntry::find(ledgerTrans.GeneralJournalEntry);

            minimumDate = transLink.RecId                                                                   ?
                          (select maxof(AccountingDate) from TransLink_RU
                               where TransLink_RU.RefTableId    == transLink.RefTableId &&
                                     TransLink_RU.ReversalGroup == transLink.ReversalGroup).AccountingDate  :
                          generalJournalEntry.AccountingDate;

            this.saveLast();

            if (this.skipDialogPrompt(args) || this.prompt())
            {
                ttsbegin;
                this.parmSysModule(SysModule::Ledger);
                this.initLedgerVoucher();

                this.reverseLedgerTrans();

                ledgerVoucher.end();
                this.postReversal();

                TransactionLog::create(TransactionLogType::TransactionReversal, "@SYS88953");
                ttscommit;

                info(revoke ? "@SYS78557" : "@SYS78558");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseLedgerTrans</Name>
				<Source><![CDATA[
    private void reverseLedgerTrans()
    {
        LedgerBondClient_RU          ledgerBondClient;
        TransLink_RU                 transLink;
        RefRecId                     reversalGroup;
        GeneralJournalAccountEntry_W generalJournalAccountEntryW;

        reversalGroup = TransLink_RU::findSec(ledgerTrans.TableId, ledgerTrans.RecId).ReversalGroup;
        if (reversalGroup)
        {
            select firstonly RefSec, Reversed from transLink
                where transLink.RefTableId    == ledgerTrans.TableId &&
                      transLink.ReversalGroup == reversalGroup       &&
                      transLink.Last          == true;

            select firstonly ledgerTrans
                where ledgerTrans.RecId == transLink.RefSec;
        }

        revoke = transLink.Reversed;

        select firstOnly generalJournalAccountEntryW
            where generalJournalAccountEntryW.GeneralJournalAccountEntry == ledgerTrans.RecId;

        ledgerTransOffset = generalJournalAccountEntryW.bondedLine_RU();

        if (ledgerTransOffset)
        {
            this.getReference(generalJournalEntry.SubledgerVoucher);
            this.setTransactionTxt(generalJournalEntry.AccountingDate, generalJournalEntry.SubledgerVoucher);

            ledgerVoucherObject = LedgerVoucherObject::newVoucher(reversalVoucher, reversalDate);
            ledgerVoucherObject.parmPostingLayer(generalJournalEntry.PostingLayer);
            ledgerVoucherObject.parmJournalCategory(generalJournalEntry.JournalCategory);
            ledgerVoucher.addVoucher(ledgerVoucherObject);

            this.createTransObject(ledgerTrans);

            ledgerBondClient = ledgerVoucher.findLedgerVoucherObject().ledgerBondClient_RU();

            this.createTransObject(ledgerTransOffset);

            if (ledgerBondClient)
            {
                ledgerBondClient.bondVRef2VRef(ledgerBondClient.lastVrefId(), ledgerBondClient.lastVrefId(-1));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs an instance of the <c>TransactionReversal_Ledger_RU</c> class.
    /// </summary>
    /// <returns>An instance of <c>TransactionReversal_Ledger_RU</c>.</returns>
    public static TransactionReversal_Ledger_RUExt construct()
    {
        TransactionReversal_Ledger_RUExt reversal = new TransactionReversal_Ledger_RUExt();

        return reversal;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>