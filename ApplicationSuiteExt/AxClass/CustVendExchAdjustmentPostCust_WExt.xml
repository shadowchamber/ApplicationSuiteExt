<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendExchAdjustmentPostCust_WExt</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>CustVendExchAdjustmentPostCust_W</c> class handles business logic for customers exchange adjustment posting.
/// </summary>
class CustVendExchAdjustmentPostCust_WExt extends CustVendExchAdjustmentPost_WExt
{
    Amount                          remainExchRateDiffLine;
    Amount                          remainStandardExchRateDiffLine;

    LedgerDimensionDefaultAccount   lineDefaultAccount;
    boolean                         invoicePostingInherited;
    boolean                         markedOpenLineExists;
    SpecTrans                       specTrans;
    Counter                         invoiceTransCount;
    Counter                         markupTransCount;
    AmountMST                       totalTaxAmount;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcFactor</Name>
				<Source><![CDATA[
    protected void calcFactor(AmountCur _lineAmountTotal, LedgerDimensionDefaultAccount _defaultAccount)
    {
        super(_lineAmountTotal, _defaultAccount);

        if (custVendExchAdjParm.inheritInvoicePosting() && !custVendInvoiceJour.CustVendInvoiceJour::getNonRealRevenue_RU())
        {
            lineDefaultAccount      = _defaultAccount;
            invoicePostingInherited = true;
        }
        else
        {
            if (!lineDefaultAccount)
            {
                lineDefaultAccount      = profitLossDefaultAccount;
                invoicePostingInherited = false;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDistributions</Name>
				<Source><![CDATA[
    private Enumerator getDistributions(
        DimensionDefault    _defaultDimension,
        Common              _invoiceLine,
        AmountCur           _amountCur,
        AmountCur           _secondAmountCur,
        AmountCur           _thirdAmountCur,
        CustVendTrans       _exchRateTrans,
        boolean             _postingToReporting)
    {
        CustVendTransExchAdjDistController_RU   distributionController  = CustVendTransExchAdjDistController_RU::construct();
        LedgerPostingType                       balancePosting          = custVendTrans.TableId == tableNum(VendTrans) ?
                                                    LedgerPostingType::VendBalance :
                                                    LedgerPostingType::CustBalance;
        LedgerDimensionDefaultAccount           summaryDefaultAccount   = _exchRateTrans.summaryLedgerDimension();
        LedgerDimensionAccount                  summaryLedgerDimension  = LedgerDimensionFacade::serviceCreateLedgerDimension(summaryDefaultAccount, _postingToReporting && _exchRateTrans.CustVendTrans::getCustVendTrans_W().DefaultDimensionReporting_RU ? _exchRateTrans.CustVendTrans::getCustVendTrans_W().DefaultDimensionReporting_RU : _exchRateTrans.DefaultDimension);
        distributionController.ledgerDimensionObtained += eventhandler(this.ledgerDimensionObtainedEventHandler);
        distributionController.parmDefaultOffsetLedgerDimension(
             LedgerDimensionFacade::serviceCreateLedgerDimension(lineDefaultAccount, custVendExchAdjParm.rTax25ExchAdjDimension().getDefaultDimension(_defaultDimension))
        );
        distributionController.parmSourceDocumentLine(TaxReverseTaxCustVendSettle_RU::sourceDocumentLine(_invoiceLine.TableId, _invoiceLine.RecId));
        distributionController.parmPreferNotDistributionForOffset(_invoiceLine.TableId == tableNum(MarkupTrans));
        return distributionController.generateDistributions(
            custVendTrans,
            balancePosting,
            _amountCur,
            _secondAmountCur,
            _thirdAmountCur,
            summaryLedgerDimension,
            false).getEnumerator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceLineIdRefCount</Name>
				<Source><![CDATA[
    private int getInvoiceLineIdRefCount(RefRecId _custTransOpenRecId, CustInvoiceLineType _custInvoiceLineType)
    {
        CustInvoiceLineIdRef    custInvoiceLineIdRef;
        CustTransOpenLine       custTransOpenLine;
        CustTransMarkedOpenLine custTransMarkedOpenLine;

        select count(RecId) from custInvoiceLineIdRef
            join TableId from custTransOpenLine
            join TableId from custTransMarkedOpenLine
            where custTransOpenLine.CustTransOpen           == _custTransOpenRecId
               && custTransMarkedOpenLine.CustTransOpenLine == custTransOpenLine.RecId
               && custInvoiceLineIdRef.RecId                == custTransOpenLine.CustInvoiceLineIdRef
               && custInvoiceLineIdRef.EntityType           == _custInvoiceLineType;

        return any2int(custInvoiceLineIdRef.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMarkedLineAmount</Name>
				<Source><![CDATA[
    private AmountCur getMarkedLineAmount(RefRecId _lineIdRefRecId)
    {
        CustTransMarkedOpenLine custTransMarkedOpenLine;
        CustTransOpenLine       custTransOpenLine;

        select sum(AmountToSettle), sum(CashDiscLineToTake) from custTransMarkedOpenLine
            join TableId from custTransOpenLine
            where custTransMarkedOpenLine.SpecTrans         == specTrans.RecId
               && custTransOpenLine.RecId                   == custTransMarkedOpenLine.CustTransOpenLine
               && custTransOpenLine.CustInvoiceLineIdRef    == _lineIdRefRecId;

        return custTransMarkedOpenLine.AmountToSettle + custTransMarkedOpenLine.CashDiscLineToTake;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPosting</Name>
				<Source><![CDATA[
    protected void initPosting(LedgerPostingType _posting, LedgerPostingType _standardPosting, Amount _exchRateDiff, Amount _standardExchRateDiff)
    {
        super(_posting, _standardPosting, -_exchRateDiff, -_standardExchRateDiff);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerDimensionObtainedEventHandler</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Overrides account to RTax25.
    /// </summary>
    /// <param name="_isOffset">
    ///     Is the LedgerDimensionAccount refers to offset.
    /// </param>
    /// <param name="_anyType">
    ///     Reference to LedgerDimensionAcount.
    /// </param>
    public void ledgerDimensionObtainedEventHandler(boolean _isOffset, SysAnyType _anyType)
    {
        LedgerDimensionAccount  ledgerDimension         = _anyType.value();
        DimensionDefault        ledgerDefaultDimension;
        if (! taxSpecPosting)
        {
            ledgerDefaultDimension = LedgerDimensionFacade::getDefaultDimensionFromLedgerDimension(ledgerDimension);
            ledgerDefaultDimension = custVendExchAdjParm.rTax25ExchAdjDimension().getDefaultDimension(ledgerDefaultDimension);
            _anyType.value(LedgerDimensionFacade::serviceCreateLedgerDimension(LedgerDefaultAccountHelper::getDefaultAccountFromLedgerDimension(ledgerDimension), ledgerDefaultDimension));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>post</Name>
				<Source><![CDATA[
    protected void post()
    {
        CustInvoiceTrans                custInvoiceTrans;

        CustTransOpen                   custTransOpen;
        AmountCur                       totalSettledAmount;
        AmountCur                       lineAmountTotal;

        super();

        remainExchRateDiffLine          = exchRateDiff;
        remainStandardExchRateDiffLine  = standardExchRateDiff;

        markupTransCount = -1;

        custTransOpen           = CustTransOpen::findRefId(custVendTrans.RecId);
        markedOpenLineExists    = custTransOpen && CustParameters::find().MarkOpenInvoiceLine && CustTransOpenLine::existByRefId(custTransOpen.RecId);
        if (markedOpenLineExists)
        {
            specTrans           = SpecTrans::findByRef(custTransOpen.company(), custTransOpen.TableId, custTransOpen.RecId);
            totalSettledAmount  = specTrans.Balance01;

            invoiceTransCount   = this.getInvoiceLineIdRefCount(custTransOpen.RecId, CustInvoiceLineType::Customer);
            if (!invoiceTransCount)
            {
                invoiceTransCount--;
                markupTransCount = this.getInvoiceLineIdRefCount(custTransOpen.RecId, CustInvoiceLineType::MarkupTrans);
            }
        }
        else
        {
            invoiceTransCount = any2int((select count(RecId) from custInvoiceTrans
                                            where custInvoiceTrans.SalesId             == custVendInvoiceJour.Num
                                               && custInvoiceTrans.InvoiceId           == custVendInvoiceJour.InvoiceId
                                               && custInvoiceTrans.InvoiceDate         == custVendInvoiceJour.InvoiceDate
                                               && custInvoiceTrans.NumberSequenceGroup == custVendInvoiceJour.NumberSequenceGroupId).RecId);
        }

        if (!totalSettledAmount)
        {
            totalSettledAmount = custVendInvoiceJour.InvoiceAmount + custVendInvoiceJour.EndDisc_RU + custVendInvoiceJour.RoundOff_W;
        }

        factor          = exchRateDiff / totalSettledAmount;
        standardFactor  = standardExchRateDiff / totalSettledAmount;

        this.postMarkup(custVendInvoiceJour.TableId, custVendInvoiceJour.RecId, custVendInvoiceJour.DefaultDimension);
        if (invoiceTransCount > 0)
        {
            while select forupdate custInvoiceTrans
                where custInvoiceTrans.SalesId             == custVendInvoiceJour.Num
                   && custInvoiceTrans.InvoiceId           == custVendInvoiceJour.InvoiceId
                   && custInvoiceTrans.InvoiceDate         == custVendInvoiceJour.InvoiceDate
                   && custInvoiceTrans.NumberSequenceGroup == custVendInvoiceJour.NumberSequenceGroupId
            {
                lineAmountTotal = markedOpenLineExists ? this.getMarkedLineAmount(custInvoiceTrans.CustInvoiceLineIdRef) : custInvoiceTrans.LineAmount + custInvoiceTrans.TaxAmount;
                if (lineAmountTotal)
                {
                    this.postMarkup(custInvoiceTrans.TableId, custInvoiceTrans.RecId, custInvoiceTrans.DefaultDimension);
                    this.calcFactor(lineAmountTotal, custInvoiceTrans.LedgerDimension);

                    this.postTaxes(
                        exchRateDiffLine,
                        standardExchRateDiffLine,
                        custInvoiceTrans.DefaultDimension,
                        custInvoiceTrans.TaxGroup,
                        custInvoiceTrans.TaxItemGroup,
                        custInvoiceTrans);
                }
            }
        }

        // adjust invoice jour
        if (!postToReporting && custVendExchAdjustment.parmIsFromSettlement() && ledgerTransType == LedgerTransType::AdvanceAdjustment_RU)
        {
            custVendAdvAdjustmentDocUpdate.updateCustVendInvoiceJour(custVendInvoiceJour, newExchRate, exchRateDiff, totalTaxAmount);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postMarkup</Name>
				<Source><![CDATA[
    private void postMarkup(RefTableId _tableId, RefRecId _recId, DimensionDefault _defaultDimension)
    {
        MarkupTrans markupTrans;
        AmountCur   lineAmountTotal;

        while select forupdate markupTrans
            where markupTrans.TransTableId  == _tableId
               && markupTrans.TransRecId    == _recId
               && markupTrans.CustVendPosted_RU
        {
            lineAmountTotal = markedOpenLineExists ? this.getMarkedLineAmount(markupTrans.CustInvoiceLineIdRef) : markupTrans.CustVendPosted_RU + markupTrans.TaxAmount;
            if (lineAmountTotal)
            {
                this.calcFactor(lineAmountTotal, markupTrans.markupTable().VendorLedgerDimension);

                this.postTaxes(
                    exchRateDiffLine,
                    standardExchRateDiffLine,
                    _defaultDimension,
                    markupTrans.TaxGroup,
                    markupTrans.TaxItemGroup,
                    markupTrans);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postTaxes</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Posts taxes for exchange adjustment.
    /// </summary>
    /// <param name="_exchRateDiffLine">
    ///    The amount of the exchange adjustment.
    /// </param>
    /// <param name="_standardExchRateDiffLine">
    ///    The amount of the standard exchange adjustment.
    /// </param>
    /// <param name="_defaultDimension">
    ///    The ID of a default dimension set to use.
    /// </param>
    /// <param name="_taxGroup">
    ///    The sales tax group used for tax calculations.
    /// </param>
    /// <param name="_taxItemGroup">
    ///    The item sales tax group used for tax calculations.
    /// </param>
    /// <param name="_invoiceLine">
    ///    An invoice record buffer that contains information from <c>MarkupTrans</c> or <c>CustInvoiceTrans</c> tables.
    /// </param>
    /// <param name="_taxModuleType">
    ///    The module for which calculating taxes are calculated.
    /// </param>
    protected void postTaxes(
        AmountMST               _exchRateDiffLine,
        AmountMST               _standardExchRateDiffLine,
        DimensionDefault        _defaultDimension,
        TaxGroup                _taxGroup,
        TaxItemGroup            _taxItemGroup,
        Common                  _invoiceLine,
        TaxModuleType           _taxModuleType = TaxModuleType::SalesInvoice)
    {
        Amount                  exchRateDiffLineExclTax;
        ExchAdjTaxableType_W    taxable;
        TaxExchDiff_RU          tax;
        TaxAmountCur            taxAmountCur;
        AmountMST               exchRateDiffPart;
        Set                     taxTransRecIDs;
        boolean                 isMarkup = _invoiceLine.TableId == tableNum(MarkupTrans);
        List                    targetTaxLedgerParmsList;
        Enumerator                              e;
        CustVendTransCorrespondentDistribution  distribution;
        AmountMST                               currentExchRateDiffLine;
        Amount                                  currentExchRateDiffLineExclTax;
        Amount                                  currentStandardExchRateDiffLine;
        DimensionDefault                        currentDefaultDimension;

        if (isMarkup)
        {
            markupTransCount--;
        }
        else
        {
            invoiceTransCount--;
        }

        if (!invoiceTransCount || !markupTransCount)
        {
            _exchRateDiffLine         = remainExchRateDiffLine;
            _standardExchRateDiffLine = remainStandardExchRateDiffLine;
        }

        exchRateDiffLineExclTax = _standardExchRateDiffLine;

        taxable = custVendExchAdjParm.taxable(standardPosting);
        if (taxable == ExchAdjTaxableType_W::Tax || taxable == ExchAdjTaxableType_W::Expense)
        {
            exchRateDiffLineExclTax = Tax::baseAmountExclTax(
                _taxGroup,
                _taxItemGroup,
                calculationDate,
                currencyCode,
                _standardExchRateDiffLine,
                _taxModuleType);

            e = this.getDistributions(_defaultDimension, _invoiceLine, exchRateDiffLineExclTax, _exchRateDiffLine, _standardExchRateDiffLine, exchRateTrans, postToReporting);
            while (e.moveNext())
            {
                distribution = e.current();
                currentExchRateDiffLineExclTax  = distribution.transactionAmount();
                currentExchRateDiffLine         = distribution.accountingAmount();
                currentStandardExchRateDiffLine = distribution.reportingAmount();
                currentDefaultDimension         = LedgerDimensionFacade::getDefaultDimensionFromLedgerDimension(distribution.offsetLedgerDimension());

                tax = new TaxExchDiff_RU(
                    ledgerVoucher.lastVoucher(),
                    ledgerVoucher.lastTransDate(),
                    '',
                    exchRateTrans,
                    0);

                tax.parmLedgerPostingType(CustVendExchAdjustment_W::getFinalPostingType(standardPosting, postingLogType));
                tax.parmCustVendExchAdjParm(custVendExchAdjParm);
                tax.parmVATAdjustment(isVATAdjustment);
                tax.parmPostToReportingCurrency(postToReporting);
                tax.parmSkipDistribution(true);

                tax.parmDimensionDefault(currentDefaultDimension);

                taxAmountCur = tax.taxCalcWithoutSource(
                    _taxGroup,
                    _taxItemGroup,
                    exchRateTrans.TransDate,
                    Ledger::accountingCurrency(),
                    currentExchRateDiffLineExclTax,
                    _taxModuleType,
                    0,
                    '',
                    '',
                    TaxDirection::OutgoingTax,
                    GSTHSTTaxType_CA::None,
                    calculationDate);

                if (CurrencyExchangeHelper::amount(currentExchRateDiffLineExclTax + taxAmountCur - currentStandardExchRateDiffLine, currencyCode))
                {
                    tax.adjustPennyDiff(CurrencyExchangeHelper::amount(currentExchRateDiffLineExclTax + taxAmountCur - currentStandardExchRateDiffLine, currencyCode));
                    taxAmountCur = CurrencyExchangeHelper::amount(currentStandardExchRateDiffLine - currentExchRateDiffLineExclTax, currencyCode);
                }

                ledgerVoucher.findLedgerVoucherObject().parmCorrection(custVendExchAdjustment.correctTax(standardPosting, exchRateTrans, taxAmountCur));

                exchRateDiffPart = (ledgerTransType == LedgerTransType::AdvanceAdjustment_RU  ?
                                    currentStandardExchRateDiffLine                                                       :
                                    currentExchRateDiffLine) - ((taxSpecPosting && taxable != ExchAdjTaxableType_W::Expense) ? 0 : taxAmountCur);

                custVendSettle.createLedgerTransSum_RU(
                    exchRateDiffPart,
                    posting,
                    invoicePostingInherited ?
                        LedgerDefaultAccountHelper::getDefaultAccountFromLedgerDimension(distribution.offsetLedgerDimension()):
                        lineDefaultAccount,

                    exchRateTrans,
                    true,
                    unrealized ? CustVendTransPostingLogType_RU::UnrealisedExchAdj : postingLogType,
                    null,
                    LedgerDimensionFacade::getDefaultDimensionFromLedgerDimension(distribution.offsetLedgerDimension()),
                    exchRateTrans.CurrencyCode,
                    ledgerVoucher,
                    custVendExchAdjustment.correct(posting, exchRateTrans, exchRateDiffPart, postToReporting),
                    0,
                    custVendTransDebet,
                    custVendTransCredit,
                    unrealized,
                    createUnrealizedPostingLog,
                    standardExchRateDiff,
                    _invoiceLine.TableId,
                    _invoiceLine.RecId,
                    invoicePostingInherited,
                    postToReporting,
                    distribution.ledgerDimension());

                if (ledgerBondClient)
                {
                    ledgerBondClient.addNewLogObject();
                }

                tax.saveAndPost(LedgerPostingController::newForLedgerPostingJournal(ledgerVoucher),
                                taxable == ExchAdjTaxableType_W::Tax);
                taxTransRecIDs              = tax.taxTransRecIDs();
                targetTaxLedgerParmsList    = tax.targetLedgerParmsList();

                if (! taxSpecPosting || taxable == ExchAdjTaxableType_W::Expense)
                {
                    custVendSettle.createLedgerTransSum_RU(
                        taxAmountCur,
                        standardPosting,
                        taxable == ExchAdjTaxableType_W::Expense ? custVendExchAdjParm.taxLedgerDimension(standardPosting, 0) : 0,
                        exchRateTrans,
                        false,
                        postingLogType,
                        taxTransRecIDs,
                        0,
                        exchRateTrans.CurrencyCode,
                        ledgerVoucher,
                        ledgerVoucher.findLedgerVoucherObject().parmCorrection(),
                        0,
                        custVendTransDebet,
                        custVendTransCredit,
                        unrealized,
                        false,
                        0,
                        _invoiceLine.TableId,
                        _invoiceLine.RecId,
                        invoicePostingInherited,
                        postToReporting,
                        distribution.ledgerDimension());

                    if (ledgerBondClient && ledgerBondClient.currentLogLength() > 0)
                    {
                        ledgerBondClient.bondLastVRef2CurrentLog();
                    }
                }
                else
                {
                    custVendSettle.createPostingTransLog_RU(
                        postingLogType,
                        exchRateTrans,
                        posting,
                        0,
                        0,
                        0,
                        0,
                        taxTransRecIDs,
                        0,
                        0,
                        custVendTrans,
                        custVendTrans.RecId == custVendTransCredit.RecId ? custVendTransDebet : custVendTransCredit,
                        0,
                        0,
                        exchRateTrans.Voucher,
                        exchRateTrans.TransDate,
                        ledgerVoucher.findLedgerVoucherObject().parmCorrection(),
                        exchRateTrans.DefaultDimension,
                        false,
                        _invoiceLine.TableId,
                        _invoiceLine.RecId);
                }

                if (targetTaxLedgerParmsList && (!taxTransRecIDs ||  taxTransRecIDs.empty()))
                {
                    this.createTaxPostingTransLog(targetTaxLedgerParmsList);
                }

                if (ledgerBondClient)
                {
                    ledgerBondClient.removeCurrentLogObject();
                }
            }
        }
        else
        {
            exchRateDiffPart = ledgerTransType == LedgerTransType::AdvanceAdjustment_RU ? _standardExchRateDiffLine : _exchRateDiffLine;

            custVendSettle.createLedgerTransSum_RU(exchRateDiffPart,
                                                    standardPosting,
                                                    lineDefaultAccount,
                                                    exchRateTrans,
                                                    true,
                                                    postingLogType,
                                                    null,
                                                    _defaultDimension,
                                                    exchRateTrans.CurrencyCode,
                                                    ledgerVoucher,
                                                    custVendExchAdjustment.correct(posting, exchRateTrans, exchRateDiffPart, false),
                                                    0,
                                                    custVendTransDebet,
                                                    custVendTransCredit,
                                                    unrealized,
                                                    createUnrealizedPostingLog,
                                                    standardExchRateDiff,
                                                    _invoiceLine.TableId,
                                                    _invoiceLine.RecId,
                                                    invoicePostingInherited,
                                                    postToReporting);
        }

        // adjust invoice lines
        if (!postToReporting && custVendExchAdjustment.parmIsFromSettlement() && ledgerTransType == LedgerTransType::AdvanceAdjustment_RU && _invoiceLine)
        {
            if (isMarkup)
            {
                custVendAdvAdjustmentDocUpdate.updateMarkupTrans(
                    exchRateTrans,
                    custVendTransDebet.RecId,
                    custVendTransCredit.RecId,
                    _invoiceLine,
                    newExchRate,
                    exchRateDiffLineExclTax,
                    taxAmountCur);
            }
            else
            {
                custVendAdvAdjustmentDocUpdate.updateCustVendInvoiceTrans(
                    exchRateTrans,
                    custVendTransDebet.RecId,
                    custVendTransCredit.RecId,
                    _invoiceLine,
                    newExchRate,
                    exchRateDiffLineExclTax,
                    taxAmountCur);
            }

            totalTaxAmount += taxAmountCur;
        }

        remainExchRateDiffLine          -= _exchRateDiffLine;
        remainStandardExchRateDiffLine  -= _standardExchRateDiffLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static CustVendExchAdjustmentPostCust_WExt construct()
    {
        return new CustVendExchAdjustmentPostCust_WExt();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>