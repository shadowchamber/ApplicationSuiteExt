<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendExchAdjustmentPostSpec_WExt</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>CustVendExchAdjustmentPostSpec_W</c> class handles business logic for exchange adjustment posting.
/// </summary>
class CustVendExchAdjustmentPostSpec_WExt extends CustVendExchAdjustmentPost_WExt
{
    LedgerDimensionDefaultAccount   sumDefaultAccount;
    LedgerPostingType               balancePosting;
    BankAdvancedTransType_RU        bankAdvancedTransType;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcTaxExchRateDiff</Name>
				<Source><![CDATA[
    private TaxAmount calcTaxExchRateDiff(
        Amount              _exchRateDiff,
        CustVendTrans       _custVendTrans,
        LedgerPostingType   _posting,
        CustVendTrans       _exchRateTrans)
    {
        Factor          convertFactor = 1;
        TaxExchDiff_RU  taxExchDiff;

        if (postToReporting && _custVendTrans.ReportingCurrencyAmount)
        {
            convertFactor = _exchRateDiff/_custVendTrans.ReportingCurrencyAmount;
        }
        else if (!postToReporting && _custVendTrans.AmountMST)
        {
            convertFactor = _exchRateDiff/_custVendTrans.AmountMST;
        }

        taxExchDiff = new TaxExchDiff_RU(
            ledgerVoucher.lastVoucher(),
            ledgerVoucher.lastTransDate(),
            '',
            _exchRateTrans,
            convertFactor);

        taxExchDiff.parmLedgerPostingType(_posting);
        taxExchDiff.parmCustVendExchAdjParm(custVendExchAdjParm);
        taxExchDiff.parmVATAdjustment(isVATAdjustment);
        taxExchDiff.parmPostToReportingCurrency(postToReporting);

        if (parentLedgerVoucher)
        {
            taxExchDiff.parmLedgerVoucherObject(parentLedgerVoucher.findLedgerVoucherObject(_custVendTrans.Voucher, _custVendTrans.TransDate));
        }

        return taxExchDiff.calcTaxAmount(_custVendTrans.Voucher, _custVendTrans.TransDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createExchAdjTrans</Name>
				<Source><![CDATA[
    private void createExchAdjTrans(
        Amount                  _amount,
        Amount                  _standardAmount,
        LedgerDimensionAccount  _summaryLedgerDimension,
        LedgerDimensionAccount  _offsetLedgerDimension
        )
    {
        LedgerVoucherTransObject    ledgerVoucherTransObject;
        AmountMST                   amount;
        AmountMST                   amountAccounting;
        AmountMST                   standardAmountAccounting;
        AmountMSTSecondary          amountReporting;
        AmountMSTSecondary          standardAmountReporting;
        LedgerPostingType           postingLedger;
        boolean                     correct;

        if (!_amount)
        {
            return;
        }

        amount                  = _amount;
        postingLedger           = posting;

        if ((!postToReporting && exchRateTrans.ExchAdjustmentRealized) ||
             (postToReporting && exchRateTrans.ReportingExchAdjustmentRealized))
        {
            if (ledgerTransType == LedgerTransType::AdvanceAdjustment_RU)
            {
                amount          = _standardAmount;
                postingLedger   = CustVendExchAdjustment_W::getFinalPostingType(posting, postingLogType);
            }
        }

        if (postToReporting)
        {
            amountAccounting            = 0;
            standardAmountAccounting    = 0;
            amountReporting             = amount;
            standardAmountReporting     = _standardAmount;
        }
        else
        {
            amountAccounting            = amount;
            standardAmountAccounting    = _standardAmount;
            amountReporting             = 0;
            standardAmountReporting     = 0;
        }

        ledgerVoucherObject = ledgerVoucher.findLedgerVoucherObject(ledgerVoucher.lastVoucher(), exchRateTrans.TransDate);
        if (!ledgerVoucherObject)
        {
            ledgerVoucherObject = LedgerVoucherObject::newVoucher(
                ledgerVoucher.lastVoucher(),
                exchRateTrans.TransDate,
                ledgerVoucher.parmSysModuleDefault(),
                ledgerTransType);

            ledgerVoucher.addVoucher(ledgerVoucherObject);
        }

        if (bankAdvancedTransType == BankAdvancedTransType_RU::CurrBuy || bankAdvancedTransType == BankAdvancedTransType_RU::CurrSell)
        {
            ledgerVoucherObject.parmTransactionTypeDefault(LedgerTransType::GainLossCurrencyDeal_RU);
        }

        LedgerDimensionAccount summaryLedgerDimension =
            LedgerDimensionFacade::serviceCreateLedgerDimension(
                LedgerDefaultAccountHelper::getDefaultAccountFromLedgerDimension(_summaryLedgerDimension),
                custVendExchAdjParm.rTax25ExchAdjDimension().getDefaultDimension(
                    LedgerDimensionFacade::getDefaultDimensionFromLedgerDimension(_summaryLedgerDimension)));

        LedgerDimensionAccount offsetLedgerDimension  =
            LedgerDimensionFacade::serviceCreateLedgerDimension(
                LedgerDefaultAccountHelper::getDefaultAccountFromLedgerDimension(_offsetLedgerDimension),
                custVendExchAdjParm.rTax25ExchAdjDimension().getDefaultDimension(
                    LedgerDimensionFacade::getDefaultDimensionFromLedgerDimension(_offsetLedgerDimension)));

        ledgerVoucherTransObject  = LedgerVoucherTransObject::newAdjustmentDefault(
            ledgerVoucherObject,
            postingLedger,
            offsetLedgerDimension,
            custVendTrans.CurrencyCode,
            -amountAccounting,
            -amountReporting);

        correct = custVendExchAdjustment.correct(posting, exchRateTrans, amount, postToReporting);

        ledgerVoucherTransObject.parmCorrect(correct);

        ledgerVoucher.addTrans(ledgerVoucherTransObject);

        ledgerVoucherTransObject = LedgerVoucherTransObject::newAdjustmentDefault(
            ledgerVoucherObject,
            (postingLogType == CustVendTransPostingLogType_RU::ExchAdjustment       ||
             postingLogType == CustVendTransPostingLogType_RU::AdvanceAdjustment    ||
             postingLogType == CustVendTransPostingLogType_RU::GainLossCurrencyDeal) ? balancePosting : postingLedger,
            summaryLedgerDimension,
            custVendTrans.CurrencyCode,
            amountAccounting,
            amountReporting);

        ledgerVoucherTransObject.parmCorrect(correct);
        ledgerVoucher.addTrans(ledgerVoucherTransObject);

        if (ledgerBondClient)
        {
            ledgerBondClient.bondLast2();
        }

        if (!unrealized || createUnrealizedPostingLog)
        {
            custVendSettle.createPostingTransLog_RU(
                unrealized ? CustVendTransPostingLogType_RU::UnrealisedExchAdj : postingLogType,
                exchRateTrans,
                postingLedger,
                LedgerDefaultAccountHelper::getDefaultAccountFromLedgerDimension(offsetLedgerDimension),
                LedgerDefaultAccountHelper::getDefaultAccountFromLedgerDimension(summaryLedgerDimension),
                -amountAccounting,
                -amountReporting,
                null,
                LedgerDimensionFacade::getDefaultDimensionFromLedgerDimension(offsetLedgerDimension),
                0,
                custVendTrans,
                custVendTrans.RecId == custVendTransCredit.RecId ? custVendTransDebet : custVendTransCredit,
                (unrealized && createUnrealizedPostingLog) ? -standardAmountAccounting : 0,
                (unrealized && createUnrealizedPostingLog) ? -standardAmountReporting  : 0,
                exchRateTrans.Voucher,
                exchRateTrans.TransDate,
                correct,
                LedgerDimensionFacade::getDefaultDimensionFromLedgerDimension(summaryLedgerDimension)
            );
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillTaxTransDefaultDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Fills and returns temporary table holding distribution of tax amount
    /// between <c>TaxTrans</c> table record and <c>DefaultDimension</c>.
    /// </summary>
    /// <returns>
    ///   Filled table.
    /// </returns>
    /// <remarks>
    ///   The result is need to distrubute tax to tax transactions and bond it
    /// to the exhchange adjustment distributed according to document subledger.
    /// </remarks>
    protected TmpTaxTransDefaultDimension_RU fillTaxTransDefaultDimensions()
    {
        TmpTaxTransDefaultDimension_RU ret;
        ret.fillFromVoucher(custVendTrans.Voucher, custVendTrans.TransDate, TaxOrigin::Tax, 0, 0);
        ret.fillFromLedgerVoucherObject(ledgerVoucher.findLedgerVoucherObject(custVendTrans.Voucher, custVendTrans.TransDate));
        if ((!postToReporting && exchRateTrans.ExchAdjustmentRealized) ||
             (postToReporting && exchRateTrans.ReportingExchAdjustmentRealized))
        {
            ret.applyRTax25Dimension(custVendExchAdjParm.rTax25ExchAdjDimension());
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDistributions</Name>
				<Source><![CDATA[
    private Enumerator getDistributions(Amount _amountCur, Amount _accountingAmount)
    {
        CustVendTransExchAdjDistController_RU distributionController = CustVendTransExchAdjDistController_RU::construct();
        distributionController.parmUseGeneralJournal(true);
        distributionController.parmLedgerVoucherObject(ledgerVoucher.findLedgerVoucherObject(custVendTrans.Voucher, custVendTrans.TransDate));

        if (custVendTrans.TableId == tableNum(VendTrans))
        {
            distributionController.parmIgnoreMonetaryAmount(true);
        }

        distributionController.ledgerDimensionObtained += eventhandler(this.ledgerDimensionObtainedEventHandler);
        distributionController.parmDefaultOffsetLedgerDimension(
             LedgerDimensionFacade::serviceCreateLedgerDimension(profitLossDefaultAccount, custVendTrans.DefaultDimension)
        );

        return distributionController.generateDistributions(
            custVendTrans,
            balancePosting,
            _amountCur,
            _accountingAmount,
            0,
            LedgerDimensionFacade::serviceCreateLedgerDimension(sumDefaultAccount, custVendTrans.DefaultDimension),
            forceSingleDistribution && this.parmPostingSpec() != TransactionSelect::Transaction).getEnumerator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCustVendExchAdjustment</Name>
				<Source><![CDATA[
    protected void initFromCustVendExchAdjustment(CustVendExchAdjustment_WExt _custVendExchAdjustment, boolean _unrealized, CustVendTrans _custVendTrans, CustVendTrans _exchRateTrans, boolean _forceSingleDistribution, CustVendTrans _custVendTransDebet, CustVendTrans _custVendTransCredit, boolean _createUnrealizedPostingLog)
    {
        super(
            _custVendExchAdjustment,
            _unrealized,
            _custVendTrans,
            _exchRateTrans,
            _forceSingleDistribution,
            _custVendTransDebet,
            _custVendTransCredit,
            _createUnrealizedPostingLog);

        sumDefaultAccount       = exchRateTrans.summaryLedgerDimension();
        bankAdvancedTransType   = custVendExchAdjustment.parmBankAdvancedTransType();

        if (bankAdvancedTransType == BankAdvancedTransType_RU::CurrBuy || bankAdvancedTransType == BankAdvancedTransType_RU::CurrSell)
        {
            postingLogType = CustVendTransPostingLogType_RU::GainLossCurrencyDeal;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerDimensionObtainedEventHandler</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Overrides account to profitLoss if _isOffset, dimension to RTax25
    /// </summary>
    /// <param name="_isOffset">
    ///  is the LedgerDimensionAccount refers to offset
    /// </param>
    /// <param name="_anyType">
    ///    reference to LedgerDimensionAcount
    /// </param>
    public void ledgerDimensionObtainedEventHandler(boolean _isOffset, SysAnyType _anyType)
    {
        LedgerDimensionAccount  ledgerDimension         = _anyType.value();
        DimensionDefault        ledgerDefaultDimension;

        if ((!postToReporting && exchRateTrans.ExchAdjustmentRealized) ||
             (postToReporting && exchRateTrans.ReportingExchAdjustmentRealized))
        {
            ledgerDefaultDimension = forceSingleDistribution ?
                custVendTrans.DefaultDimension : LedgerDimensionFacade::getDefaultDimensionFromLedgerDimension(ledgerDimension);
            ledgerDefaultDimension = custVendExchAdjParm.rTax25ExchAdjDimension().getDefaultDimension(ledgerDefaultDimension);
            _anyType.value(LedgerDimensionFacade::serviceCreateLedgerDimension(_isOffset ? profitLossDefaultAccount : postingSpec == TransactionSelect::Selection ? sumDefaultAccount : LedgerDefaultAccountHelper::getDefaultAccountFromLedgerDimension(ledgerDimension), ledgerDefaultDimension));
        }
        else
        {
            if (_isOffset)
            {
                _anyType.value(LedgerDimensionFacade::serviceCreateLedgerDimension(profitLossDefaultAccount, forceSingleDistribution ? custVendTrans.DefaultDimension : LedgerDimensionFacade::getDefaultDimensionFromLedgerDimension(ledgerDimension)));
            }
            else if (postingSpec == TransactionSelect::Selection)
            {
                 _anyType.value(LedgerDimensionFacade::serviceCreateLedgerDimension(sumDefaultAccount, forceSingleDistribution ? custVendTrans.DefaultDimension : LedgerDimensionFacade::getDefaultDimensionFromLedgerDimension(ledgerDimension)));
            }
            else if (forceSingleDistribution)
            {
                _anyType.value(LedgerDimensionFacade::serviceCreateLedgerDimension(LedgerDefaultAccountHelper::getDefaultAccountFromLedgerDimension(ledgerDimension), forceSingleDistribution ? custVendTrans.DefaultDimension : LedgerDimensionFacade::getDefaultDimensionFromLedgerDimension(ledgerDimension)));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>post</Name>
				<Source><![CDATA[
    public void post()
    {
        Amount                                  locExchRateDiff            = exchRateDiff;
        Amount                                  locStandardExchRateDiff    = standardExchRateDiff;
        Enumerator                              le;
        CustVendTransCorrespondentDistribution  distribution;
        TaxAmount                               taxAmount;

        Set                                     taxTransRecIDs;
        ExchAdjTaxableType_W                    taxable;
        LedgerPostingType                       postingTaxable;
        List                                    targetTaxLedgerParmsList;
        Amount                                  currentExchRateDiff;
        Amount                                  currentStandardExchRateDiff;
        TmpTaxTransDefaultDimension_RU          taxTransDefaultDimensions;

        super();

        postingTaxable  = ledgerTransType == LedgerTransType::AdvanceAdjustment_RU && ! unrealized ?
                                        CustVendExchAdjustment_W::getFinalPostingType(standardPosting, CustVendTransPostingLogType_RU::AdvanceAdjustment) :
                                        standardPosting;

        // post taxes
        taxable = custVendExchAdjParm.taxable(standardPosting);
        if (taxable == ExchAdjTaxableType_W::Tax || taxable == ExchAdjTaxableType_W::Expense)
        {
            ledgerVoucher.findLedgerVoucherObject().parmCorrection(
                custVendExchAdjustment.correctTax(
                    standardPosting,
                    exchRateTrans,
                    this.calcTaxExchRateDiff(
                        custVendSettle.amount(standardExchRateDiff),
                        custVendTrans,
                        postingTaxable,
                        exchRateTrans)));
        }

        taxTransDefaultDimensions = this.fillTaxTransDefaultDimensions();

        balancePosting = custVendSettle.getLedgerPostingType_Balance();
        le = this.getDistributions(exchRateDiff, standardExchRateDiff);

        while (le.moveNext())
        {
            distribution = le.current();
            currentExchRateDiff             = distribution.transactionAmount();
            currentStandardExchRateDiff     = distribution.accountingAmount();

            locExchRateDiff            = currentExchRateDiff;
            locStandardExchRateDiff    = currentStandardExchRateDiff;

            if (ledgerBondClient)
            {
                ledgerBondClient.addNewLogObject();
            }

            taxAmount = custVendSettle.calcAndPostTaxExchRateDiff_RU(
                custVendSettle.amount(standardExchRateDiff),
                custVendTrans,
                postingTaxable,
                exchRateTrans,
                ledgerVoucher,
                isVATAdjustment,
                postToReporting,
                LedgerDimensionFacade::getDefaultDimensionFromLedgerDimension(distribution.offsetLedgerDimension()),
                true,
                taxTransDefaultDimensions
                );

            taxTransRecIDs              = custVendSettle.taxTransRecIDs_RU();
            targetTaxLedgerParmsList    = custVendSettle.targetTaxLedgerParmsList_RU();

            if (custVendTrans.TableId == tableNum(VendTrans))
            {
                taxAmount       = -taxAmount;
                balancePosting  = LedgerPostingType::VendBalance;
            }
            else
            {
                if (taxSpecPosting && taxable != ExchAdjTaxableType_W::Expense)
                {
                    taxAmount = 0;
                }

                balancePosting = LedgerPostingType::CustBalance;
            }

            locExchRateDiff            += currentExchRateDiff ? custVendSettle.amount(taxAmount) : 0;
            locStandardExchRateDiff    += custVendSettle.amount(taxAmount);

            this.createExchAdjTrans(
                locExchRateDiff,
                locStandardExchRateDiff,
                distribution.ledgerDimension(),
                distribution.offsetLedgerDimension()
            );

            if (taxAmount)
            {
                custVendSettle.createLedgerTransSum_RU(
                    taxAmount,
                    standardPosting,
                    taxable == ExchAdjTaxableType_W::Expense ? custVendExchAdjParm.taxLedgerDimension(standardPosting, 0) : 0,
                    exchRateTrans,
                    false,
                    postingLogType,
                    taxTransRecIDs,
                    LedgerDimensionFacade::getDefaultDimensionFromLedgerDimension(distribution.offsetLedgerDimension()),
                    exchRateTrans.CurrencyCode,
                    ledgerVoucher,
                    ledgerVoucher.findLedgerVoucherObject().parmCorrection(),
                    0,
                    custVendTrans,
                    custVendTrans.RecId == custVendTransCredit.RecId ? custVendTransDebet : custVendTransCredit,
                    unrealized,
                    false,
                    0,
                    0,
                    0,
                    false,
                    postToReporting,
                    distribution.ledgerDimension());

                if (ledgerBondClient)
                {
                    ledgerBondClient.bondLastVRef2CurrentLog();
                }

                if (! exchRateDiff)
                {
                    exchRateDiffLineTotal           = -CurrencyExchangeHelper::amount(taxAmount);
                    standardExchRateDiffLineTotal   = taxAmount;
                }
            }
            else if (taxTransRecIDs && ! taxTransRecIDs.empty() && !unrealized)
            {
                custVendSettle.createPostingTransLog_RU(
                    postingLogType,
                    exchRateTrans,
                    standardPosting,
                    0,
                    0,
                    0,
                    0,
                    taxTransRecIDs,
                    0,
                    0,
                    custVendTrans,
                    custVendTrans.RecId == custVendTransCredit.RecId ? custVendTransDebet : custVendTransCredit,
                    0,
                    0,
                    exchRateTrans.Voucher,
                    exchRateTrans.TransDate,
                    ledgerVoucher.findLedgerVoucherObject().parmCorrection());
            }

            if (targetTaxLedgerParmsList && (!taxTransRecIDs ||  taxTransRecIDs.empty()) && !unrealized)
            {
                this.createTaxPostingTransLog(targetTaxLedgerParmsList);
            }
            if (ledgerBondClient)
            {
                ledgerBondClient.removeCurrentLogObject();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static CustVendExchAdjustmentPostSpec_WExt construct()
    {
        return new CustVendExchAdjustmentPostSpec_WExt();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>