<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankPaymAdviceReportGeneratorExt</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///  Generates the report data for the <c>BankPaymAdviceVend</c> and <c>BankPaymAdviceCust</c> reports.
/// </summary>
public abstract class BankPaymAdviceReportGeneratorExt
{
    protected const Timezone GMT = Timezone::GMT_DUBLIN_EDINBURGH_LISBON_LONDON;

    protected BankPaymAdviceTmpMapExt bankPaymAdviceTmp;
    protected CompanyInfo companyInfo;
    protected LogisticsAddressing companyAddress;
    protected LedgerJournalTrans ledgerJournalTrans;
    protected int currentSessionId;
    protected str grouping;

    private Phone companyPhone;
    private TeleFax companyTeleFax;
    private Bitmap companyImage;
    private NoYes isReportV2Enabled = FeatureExt::isFeatureEnabled('Dynamics.AX.Application.BankPaymAdviceReportV2Feature'); // AutoSendVendPaymAdviceFeatureExposureBWFASVPA::isEnabled();
    private guid executionContext;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>deleteReportData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the data for the report.
    /// </summary>
    public void deleteReportData()
    {
        try
        {
            delete_from bankPaymAdviceTmp
                where ((bankPaymAdviceTmp.SessionId == currentSessionId)
                    || (bankPaymAdviceTmp.DateOfCreation < DateTimeUtil::getToday(GMT) - 2));
        }
        catch
        {
            // If cleanup fails for any given pass, rely on the DateofCreation stamp to eventually clear orphaned records.
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateReportData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the business logic for the report.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    /// A payment record.
    /// </param>
    public void generateReportData(LedgerJournalTrans _ledgerJournalTrans)
    {
        ledgerJournalTrans = _ledgerJournalTrans;

        this.initCompanyInfo();

        this.findRecipient(_ledgerJournalTrans);
        this.findGrouping();
        this.findInvoicesAndCreateData();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCompanyInfo</Name>
				<Source><![CDATA[
    private void initCompanyInfo()
    {
        companyInfo = CompanyInfo::find();
        companyAddress = companyInfo.postalAddress().Address;
        companyPhone = companyInfo.phone();
        companyTeleFax = companyInfo.teleFax();
        companyImage = CompanyImage::find(companyInfo.dataAreaId, tableNum(CompanyInfo), companyInfo.RecId).Image;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecipient</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find the payment recipient.
    /// </summary>
    /// <param name = "_ledgerJournalTrans">The payment record.</param>
    protected abstract void findRecipient(ledgerJournalTrans _ledgerJournalTrans)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>findGrouping</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find the report grouping.
    /// </summary>
    protected abstract void findGrouping()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>findInvoicesAndCreateData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find invoices related to the payment and insert the report information.
    /// </summary>
    protected abstract void findInvoicesAndCreateData()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertBankPaymAdviceTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates <c>BankPaymAdviceVendTmp</c> and inserts the report information for a single invoice and related payment.
    /// </summary>
    protected void insertBankPaymAdviceTmp()
    {
        this.populateBankPaymAdviceVendTemp();
        bankPaymAdviceTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateBankPaymAdviceVendTemp</Name>
				<Source><![CDATA[
    private void populateBankPaymAdviceVendTemp()
    {
        this.populateBankPaymAdviceTempCommonInfo();
        this.populateBankPaymAdviceTempPaymentInfo();
        this.populateBankPaymAdviceTempInvoiceInfo();
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateBankPaymAdviceTempCommonInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Popualtes <c>BankPaymAdviceTmp</c> with report information that is independent of invoices and payment.
    /// </summary>
    protected void populateBankPaymAdviceTempCommonInfo()
    {
        bankPaymAdviceTmp.CompanyPhone = companyPhone;
        bankPaymAdviceTmp.CompanyTeleFax = companyTeleFax;
        bankPaymAdviceTmp.CompanyGiro = companyInfo.Giro;
        bankPaymAdviceTmp.CompanyCoRegNum = companyInfo.CoRegNum;
        bankPaymAdviceTmp.PaymAdviceDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        bankPaymAdviceTmp.DateOfCreation = DateTimeUtil::getToday(GMT);
        bankPaymAdviceTmp.SessionId = currentSessionId;
        bankPaymAdviceTmp.Grouping = grouping;

        if (isReportV2Enabled)
        {
            bankPaymAdviceTmp.setExecutionContext(executionContext);
        }
        else
        {
            bankPaymAdviceTmp.Image = companyImage;

            if (companyImage)
            {
                bankPaymAdviceTmp.PrintImage = NoYesCombo::Yes;
            }
            else
            {
                bankPaymAdviceTmp.PrintImage = NoYesCombo::No;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateBankPaymAdviceTempPaymentInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates <c>bankPaymAdviceTmp</c> with the payment information.
    /// </summary>
    protected abstract void populateBankPaymAdviceTempPaymentInfo()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateBankPaymAdviceTempInvoiceInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates <c>bankPaymAdviceTmp</c> with the invoice information.
    /// </summary>
    protected abstract void populateBankPaymAdviceTempInvoiceInfo()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymentCurrencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the payment currency code.
    /// </summary>
    /// <returns>The payment currency code.</returns>
    protected CurrencyCode getPaymentCurrencyCode()
    {
        return ledgerJournalTrans.displayCurrencyCode();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateAmountInPaymentCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates an amount in the payment currency.
    /// </summary>
    /// <param name = "_exchangeDate">The date of the exchange rate.</param>
    /// <param name = "_invoiceCurrency">The invoice currency.</param>
    /// <param name = "_invoiceAmount">The invoice amount.</param>
    /// <returns>The invoice amount in the payment currency.</returns>
    protected Amount calculateAmountInPaymentCurrency(TransDate _exchangeDate, CurrencyCode _invoiceCurrency, Amount _invoiceAmount)
    {
        CurrencyExchangeHelper currencyHelper = CurrencyExchangeHelper::newExchangeDate(Ledger::current(), _exchangeDate);

        return currencyHelper.calculateCurrencyToCurrency(_invoiceCurrency, this.getPaymentCurrencyCode(), _invoiceAmount, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymRefLabel</Name>
				<Source><![CDATA[
    /// <summary>
    /// The payment reference label.
    /// </summary>
    /// <returns>The payment reference label.</returns>
    protected str getPaymRefLabel()
    {
        str paymRefLabel = '';

        if (ledgerJournalTrans.BankChequeNum)
        {
            paymRefLabel = "@SYS22495";
        }

        return paymRefLabel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymRef</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the payment reference.
    /// </summary>
    /// <returns>The payment reference.</returns>
    protected str getPaymRef()
    {
        str paymRef = ledgerJournalTrans.PaymReference;

        if (ledgerJournalTrans.BankChequeNum)
        {
            paymRef = ledgerJournalTrans.BankChequeNum;
        }

        return paymRef;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExecutionContext</Name>
				<Source><![CDATA[
    internal guid parmExecutionContext(guid _executionContext = executionContext)
    {
        executionContext = _executionContext;
        return executionContext;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankPaymAdviceTmp</Name>
				<Source><![CDATA[
    internal BankPaymAdviceTmpMapExt getBankPaymAdviceTmp()
    {
        return bankPaymAdviceTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        currentSessionId = new xSession().sessionId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newForJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a <c>BankPaymAdviceReportGenerator</c> instance.
    /// </summary>
    /// <param name = "_ledgerJournalId">The payment journal identification.</param>
    /// <returns>The correct <c>BankPaymAdviceReportGenerator</c> instance. </returns>
    public static BankPaymAdviceReportGeneratorExt newForJournal(LedgerJournalId _ledgerJournalId)
    {
        BankPaymAdviceReportGeneratorExt bankPaymAdviceReportGenerator;

        LedgerJournalTable ledgerJournalTable;
        select firstonly ledgerJournalTable
            where ledgerJournalTable.JournalNum == _ledgerJournalId;

        switch (ledgerJournalTable.JournalType)
        {
            case LedgerJournalType::Payment:
            case LedgerJournalType::VendPromissoryNoteDraw:
                if (ledgerJournalTable.Posted)
                {
                    bankPaymAdviceReportGenerator = new BankPaymAdviceReportGeneratorVendPostedExt();
                }
                else
                {
                    bankPaymAdviceReportGenerator = new BankPaymAdviceReportGeneratorVendExt();
                }
                break;
            case LedgerJournalType::VendPromissoryNoteRedraw:
                bankPaymAdviceReportGenerator = new BankPaymAdviceReportGeneratorVendPromissoryNoteReDrawExt();
                break;
            case LedgerJournalType::CustPayment:
            case LedgerJournalType::CustBillOfExchangeDraw:
                if (ledgerJournalTable.Posted)
                {
                    bankPaymAdviceReportGenerator = new BankPaymAdviceReportGeneratorCustPostedExt();
                }
                else
                {
                    bankPaymAdviceReportGenerator = new BankPaymAdviceReportGeneratorCustExt();
                }
                break;
            default:
                throw error(error::wrongUseOfFunction(classstr(BankPaymAdviceReportGeneratorVend)));
        }

        return bankPaymAdviceReportGenerator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findIntercompanyRelatedPaymentVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the related intercompany voucher for a given payment that has a ledger journal transaction.
    /// </summary>
    /// <returns>The related voucher for the given ledger journal transaction.</returns>
    protected Voucher findIntercompanyRelatedPaymentVoucher()
    {
        LedgerTransVoucherLink voucherLink;
        Voucher voucher;

        RecId voucherGroupId = LedgerTransVoucherLink::findVoucherGroupId(
            ledgerJournalTrans.Voucher,
            ledgerJournalTrans.TransDate,
            curExt());

        while select crosscompany voucherLink
            where voucherLink.VoucherGroupId == voucherGroupId
                && (voucherLink.Voucher != ledgerJournalTrans.Voucher
                    || voucherLink.TransDate != ledgerJournalTrans.TransDate
                    || voucherLink.DataAreaId != curExt())
        {
            changecompany(voucherLink.company())
            {
                LedgerJournalTrans ledgerJournalTransLinkVoucher = LedgerJournalTrans::findJournalForVoucher(voucherLink.Voucher, voucherLink.TransDate);

                if (ledgerJournalTransLinkVoucher)
                {
                    voucher = ledgerJournalTransLinkVoucher.Voucher;
                    break;
                }
            }
        }

        return voucher;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>