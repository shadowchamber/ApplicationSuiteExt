<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendExchAdjustmentPostVend_WExt</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>CustVendExchAdjustmentPostVend_W</c> class handles business logic for exchange adjustment posting.
/// </summary>
class CustVendExchAdjustmentPostVend_WExt extends CustVendExchAdjustmentPost_WExt
{
    Amount              diffTotalAmount, standardDiffTotalAmount;
    Amount              taxTotalAmount;
    VendInvoiceTrans    vendInvoiceTrans;
    boolean             adjustInSecCur;
    boolean             isStockedInvoiceTrans;
    LedgerVoucherObject vendLedgerVoucherObject;
    LedgerVoucherObject inventLedgerVoucherObject;
    boolean             usePurchConsumpAccount;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>adjustInventory</Name>
				<Source><![CDATA[
    private void adjustInventory(Common _invoiceLine, boolean _lastLine)
    {
        Amount                          amount;
        InventAdjustPostMSTCur_RU       inventAdjustPost;
        InventAdjustPostSecCur_RU       inventAdjustPostSecCur;
        LedgerPostingType               operationsPostingType;
        LedgerDimensionDefaultAccount   operationDefaultAccount;
        LedgerDimensionDefaultAccount   summaryLedgerDimensionAccount;
        VendInvoiceJour                 vendInvoiceJourLoc      = custVendInvoiceJour;

        if (!InventClosing::checkOpen(custVendTrans.TransDate))
        {
            throw error("@SYS18447");
        }

        if (!exchRateDiff)
        {
            return;
        }

        amount = ledgerTransType == LedgerTransType::AdvanceAdjustment_RU ? standardExchRateDiffLine : exchRateDiffLine;

        if ((exchRateDiffLine || standardExchRateDiffLine) && isStockedInvoiceTrans)
        {
            if (usePurchConsumpAccount)
            {
                operationsPostingType           = LedgerPostingType::PurchConsump;
                operationDefaultAccount         = this.purchConsumpDefaultAccount(vendInvoiceTrans);
                summaryLedgerDimensionAccount   = exchRateTrans.summaryLedgerDimension();
            }
            else
            {
                operationsPostingType   = LedgerPostingType::VendBalance;
                operationDefaultAccount = exchRateTrans.summaryLedgerDimension();
            }

            custVendSettle.inventSumAdjustOnAmountDiff_RU(
                vendInvoiceTrans,
                postToReporting ? 0 : amount,
                postToReporting ? amount : 0,
                ledgerVoucher.lastVoucher(),
                vendInvoiceJourLoc.CostLedgerVoucher,
                operationsPostingType,
                operationDefaultAccount,
                ledgerVoucher);
        }

        if (_lastLine)
        {
            if (postToReporting)
            {
                inventAdjustPostSecCur = new InventAdjustPostSecCur_RU(
                    ledgerVoucher.lastVoucher(),
                    max(custVendExchAdjustment.parmTransactionDate(), vendInvoiceTrans.InventDate),
                    InventAdjustmentSpec::ItemNum,
                    LedgerTransTxt::VendAmountDiffVend_RU,
                    custVendExchAdjustment.correct(posting, exchRateTrans, amount, postToReporting));

                inventAdjustPostSecCur.parmCurrencyCode(custVendTrans.CurrencyCode);
                inventAdjustPostSecCur.parmDefaultDimension(custVendTrans.DefaultDimension);

                inventAdjustPostSecCur.updateNow(ledgerVoucher);
            }
            else
            {
                inventAdjustPost = new InventAdjustPostMSTCur_RU(
                    ledgerVoucher.lastVoucher(),
                    max(custVendExchAdjustment.parmTransactionDate(), vendInvoiceTrans.InventDate),
                    InventAdjustmentSpec::ItemNum,
                    LedgerTransTxt::VendAmountDiffVend_RU,
                    custVendExchAdjustment.correct(posting, exchRateTrans, amount, postToReporting));

                inventAdjustPost.parmRTax25Profit(custVendExchAdjParm.rTax25ExchAdjDimension());
                inventAdjustPost.parmCurrencyCode(custVendTrans.CurrencyCode);
                inventAdjustPost.parmLedgerTransType_RU(ledgerTransType);
                inventAdjustPost.parmDefaultDimension(custVendTrans.DefaultDimension);

                inventAdjustPost.updateNow(ledgerVoucher);
            }
        }

        if (usePurchConsumpAccount)
            return;

        custVendSettle.createPostingTransLog_RU(
            postingLogType,
            exchRateTrans,
            posting,
            0,
            0,
            postToReporting ? 0 : -amount,
            postToReporting ? -amount : 0,
            null,
            0,
            0,
            custVendTransDebet,
            custVendTransCredit,
            0,
            0,
            exchRateTrans.Voucher,
            exchRateTrans.TransDate,
            custVendExchAdjustment.correct(posting, exchRateTrans, amount, postToReporting),
            exchRateTrans.DefaultDimension,
            false,
            _invoiceLine.TableId,
            _invoiceLine.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInventoryLedgerVoucherObject</Name>
				<Source><![CDATA[
    private LedgerVoucherObject createInventoryLedgerVoucherObject(TransDate _transDate)
    {
        LedgerVoucherObject inventoryLedgerVoucherObject;
        Voucher             voucher = NumberSeq::newGetVoucherFromCode(ledgerVoucher.parmVoucherSeriesCode()).voucher();

        inventoryLedgerVoucherObject = LedgerVoucherObject::newVoucher(voucher,
                                                                       _transDate,
                                                                       ledgerVoucher.parmSysModuleDefault(),
                                                                       ledgerVoucher.findLedgerVoucherObject().parmTransactionTypeDefault());
        ledgerVoucher.addVoucher(inventoryLedgerVoucherObject);

        return inventoryLedgerVoucherObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDistributions</Name>
				<Source><![CDATA[
    private Enumerator getDistributions(
        DimensionDefault    _defaultDimension,
        Common              _invoiceLine,
        AmountCur           _amountCur,
        AmountCur           _secondAmountCur,
        AmountCur           _thirdAmountCur,
        CustVendTrans       _exchRateTrans,
        boolean             _postingToReporting)
    {
        CustVendTransExchAdjDistController_RU   distributionController  = CustVendTransExchAdjDistController_RU::construct();
        LedgerPostingType                       balancePosting          = custVendTrans.TableId == tableNum(VendTrans) ?
                                                    LedgerPostingType::VendBalance :
                                                    LedgerPostingType::CustBalance;
        LedgerDimensionDefaultAccount           summaryDefaultAccount   = _exchRateTrans.summaryLedgerDimension();
        LedgerDimensionAccount                  summaryLedgerDimension  = LedgerDimensionFacade::serviceCreateLedgerDimension(summaryDefaultAccount, _postingToReporting && _exchRateTrans.CustVendTrans::getCustVendTrans_W().DefaultDimensionReporting_RU ? _exchRateTrans.CustVendTrans::getCustVendTrans_W().DefaultDimensionReporting_RU : _exchRateTrans.DefaultDimension);
        distributionController.ledgerDimensionObtained += eventhandler(this.ledgerDimensionObtainedEventHandler);
        distributionController.parmDefaultOffsetLedgerDimension(
             LedgerDimensionFacade::serviceCreateLedgerDimension(summaryDefaultAccount, custVendExchAdjParm.rTax25ExchAdjDimension().getDefaultDimension(_defaultDimension))
        );
        distributionController.parmSourceDocumentLine(TaxReverseTaxCustVendSettle_RU::sourceDocumentLine(_invoiceLine.TableId, _invoiceLine.RecId));
        distributionController.parmPreferNotDistributionForOffset(_invoiceLine.TableId == tableNum(MarkupTrans));
        return distributionController.generateDistributions(
            custVendTrans,
            balancePosting,
            _amountCur,
            _secondAmountCur,
            _thirdAmountCur,
            summaryLedgerDimension,
            false).getEnumerator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPosting</Name>
				<Source><![CDATA[
    protected void initPosting(LedgerPostingType _posting, LedgerPostingType _standardPosting, Amount _exchRateDiff, Amount _standardExchRateDiff)
    {
        super(_posting, _standardPosting, _exchRateDiff, _standardExchRateDiff);

        diffTotalAmount         = 0;
        standardDiffTotalAmount = 0;
        taxTotalAmount          = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerDimensionObtainedEventHandler</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Overrides account to profitLoss if _isOffset, dimension to RTax25.
    /// </summary>
    /// <param name="_isOffset">
    ///     Is the LedgerDimensionAccount refers to offset.
    /// </param>
    /// <param name="_anyType">
    ///     Reference to LedgerDimensionAcount.
    /// </param>
    public void ledgerDimensionObtainedEventHandler(boolean _isOffset, SysAnyType _anyType)
    {
        LedgerDimensionAccount  ledgerDimension         = _anyType.value();
        DimensionDefault        ledgerDefaultDimension;
        ledgerDefaultDimension = LedgerDimensionFacade::getDefaultDimensionFromLedgerDimension(ledgerDimension);
        ledgerDefaultDimension = custVendExchAdjParm.rTax25ExchAdjDimension().getDefaultDimension(ledgerDefaultDimension);
        _anyType.value(LedgerDimensionFacade::serviceCreateLedgerDimension(LedgerDefaultAccountHelper::getDefaultAccountFromLedgerDimension(ledgerDimension), ledgerDefaultDimension));
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        usePurchConsumpAccount  = VendParameters::find().UsePurchConsumpAccount_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>post</Name>
				<Source><![CDATA[
    public void post()
    {
        Counter                 maxCount, recCount;
        AmountCur               totalSettledAmount;
        LedgerTransType         custVendTransType;
        LedgerDimensionAccount  ledgerDimensionAccount;

        super();

        select count(RecId), sum(LineAmountMST_W), sum(TaxAmountMST_W) from vendInvoiceTrans
            where vendInvoiceTrans.PurchID             == custVendInvoiceJour.Num
               && vendInvoiceTrans.InvoiceId           == custVendInvoiceJour.InvoiceId
               && vendInvoiceTrans.InvoiceDate         == custVendInvoiceJour.InvoiceDate
               && vendInvoiceTrans.NumberSequenceGroup == custVendInvoiceJour.NumberSequenceGroupId
               && vendInvoiceTrans.InternalInvoiceId   == custVendInvoiceJour.PurchInternalInvoiceId_RU;

        maxCount = any2int(vendInvoiceTrans.RecId);

        totalSettledAmount = custVendInvoiceJour.InvoiceAmount + custVendInvoiceJour.EndDisc_RU + custVendInvoiceJour.RoundOff_W;

        if (totalSettledAmount)
        {
            factor          = exchRateDiff / totalSettledAmount;
            standardFactor  = standardExchRateDiff / totalSettledAmount;
        }
        else
        {
            factor          = 1;
            standardFactor  = 1;
        }

        this.postMarkup(custVendInvoiceJour.TableId, custVendInvoiceJour.RecId, custVendInvoiceJour.DefaultDimension);

        while select forupdate vendInvoiceTrans order by StockedProduct
            where vendInvoiceTrans.PurchID             == custVendInvoiceJour.Num
               && vendInvoiceTrans.InvoiceId           == custVendInvoiceJour.InvoiceId
               && vendInvoiceTrans.InvoiceDate         == custVendInvoiceJour.InvoiceDate
               && vendInvoiceTrans.NumberSequenceGroup == custVendInvoiceJour.NumberSequenceGroupId
               && vendInvoiceTrans.InternalInvoiceId   == custVendInvoiceJour.PurchInternalInvoiceId_RU
        {
            isStockedInvoiceTrans   = vendInvoiceTrans.isStocked();
            adjustInSecCur          = postToReporting && isStockedInvoiceTrans && vendInvoiceTrans.inventTable().modelGroup().PostOnhandFinancialSecCur_RU;

            this.postMarkup(vendInvoiceTrans.TableId, vendInvoiceTrans.RecId, vendInvoiceTrans.DefaultDimension);
            this.calcFactor(vendInvoiceTrans.LineAmount + vendInvoiceTrans.TaxAmount, vendInvoiceTrans.DefaultDimension);

            recCount++;

            if (recCount >= maxCount)
            {
                exchRateDiffLine         += exchRateDiff         - diffTotalAmount         - exchRateDiffLine;
                standardExchRateDiffLine += standardExchRateDiff - standardDiffTotalAmount - standardExchRateDiffLine;
            }

            this.postTaxes(
                - exchRateDiffLine,
                - standardExchRateDiffLine,
                vendInvoiceTrans.DefaultDimension,
                vendInvoiceTrans.TaxGroup,
                vendInvoiceTrans.TaxItemGroup,
                vendInvoiceTrans);

            diffTotalAmount         += CurrencyExchangeHelper::amount(exchRateDiffLine);
            standardDiffTotalAmount += CurrencyExchangeHelper::amount(standardExchRateDiffLine);

            if (exchRateDiff)
            {
                if (custVendExchAdjParm.inheritInvoicePosting() && custVendTrans.AmountMST > 0)
                {
                    custVendTransType = custVendTrans.TransType;
                    if (custVendTransType == LedgerTransType::Purch && (!isStockedInvoiceTrans || (postToReporting && !adjustInSecCur)))
                    {
                        custVendTransType = LedgerTransType::None;
                    }

                    switch (custVendTransType)
                    {
                        case LedgerTransType::Purch:
                            if (usePurchConsumpAccount)
                            {
                                this.switchToInventVoucher();
                            }
                            this.adjustInventory(vendInvoiceTrans, recCount >= maxCount);
                            if (usePurchConsumpAccount)
                            {
                                this.switchBackToVendVoucher();
                                this.postDiffLine(ledgerTransType == LedgerTransType::AdvanceAdjustment_RU ? standardExchRateDiffLine : exchRateDiffLine,
                                                  vendInvoiceTrans.DefaultDimension,
                                                  false,
                                                  vendInvoiceTrans,
                                                  this.purchConsumpDefaultAccount(vendInvoiceTrans),
                                                  LedgerPostingType::PurchConsump,
                                                  inventLedgerVoucherObject.parmVoucher(),
                                                  inventLedgerVoucherObject.parmTransDate());
                            }
                            // Continue posting to ledger for reporting currency
                            if (!postToReporting)
                            {
                                break;
                            }

                        case LedgerTransType::None:
                        case LedgerTransType::Vend:

                            if (vendInvoiceTrans.LedgerDimension)
                            {
                                ledgerDimensionAccount = vendInvoiceTrans.LedgerDimension;
                            }
                            else
                            {
                                ledgerDimensionAccount = profitLossDefaultAccount;
                            }

                            if (vendInvoiceTrans.InventTransId && postingLogType == CustVendTransPostingLogType_RU::AdvanceAdjustment && postToReporting)
                            {
                                ledgerDimensionAccount = InventTrans::findTransId(vendInvoiceTrans.InventTransId).inventTransPostingFinancial().LedgerDimension;
                            }

                            this.postDiffLine(
                                ledgerTransType == LedgerTransType::AdvanceAdjustment_RU ? standardExchRateDiffLine : exchRateDiffLine,
                                vendInvoiceTrans.DefaultDimension,
                                true,
                                vendInvoiceTrans,
                                ledgerDimensionAccount);
                            break;

                        default :
                            throw error("@GLS101280");
                    }
                }
                else
                {
                     this.postDiffLine(ledgerTransType == LedgerTransType::AdvanceAdjustment_RU ? standardExchRateDiffLine : exchRateDiffLine, vendInvoiceTrans.DefaultDimension, false, vendInvoiceTrans);
                }
            }
            else
            {
                exchRateDiffLineTotal         += exchRateDiffLine;
                standardExchRateDiffLineTotal += standardExchRateDiffLine;
            }
        }

        exchRateDiffLineTotal = ledgerTransType == LedgerTransType::AdvanceAdjustment_RU ? standardExchRateDiffLineTotal : exchRateDiffLineTotal;

        // adjust invoice jour
        if (!postToReporting && custVendExchAdjustment.parmIsFromSettlement() && ledgerTransType == LedgerTransType::AdvanceAdjustment_RU)
        {
            custVendAdvAdjustmentDocUpdate.updateCustVendInvoiceJour(custVendInvoiceJour, newExchRate);
            custVendAdvAdjustmentDocUpdate.updateFactureJour(custVendTransDebet.RecId, custVendTransCredit.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postDiffLine</Name>
				<Source><![CDATA[
    private void postDiffLine(
        Amount                          _exchRateDiffLine,
        DimensionDefault                _defaultDimension,
        boolean                         _invoicePostingInherited,
        Common                          _invoiceLine,
        LedgerDimensionDefaultAccount   _lineDefaultAccount  = profitLossDefaultAccount,
        LedgerPostingType               _posting             = posting,
        Voucher                         _inventVoucher       = '',
        TransDate                       _inventDate          = dateNull())
    {
        custVendSettle.createLedgerTransSum_RU(
            _exchRateDiffLine,
            _posting,
            _lineDefaultAccount,
            exchRateTrans,
            true,
            unrealized ? CustVendTransPostingLogType_RU::UnrealisedExchAdj : postingLogType,
            null,
            _defaultDimension,
            exchRateTrans.CurrencyCode,
            ledgerVoucher,
            custVendExchAdjustment.correct(posting, exchRateTrans, _exchRateDiffLine, postToReporting),
            0,
            custVendTransDebet,
            custVendTransCredit,
            unrealized,
            createUnrealizedPostingLog,
            standardExchRateDiff,
            _invoiceLine.TableId,
            _invoiceLine.RecId,
            _invoicePostingInherited,
            postToReporting,
            0,
            _inventVoucher,
            _inventDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postMarkup</Name>
				<Source><![CDATA[
    private void postMarkup (RefTableId _tableId, RefRecId _recId, DimensionDefault _defaultDimension)
    {
        MarkupTrans markupTrans;

        while select forupdate markupTrans
            where markupTrans.TransTableId  == _tableId
               && markupTrans.TransRecId    == _recId
               && markupTrans.CustVendPosted_RU
        {
            this.calcFactor(markupTrans.CustVendPosted_RU + markupTrans.TaxAmountVAT_RU, 0);

            this.postTaxes(
                - exchRateDiffLine,
                - standardExchRateDiffLine,
                _defaultDimension,
                markupTrans.TaxGroup,
                markupTrans.TaxItemGroup,
                markupTrans);

            diffTotalAmount         += CurrencyExchangeHelper::amount(exchRateDiffLine);
            standardDiffTotalAmount += CurrencyExchangeHelper::amount(standardExchRateDiffLine);

            if (exchRateDiff)
            {
                if (custVendExchAdjParm.inheritInvoicePosting() && custVendTrans.AmountMST > 0)
                {
                    if (markupTrans.markupTable().CustType == MarkupType::Item && isStockedInvoiceTrans && (!postToReporting || adjustInSecCur))
                    {
                        if (usePurchConsumpAccount)
                        {
                            this.switchToInventVoucher();
                        }
                        this.adjustInventory(markupTrans, false);
                        if (usePurchConsumpAccount)
                        {
                            this.switchBackToVendVoucher();
                            this.postDiffLine(ledgerTransType == LedgerTransType::AdvanceAdjustment_RU ? standardExchRateDiffLine : exchRateDiffLine,
                                                _defaultDimension,
                                                false,
                                                markupTrans,
                                                this.purchConsumpDefaultAccount(vendInvoiceTrans),
                                                LedgerPostingType::PurchConsump,
                                                inventLedgerVoucherObject.parmVoucher(),
                                                inventLedgerVoucherObject.parmTransDate());
                        }
                    }
                    else
                    {
                        this.postDiffLine(
                            ledgerTransType == LedgerTransType::AdvanceAdjustment_RU ? standardExchRateDiffLine : exchRateDiffLine,
                            _defaultDimension,
                            true,
                            markupTrans,
                            markupTrans.markupTable().CustomerLedgerDimension);
                    }
                }
                else
                {
                    this.postDiffLine(
                        ledgerTransType == LedgerTransType::AdvanceAdjustment_RU ? standardExchRateDiffLine : exchRateDiffLine,
                        _defaultDimension,
                        false,
                        markupTrans,
                        profitLossDefaultAccount);
                }
            }
            else
            {
                exchRateDiffLineTotal         += exchRateDiffLine;
                standardExchRateDiffLineTotal += standardExchRateDiffLine;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postTaxes</Name>
				<Source><![CDATA[
    private void postTaxes(
        AmountMST           _exchRateDiffLine,
        AmountMST           _standardExchRateDiffLine,
        DimensionDefault    _defaultDimension,
        TaxGroup            _taxGroup,
        TaxItemGroup        _taxItemGroup,
        Common              _invoiceLine)
    {
        Amount                  exchRateDiffLineExclTax = _standardExchRateDiffLine;
        ExchAdjTaxableType_W    taxable;
        TaxExchDiff_RU          tax;
        TaxAmountCur            taxAmountCur;
        Set                     taxTransRecIDs;
        List                    targetTaxLedgerParmsList;
        Enumerator                              e;
        CustVendTransCorrespondentDistribution  distribution;
        AmountMST                               currentExchRateDiffLine;
        Amount                                  currentExchRateDiffLineExclTax;
        Amount                                  currentStandardExchRateDiffLine;

        taxable = custVendExchAdjParm.taxable(standardPosting);
        if (taxable == ExchAdjTaxableType_W::Tax || taxable == ExchAdjTaxableType_W::Expense)
        {
            exchRateDiffLineExclTax = Tax::baseAmountExclTax(
                _taxGroup,
                _taxItemGroup,
                calculationDate,
                currencyCode,
                _standardExchRateDiffLine,
                TaxModuleType::Purch);

            e = this.getDistributions(_defaultDimension, _invoiceLine, exchRateDiffLineExclTax, _exchRateDiffLine, _standardExchRateDiffLine, exchRateTrans, postToReporting);
            while (e.moveNext())
            {
                distribution = e.current();
                currentExchRateDiffLineExclTax  = distribution.transactionAmount();
                currentExchRateDiffLine         = distribution.accountingAmount();
                currentStandardExchRateDiffLine = distribution.reportingAmount();
                tax = new TaxExchDiff_RU(
                    ledgerVoucher.lastVoucher(),
                    ledgerVoucher.lastTransDate(),
                    '',
                    exchRateTrans,
                    0);

                tax.parmLedgerPostingType(CustVendExchAdjustment_W::getFinalPostingType(standardPosting, postingLogType));
                tax.parmCustVendExchAdjParm(custVendExchAdjParm);
                tax.parmVATAdjustment(isVATAdjustment);
                tax.parmPostToReportingCurrency(postToReporting);
                tax.parmDimensionDefault(LedgerDimensionFacade::getDefaultDimensionFromLedgerDimension(distribution.offsetLedgerDimension()));
                tax.parmSkipDistribution(true);

                taxAmountCur = tax.taxCalcWithoutSource(
                    _taxGroup,
                    _taxItemGroup,
                    exchRateTrans.TransDate,
                    Ledger::accountingCurrency(),
                    currentExchRateDiffLineExclTax,
                    TaxModuleType::Purch,
                    0,
                    '',
                    '',
                    TaxDirection::OutgoingTax,
                    GSTHSTTaxType_CA::None,
                    calculationDate);

                if (CurrencyExchangeHelper::amount(currentExchRateDiffLineExclTax + taxAmountCur - currentExchRateDiffLine, currencyCode))
                {
                    tax.adjustPennyDiff(CurrencyExchangeHelper::amount(currentExchRateDiffLineExclTax + taxAmountCur - currentStandardExchRateDiffLine, currencyCode));
                    taxAmountCur = CurrencyExchangeHelper::amount(currentStandardExchRateDiffLine - currentExchRateDiffLineExclTax, currencyCode);
                }

                ledgerVoucher.findLedgerVoucherObject().parmCorrection(custVendExchAdjustment.correctTax(standardPosting, exchRateTrans, taxAmountCur));

                if (ledgerBondClient)
                {
                    ledgerBondClient.addNewLogObject();
                }

                tax.saveAndPost(LedgerPostingController::newForLedgerPostingJournal(ledgerVoucher), taxable == ExchAdjTaxableType_W::Tax);
                taxTransRecIDs              = tax.taxTransRecIDs();
                targetTaxLedgerParmsList    = tax.targetLedgerParmsList();

                custVendSettle.createLedgerTransSum_RU(
                    -taxAmountCur,
                    standardPosting,
                    taxable == ExchAdjTaxableType_W::Expense ? custVendExchAdjParm.taxLedgerDimension(standardPosting, 0) : 0,
                    exchRateTrans,
                    false,
                    postingLogType,
                    taxTransRecIDs,
                    _defaultDimension,
                    exchRateTrans.CurrencyCode,
                    ledgerVoucher,
                    ledgerVoucher.findLedgerVoucherObject().parmCorrection(),
                    0,
                    custVendTransDebet,
                    custVendTransCredit,
                    unrealized,
                    false,
                    0,
                    _invoiceLine.TableId,
                    _invoiceLine.RecId,
                    false,
                    postToReporting,
                    distribution.ledgerDimension()
                    );

                if (targetTaxLedgerParmsList && (!taxTransRecIDs ||  taxTransRecIDs.empty()))
                {
                    this.createTaxPostingTransLog(targetTaxLedgerParmsList);
                }

                diffTotalAmount          -= taxAmountCur;
                standardDiffTotalAmount  -= taxAmountCur;
                exchRateDiffLine         += taxAmountCur;
                standardExchRateDiffLine += taxAmountCur;
                taxTotalAmount           -= taxAmountCur;

                if (ledgerBondClient)
                {
                    if (ledgerBondClient.currentLogLength() > 0)
                    {
                        ledgerBondClient.bondLastVRef2CurrentLog();
                    }

                    ledgerBondClient.removeCurrentLogObject();
                }
            }
        }

        // adjust invoice lines
        if (!postToReporting && custVendExchAdjustment.parmIsFromSettlement() && ledgerTransType == LedgerTransType::AdvanceAdjustment_RU && _invoiceLine)
        {
            if (_invoiceLine.TableId == tableNum(MarkupTrans))
            {
                custVendAdvAdjustmentDocUpdate.updateMarkupTrans(
                    exchRateTrans,
                    custVendTransDebet.RecId,
                    custVendTransCredit.RecId,
                    _invoiceLine,
                    newExchRate,
                    exchRateDiffLineExclTax,
                    taxAmountCur);
            }
            else
            {
                custVendAdvAdjustmentDocUpdate.updateCustVendInvoiceTrans(
                    exchRateTrans,
                    custVendTransDebet.RecId,
                    custVendTransCredit.RecId,
                    _invoiceLine,
                    newExchRate,
                    exchRateDiffLineExclTax,
                    taxAmountCur);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchConsumpDefaultAccount</Name>
				<Source><![CDATA[
    private LedgerDimensionAccount purchConsumpDefaultAccount(vendInvoiceTrans _vendInvoiceTrans)
    {
        return InventPosting::itemLedgerDimensionFromParameter(this.buildItemLedgerDimensionParameter(_vendInvoiceTrans));
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildItemLedgerDimensionParameter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a parameter for searching an inventory posting ledger dimension for an item.
    /// </summary>
    /// <param name="_vendInvoiceTrans">The posted vendor invoice line.</param>
    /// <returns>The built parameter instance.</returns>
    protected InventPostingItemLedgerDimensionParameters buildItemLedgerDimensionParameter(vendInvoiceTrans _vendInvoiceTrans)
    {
        InventPostingItemLedgerDimensionParameters searchParameters = InventPostingItemLedgerDimensionParameters::newFromParameters(
            InventAccountType::PurchConsump,
            _vendInvoiceTrans.ItemId);

        searchParameters.InventDim_RU = _vendInvoiceTrans.inventDim();

        return searchParameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>switchBackToVendVoucher</Name>
				<Source><![CDATA[
    private void switchBackToVendVoucher()
    {
        ledgerVoucher.lastVoucher(vendLedgerVoucherObject.parmVoucher());
        ledgerVoucher.lastTransDate(vendLedgerVoucherObject.parmTransDate());
        ledgerVoucher.findLedgerVoucherObject();
    }

]]></Source>
			</Method>
			<Method>
				<Name>switchToInventVoucher</Name>
				<Source><![CDATA[
    private void switchToInventVoucher()
    {
        if (!inventLedgerVoucherObject)
        {
            vendLedgerVoucherObject   = ledgerVoucher.findLedgerVoucherObject();
            inventLedgerVoucherObject = this.createinventoryLedgerVoucherObject(
                max(custVendExchAdjustment.parmTransactionDate(), vendInvoiceTrans.InventDate));
        }
        ledgerVoucher.lastVoucher(inventLedgerVoucherObject.parmVoucher());
        ledgerVoucher.lastTransDate(inventLedgerVoucherObject.parmTransDate());
        ledgerVoucher.findLedgerVoucherObject();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static CustVendExchAdjustmentPostVend_WExt construct()
    {
        return new CustVendExchAdjustmentPostVend_WExt();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>