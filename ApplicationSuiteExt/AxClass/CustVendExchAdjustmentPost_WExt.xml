<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendExchAdjustmentPost_WExt</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>CustVendExchAdjustmentPost_W</c> class handles business logic for exchange adjustment posting.
/// </summary>
class CustVendExchAdjustmentPost_WExt
{
    LedgerVoucherObject             ledgerVoucherObject;
    LedgerPostingType               posting;
    LedgerPostingType               standardPosting;
    Amount                          exchRateDiff;
    Amount                          standardExchRateDiff;
    boolean                         postToReporting;

    CustVendTrans                   exchRateTrans;
    boolean                         unrealized;
    CustVendTrans                   custVendTrans;
    CustVendTransPostingLogType_RU  postingLogType;
    LedgerDimensionDefaultAccount   profitLossDefaultAccount;
    LedgerBondClient_RU             ledgerBondClient;
    boolean                         createUnrealizedPostingLog;
    CustVendTrans                   custVendTransDebet;
    CustVendTrans                   custVendTransCredit;

    CustVendExchAdjustment_WExt     custVendExchAdjustment;
    CustVendExchAdjParm_W           custVendExchAdjParm;
    LedgerVoucher                   ledgerVoucher;
    CustVendSettle                  custVendSettle;
    LedgerTransType                 ledgerTransType;
    LedgerVoucher                   parentLedgerVoucher;
    boolean                         isVATAdjustment;
    boolean                         forceSingleDistribution;
    TransDate                       calculationDate;
    boolean                         taxSpecPosting;

    CustVendAdvAdjustmentDocUpdate_W custVendAdvAdjustmentDocUpdate;
    CustVendInvoiceJour             custVendInvoiceJour;
    Factor                          factor;
    Factor                          standardFactor;
    Amount                          exchRateDiffLine;
    Amount                          standardExchRateDiffLine;
    CurrencyCode                    currencyCode;
    ExchRate                        newExchRate;
    Amount                          exchRateDiffLineTotal;
    Amount                          standardExchRateDiffLineTotal;
    TransactionSelect               postingSpec;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcFactor</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs a calculation the amounts of exchange adjustment.
    /// </summary>
    /// <param name="_lineAmountTotal">
    ///    Line amount total value.
    /// </param>
    /// <param name="_defaultAccount">
    ///    The ledger account value.
    /// </param>
    protected void calcFactor(AmountMST _lineAmountTotal, LedgerDimensionDefaultAccount _defaultAccount)
    {
        exchRateDiffLine            = CurrencyExchangeHelper::amount(_lineAmountTotal * factor, currencyCode);
        standardExchRateDiffLine    = CurrencyExchangeHelper::amount(_lineAmountTotal * standardFactor, currencyCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTaxPostingTransLog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates records in transaction log for exchange adjustment taxes.
    /// </summary>
    /// <param name="_targetTaxLedgerParmsList">
    ///    A list of parameters used for creating of transaction log.
    /// </param>
    protected void createTaxPostingTransLog(List _targetTaxLedgerParmsList)
    {
        ListEnumerator                  le;
        AmountMST                       taxAmountAccounting;
        AmountMSTSecondary              taxAmountReporting;
        TaxBase                         taxBaseAmountReporting;
        LedgerDimensionDefaultAccount   defaultAccount;
        LedgerDimensionDefaultAccount   offsetDefaultAccount;
        boolean                         correction;
        TaxCode                         taxCode;
        CustVendTransPostingLog_RU      postingLog;

        if (_targetTaxLedgerParmsList)
        {
            correction  = ledgerVoucher.findLedgerVoucherObject().parmCorrection();
            le          = _targetTaxLedgerParmsList.getEnumerator();
            while (le.moveNext())
            {
                [taxAmountAccounting, taxAmountReporting, defaultAccount, offsetDefaultAccount, taxCode, taxBaseAmountReporting] = le.current();

                ttsbegin;
                postingLog = custVendSettle.createPostingTransLog_RU(
                    postingLogType,
                    exchRateTrans,
                    LedgerPostingType::Tax,
                    defaultAccount,
                    offsetDefaultAccount,
                    taxAmountAccounting,
                    taxAmountReporting,
                    null,
                    0,
                    0,
                    custVendTrans,
                    custVendTrans.RecId == custVendTransCredit.RecId ? custVendTransDebet : custVendTransCredit,
                    0,
                    0,
                    exchRateTrans.Voucher,
                    exchRateTrans.TransDate,
                    correction,
                    0,
                    false,
                    0,
                    0,
                    true);

                postingLog.TaxCode                  = taxCode;
                postingLog.TaxBaseAmountReporting   = taxBaseAmountReporting;
                postingLog.update();
                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRateDiffLineTotal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the total amount of exchange adjustment.
    /// </summary>
    /// <returns>
    ///    The total amount of the exchange adjustment.
    /// </returns>
    public Amount exchRateDiffLineTotal()
    {
        return exchRateDiffLineTotal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCustVendExchAdjustment</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the <c>CustVendExchAdjustmentPost_W</c> class from the <c>CustVendExchAdjustment_W</c> class and parameters.
    /// </summary>
    /// <param name="_custVendExchAdjustment">
    ///    The instance of the <c>CustVendExchAdjustment_W</c> class.
    /// </param>
    /// <param name="_unrealized">
    ///    true if an unrealized exchange adjustment; otherwise, false a realized exchange adjustment.
    /// </param>
    /// <param name="_custVendTrans">
    ///    The transaction record being adjusted.
    /// </param>
    /// <param name="_exchRateTrans">
    ///    The CustVendTrans record used to create the transaction.
    /// </param>
    /// <param name="_forceSingleDistribution">
    ///    The CustVendTrans record used to create the transaction.
    /// </param>
    /// <param name="_custVendTransDebet">
    ///    The CustVendTrans payment buffer passed in.
    /// </param>
    /// <param name="_custVendTransCredit">
    ///    The CustVendTrans payment buffer passed in.
    /// </param>
    /// <param name="_createUnrealizedPostingLog">
    ///    Indiates whether or not to create postin log for unrealized exchange adjustment.
    /// </param>
    protected void initFromCustVendExchAdjustment(
        CustVendExchAdjustment_WExt _custVendExchAdjustment,
        boolean                     _unrealized,
        CustVendTrans               _custVendTrans,
        CustVendTrans               _exchRateTrans,
        boolean                     _forceSingleDistribution,
        CustVendTrans               _custVendTransDebet,
        CustVendTrans               _custVendTransCredit,
        boolean                     _createUnrealizedPostingLog)
    {
        LedgerVoucherObject ledgerVoucherObjectLoc;

        custVendExchAdjustment      = _custVendExchAdjustment;
        unrealized                  = _unrealized;
        custVendTrans               = _custVendTrans;
        exchRateTrans               = _exchRateTrans;
        forceSingleDistribution     = _forceSingleDistribution;
        custVendTransDebet          = _custVendTransDebet;
        custVendTransCredit         = _custVendTransCredit;
        createUnrealizedPostingLog  = _createUnrealizedPostingLog;

        custVendExchAdjParm         = custVendExchAdjustment.custVendExchAdjParm();
        ledgerVoucher               = custVendExchAdjustment.parmLedgerVoucher();
        custVendSettle              = custVendExchAdjustment.parmCustVendSettle();
        parentLedgerVoucher         = custVendExchAdjustment.parmParentLedgerVoucher();
        ledgerTransType             = custVendExchAdjustment.ledgerTransType(unrealized);

        if (ledgerTransType == LedgerTransType::AdvanceAdjustment_RU)
        {
            postingLogType = CustVendTransPostingLogType_RU::AdvanceAdjustment;
        }
        else
        {
            postingLogType = CustVendTransPostingLogType_RU::ExchAdjustment;
        }

        isVATAdjustment = custVendExchAdjustment.isVATAdjustment(unrealized, custVendTransDebet, custVendTransCredit);

        if (ledgerVoucher)
        {
            ledgerVoucherObjectLoc = ledgerVoucher.findLedgerVoucherObject(ledgerVoucher.lastVoucher(), exchRateTrans.TransDate);
        }

        if (ledgerVoucherObjectLoc)
        {
            ledgerBondClient = ledgerVoucherObjectLoc.ledgerBondClient_RU();
        }

        if (ledgerTransType == LedgerTransType::AdvanceAdjustment_RU)
        {
            custVendAdvAdjustmentDocUpdate = CustVendAdvAdjustmentDocUpdate_W::newFromSettlement(custVendExchAdjustment.parmTransactionDate());
        }

        calculationDate     = max(custVendTransDebet.TransDate, custVendTransCredit.TransDate);
        taxSpecPosting      = TaxParameters::find().TaxSpecPosting_RU;
        custVendInvoiceJour = CustVendTransData::construct(custVendTrans).custVendInvoiceJour_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPosting</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initiates internal class variables for exchange adjustment posting.
    /// </summary>
    /// <param name="_posting">
    ///    The ledger posting type of a transaction.
    /// </param>
    /// <param name="_standardPosting">
    ///    The standard ledger posting type of a transaction.
    /// </param>
    /// <param name="_exchRateDiff">
    ///    The amount of the exchange adjustment.
    /// </param>
    /// <param name="_standardExchRateDiff">
    ///    The amount of the standard exchange adjustment.
    /// </param>
    protected void initPosting(
        LedgerPostingType   _posting,
        LedgerPostingType   _standardPosting,
        Amount              _exchRateDiff,
        Amount              _standardExchRateDiff)
    {
        profitLossDefaultAccount    = custVendExchAdjParm.ledgerDimension(_posting);
        posting                     = _posting;
        standardPosting             = _standardPosting;
        exchRateDiff                = _exchRateDiff;
        standardExchRateDiff        = _standardExchRateDiff;
        currencyCode                = postToReporting ? Ledger::reportingCurrency() : Ledger::accountingCurrency();

        if (!postToReporting)
        {
            newExchRate = custVendInvoiceJour.InvoiceAmount ? ((custVendInvoiceJour.InvoiceAmountMST_RU -
                            (ledgerTransType == LedgerTransType::AdvanceAdjustment_RU ? standardExchRateDiff : exchRateDiff))/ custVendInvoiceJour.InvoiceAmount * 100) : 100;
        }

        exchRateDiffLineTotal           = 0;
        standardExchRateDiffLineTotal   = 0;

        custVendExchAdjParm.rTax25ExchAdjDimension().parmExchAdjType(RTax25ExchAdjDimension::postingType2AdjType(posting));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPostingSpec</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets and sets the posting spec.
    /// </summary>
    /// <param name="_value">
    ///    _value that to be assigned.
    /// </param>
    /// <returns>
    ///     Returns value of posting spec.
    /// </returns>
    public TransactionSelect parmPostingSpec(TransactionSelect _value = postingSpec)
    {
        postingSpec = _value;
        return postingSpec;
    }

]]></Source>
			</Method>
			<Method>
				<Name>post</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Posts a exchange adjustment.
    /// </summary>
    protected void post()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>postAccountingCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates and posts the exchange rate difference in accounting currency.
    /// </summary>
    /// <param name="_posting">
    ///    The ledger posting type of a transaction.
    /// </param>
    /// <param name="_standardPosting">
    ///    The standard ledger posting type of a transaction.
    /// </param>
    /// <param name="_exchRateDiff">
    ///    The amount of the exchange adjustment in accounting currency.
    /// </param>
    /// <param name="_standardExchRateDiff">
    ///    The amount of the standard exchange adjustment in accounting currency.
    /// </param>
    public void postAccountingCurrency(
        LedgerPostingType               _posting,
        LedgerPostingType               _standardPosting,
        Amount                          _exchRateDiff,
        Amount                          _standardExchRateDiff)
    {
        postToReporting = false;
        this.initPosting(_posting, _standardPosting, _exchRateDiff, _standardExchRateDiff);
        this.post();
    }

]]></Source>
			</Method>
			<Method>
				<Name>postReportingCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates and posts the exchange rate difference in reporting currency.
    /// </summary>
    /// <param name="_posting">
    ///    The ledger posting type of a transaction.
    /// </param>
    /// <param name="_standardPosting">
    ///    The standard ledger posting type of a transaction.
    /// </param>
    /// <param name="_exchRateDiff">
    ///    The amount of the exchange adjustment in reporting currency.
    /// </param>
    /// <param name="_standardExchRateDiff">
    ///    The amount of the standard exchange adjustment in reporting currency.
    /// </param>
    public void postReportingCurrency(
        LedgerPostingType               _posting,
        LedgerPostingType               _standardPosting,
        Amount                          _exchRateDiff,
        Amount                          _standardExchRateDiff)
    {
        postToReporting = true;
        this.initPosting(_posting, _standardPosting, _exchRateDiff, _standardExchRateDiff);
        this.post();
    }

]]></Source>
			</Method>
			<Method>
				<Name>standardExchRateDiffLineTotal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the total amount of standard exchange adjustment.
    /// </summary>
    /// <returns>
    ///    The total amount of standard exchange adjustment.
    /// </returns>
    public Amount standardExchRateDiffLineTotal()
    {
        return standardExchRateDiffLineTotal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromExchAdjustment</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>CustVendExchAdjustmentPost_W</c> class for the given parameters.
    /// </summary>
    /// <param name="_custVendExchAdjustment">
    ///    The instance of the <c>CustVendExchAdjustment_W</c> class that holds the data that is required for the postings.
    /// </param>
    /// <param name="_unrealized">
    ///    true if an unrealized exchange adjustment; otherwise, false a realized exchange adjustment.
    /// </param>
    /// <param name="_custVendTrans">
    ///    The transaction record being adjusted.
    /// </param>
    /// <param name="_exchRateTrans">
    ///    The CustVendTrans record used to create the transaction.
    /// </param>
    /// <param name="_forceSingleDistribution">
    ///    Indiates whether or not to force the process to only generate a single distribution.
    /// </param>
    /// <param name="_custVendTransDebet">
    ///    The CustVendTrans payment buffer passed in.
    /// </param>
    /// <param name="_custVendTransCredit">
    ///    The CustVendTrans payment buffer passed in.
    /// </param>
    /// <param name="_createUnrealizedPostingLog">
    ///    Indiates whether or not to create postin log for unrealized exchange adjustment.
    /// </param>
    /// <returns>
    ///    An instance of the <c>CustVendExchAdjustmentPost_W</c> class.
    /// </returns>
    /// <exception cref="Exception::Error">
    ///    No instance of the <c>CustVendExchAdjustment_W</c> class is given.
    /// </exception>
    /// <exception cref="Exception::Error">
    ///    Wrong <c>_custVendTrans.TransType</c> is given.
    /// </exception>
    public static CustVendExchAdjustmentPost_WExt newFromExchAdjustment(
        CustVendExchAdjustment_WExt _custVendExchAdjustment,
        boolean                     _unrealized,
        CustVendTrans               _custVendTrans,
        CustVendTrans               _exchRateTrans,
        boolean                     _forceSingleDistribution,
        CustVendTrans               _custVendTransDebet,
        CustVendTrans               _custVendTransCredit,
        boolean                     _createUnrealizedPostingLog)
    {
        CustVendExchAdjustmentPost_WExt exchAdjustmentPost;

        if (!_custVendExchAdjustment)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        if (_custVendExchAdjustment.isSpecialPosting(_unrealized, _custVendTrans, _exchRateTrans))
        {
            exchAdjustmentPost = CustVendExchAdjustmentPostSpec_WExt::construct();
        }
        else
        {
            if (_custVendTrans.TableId == tableNum(CustTrans))
            {
                switch (_custVendTrans.TransType)
                {
                    case LedgerTransType::Sales:
                    case LedgerTransType::Cust:
                    case LedgerTransType::RTax25_BadDebtCreditAmortisation:
                        exchAdjustmentPost = CustVendExchAdjustmentPostCust_WExt::construct();
                        break;

                    case LedgerTransType::None, LedgerTransType::GeneralJournal:
                        exchAdjustmentPost = CustVendExchAdjustmentPostJournal_WExt::construct();
                        break;

                    default :
                        throw error("@GLS101280");
                }
            }
            else
            {
                exchAdjustmentPost = CustVendExchAdjustmentPostVend_WExt::construct();
            }
        }

        exchAdjustmentPost.initFromCustVendExchAdjustment(
            _custVendExchAdjustment,
            _unrealized,
            _custVendTrans,
            _exchRateTrans,
            _forceSingleDistribution,
            _custVendTransDebet,
            _custVendTransCredit,
            _createUnrealizedPostingLog);

        return exchAdjustmentPost;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>