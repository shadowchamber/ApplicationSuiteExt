<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TransactionReversal_VendExt</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>TransactionReversal_Vend</c> class reverses vendor transactions.
/// </summary>
/// <remarks>
///    This class is derived from the <c>TransactionReversal_CustVend</c> class. Upon reversing a vendor
///    transaction, the coherent ledger transactions are also reversed.The actual reversal of the vendor
///    transaction is performed in the <see cref="M:TransactionReversal_CustVend.createCustVendTrans" />.
///    Before this, a new instance of the <see cref="T:TransactionReversal_Ledger" /> is called for
///    reversal of the ledger transactions
/// </remarks>
class TransactionReversal_VendExt extends TransactionReversal_CustVendExt
{
    private PurchInvoiceType purchInvoiceType;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static TransactionReversal_VendExt construct()
    {
        return new TransactionReversal_VendExt();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        taxTransRecIdMap = new Map(Types::Int64, Types::Int64);

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInvoiceJournal</Name>
				<Source><![CDATA[
    void createInvoiceJournal(CustVendTrans _vendTrans, CustVendTrans _vendTransOrig)
    {
        VendInvoiceJour vendInvoiceJour;
        VendInvoiceJour vendInvoiceJourOrig;

        vendInvoiceJourOrig = VendInvoiceJour::findFromVendTransVoucher(_vendTransOrig.Invoice, _vendTransOrig.Voucher, _vendTransOrig.TransDate, _vendTransOrig.AccountNum);

        if (vendInvoiceJourOrig)
        {
            vendInvoiceJour.data(vendInvoiceJourOrig);

            vendInvoiceJour.InvoiceDate = _vendTrans.TransDate;
            vendInvoiceJour.DocumentNum = _vendTrans.DocumentNum;
            vendInvoiceJour.DocumentDate = _vendTrans.DocumentDate;
            vendInvoiceJour.LedgerVoucher = _vendTrans.Voucher;

            vendInvoiceJour.InvoiceAmount = -vendInvoiceJour.InvoiceAmount;
            // <GIN>
            if (TaxWithholdParameters_IN::checkTaxParameters() && !vendInvoiceJour.PurchId)
            {
                TaxWithholdTrans_IN taxWithholdTrans_IN;
                select sum(TaxWithholdAmountCur) from taxWithholdTrans_IN
                    where taxWithholdTrans_IN.Voucher ==  vendInvoiceJour.LedgerVoucher
                        && taxWithholdTrans_IN.Invoice == vendInvoiceJour.InvoiceId
                        && taxWithholdTrans_IN.TransDate == vendInvoiceJour.InvoiceDate;

                vendInvoiceJour.InvoiceAmount += taxWithholdTrans_IN.TaxWithholdAmountCur;
            }
            // </GIN>

            vendInvoiceJour.SumTax = -vendInvoiceJour.SumTax;
            vendInvoiceJour.Qty = -vendInvoiceJour.Qty;
            vendInvoiceJour.CashDisc = -vendInvoiceJour.CashDisc;
            vendInvoiceJour.SalesBalance = -vendInvoiceJour.SalesBalance;

            vendInvoiceJour.EndDisc = -vendInvoiceJour.EndDisc;
            vendInvoiceJour.SumLineDisc = -vendInvoiceJour.SumLineDisc;
            vendInvoiceJour.SumMarkup = - vendInvoiceJour.SumMarkup;
            vendInvoiceJour.InternalInvoiceId = vendInvoiceJour.getInternalInvoiceIdFromVendTrans(vendInvoiceJour.InvoiceAmount);
            vendInvoiceJour.euSalesList = ''; 

            vendInvoiceJour.SourceDocumentHeader = 0;
            vendInvoiceJour.SourceDocumentLine = 0;

            vendInvoiceJour.insert();

            //reverse the vendor invoice intrastat line
            VendInvoiceIntrastatType::reverseTrans(_vendTrans.Voucher, _vendTrans.TransDate, vendInvoiceJourOrig.RecId, vendInvoiceJour.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCustVendTransOpen</Name>
				<Source><![CDATA[
    CustVendTransOpen findCustVendTransOpen(RecId _vendTransRecId)
    {
        return VendTransOpen::findRefId(_vendTransRecId, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getModuleCustVend</Name>
				<Source><![CDATA[
    protected ModuleCustVend getModuleCustVend()
    {
        return ModuleCustVend::Vend;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSysModule</Name>
				<Source><![CDATA[
    protected SysModule getSysModule()
    {
        return SysModule::Vend;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLedgerVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new <see cref="T:LedgerVoucher" />.
    /// </summary>
    /// <returns>
    ///    A new <c>LedgerVoucher</c> object.
    /// </returns>
    public LedgerVoucher initLedgerVoucher()
    {
        ledgerVoucher = LedgerVoucher::newLedgerPost(DetailSummary::Detail, SysModule::Vend, LedgerParameters::numRefLedgerReversalVoucher().numberSequenceTable().NumberSequence);
        ledgerVoucher.parmReversal(!revoke);

        return ledgerVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBudgetCheckRequired</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether budget funds available check is required for the vendor
    /// transaction reversal process.
    /// </summary>
    /// <returns>
    /// true.
    /// </returns>
    protected boolean isBudgetCheckRequired()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveCashDisc</Name>
				<Source><![CDATA[
    void moveCashDisc(TableId _vendSettlementTableId, RecId _vendSettlementRecId, TableId _vendTransOpenTableId, RecId _vendTransOpenRecId)
    {
        VendTransCashDisc::moveCashDisc(_vendSettlementTableId, _vendSettlementRecId, _vendTransOpenTableId, _vendTransOpenRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeCustVendTransOpen</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Removes one or more <c>VendTransOpen</c> records on a document reversal after first moving any
    ///    <c>VendTransCashDisc</c> records.
    /// </summary>
    /// <param name="_refRecId">
    ///    The <c>RecId</c> of the <c>VendTransOpen</c> that is reversed.
    /// </param>
    /// <param name="_custVendSettlementTableId">
    ///    The <c>TableId</c> to which to move any cash discounts.
    /// </param>
    /// <param name="_custVendSettlementRecId">
    ///    The <c>RecId</c> to which to move any cash discounts to.
    /// </param>
    void removeCustVendTransOpen(RecId _refRecId, TableId _custVendSettlementTableId, RecId _custVendSettlementRecId)
    {
        VendTransOpen vendTransOpen;

        while select forupdate vendTransOpen
            where vendTransOpen.RefRecId == _refRecId
        {
            this.moveCashDisc(vendTransOpen.TableId, vendTransOpen.RecId, _custVendSettlementTableId, _custVendSettlementRecId);

            vendTransOpen.delete();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReversal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the internal processing for the reversal process.
    /// </summary>
    protected void processReversal()
    {
        #isoCountryRegionCodes

        // <GIN>
        boolean original;
        boolean isIndirectTaxesEnabled = TaxParameters::checkTaxParameters_IN();
        boolean isDirectTaxEnabled = TaxWithholdParameters_IN::checkTaxParameters();
        // </GIN>

        // <GIN>
        if (isIndirectTaxesEnabled || isDirectTaxEnabled)
        {
            if (!vendTransOrig)
            {
                original = true;
            }
            else
            {
                original = false;
            }
        }
        // </GIN>

        if (!vendTransOrig) // If vendTransOrig is empty, vendTrans is the original
        {
            vendTransOrig = VendTrans::find(vendTrans.RecId, true);
        }
        else
        {
            vendTransOrig = VendTrans::find(vendTransOrig.RecId, true); // Select must be within the tts
        }

        inputGeneralJournalAccountEntry =
                            GeneralLedgerExtension::findAccountEntryBySubledgerVoucherAccountingDate(vendTrans.Voucher, vendTrans.TransDate);

        // <GIN>
        if (TaxWithholdParameters_IN::checkTaxParameters())
        {
            TaxwithholdTransReverse_IN::checkSettlementProcessRun(vendTransOrig.Voucher, vendTransOrig.TransDate);
        }
        if (TransactionReversal_CustVend::isSalesTaxSettlementProcessRun_IN(vendTransOrig))
        {
            throw error(strFmt("@AccountsPayable:TransactionReversal_TaxSettlement_Message", vendTransOrig.Voucher));
        }
        // </GIN>
        RecId vendTransOrigRecId = vendTransOrig.RecId;
        // Performes the reversal/revoking of the ledger transactions connected to the vendor transactions
        this.initLedgerVoucher();

        TransactionReversal_LedgerExt transactionReversal_Ledger = TransactionReversal_LedgerExt::construct();
        this.initializeTransactionReversal_Ledger(transactionReversal_Ledger);

        transactionReversal_Ledger.createGeneralJournal(
                            vendTransOrig.Voucher,
                            vendTransOrig.TransDate,
                            ledgerVoucher,
                            true,
                            false,
                            reversalVoucher,
                            vendTransOrig.RecId,
                            VendTransOrig.AccountingEvent);

        // Set the reversalTraceNum which has been created in the transactionReversal_Ledger.createGeneralJournal
        reversalTraceNum = transactionReversal_Ledger.parmReversalTraceNum();
        reversalVoucher = transactionReversal_Ledger.parmReversalVoucher();

        this.createCustVendTrans(vendTrans, vendTransOrig);

        TransactionReversal_Asset transactionReversal_Asset = TransactionReversal_Asset::construct();
        this.initializeTransactionReversal_Asset(transactionReversal_Asset);

        // <GIN>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            AssetTrans assetTrans = AssetTrans::findByVoucher(vendTransOrig.Voucher, vendTransOrig.TransDate);
            AssetBook assetBook = AssetBook::find(assetTrans.AssetId, assetTrans.BookId);
            // Reverse any asset groups transactions created as a result of the vendor transaction.
            if (assetBook.AssetGroupDepreciation_IN == NoYes::Yes)
            {
                TransactionReversal_AssetGroup_IN transactionReversal_AssetGroup = TransactionReversal_AssetGroup_IN::construct();

                transactionReversal_AssetGroup.parmReversalVoucher(reversalVoucher);
                transactionReversal_AssetGroup.parmReversalDate(reversalDate);
                transactionReversal_AssetGroup.parmReversalTraceNum(reversalTraceNum);
                transactionReversal_AssetGroup.parmRevoke(revoke);

                transactionReversal_AssetGroup.createAllAssetTransactions(vendTransOrig.Voucher, vendTransOrig.TransDate);
            }
            else
            {
                transactionReversal_Asset.createAllAssetTransactions(vendTransOrig.Voucher, vendTransOrig.TransDate);
            }
        }
        else
        {
        // </GIN>
            // Reverse any assets transactions created as a result of the vendor transaction if reversal is allowed.
            AssetTrans assetTransCheck;
            select firstonly Voucher from assetTransCheck
                where assetTransCheck.Voucher == vendTransOrig.Voucher
                    && assetTransCheck.TransDate == vendTransOrig.TransDate;

            if (assetTransCheck.Voucher)
            {
                if (!transactionReversal_Asset.validateReversalFromNonFixedAssetModule(vendTransOrig.Voucher, vendTransOrig.TransDate, revoke))
                {
                    throw error("@SYS117113");
                }
                transactionReversal_Asset.createAllAssetTransactions(vendTransOrig.Voucher, vendTransOrig.TransDate);
            }
            // <GIN>
        }
        // </GIN>

        ledgerVoucher.end();

        // Submit the budget funds available check.
        this.submitBudget();

        transactionReversal_Ledger.postReversal();

        this.updateOriginal(vendTransOrig.TransDate, vendTransOrig.Voucher);

        TransactionLog::create(TransactionLogType::TransactionReversal, "@SYS88955");
    }

]]></Source>
			</Method>
			<Method>
				<Name>canReverse</Name>
				<Source><![CDATA[
    private boolean canReverse()
    {
        if (vendTrans.TransType == LedgerTransType::ExchAdjustment)
        {
            throw error(strFmt("@AccountsPayable:TransactionReversal_ForeignCurrencyRevaluationError", vendTrans.Voucher));
        }

        if (vendTrans.PromissoryNoteID)
        {
            throw error(strFmt("@AccountsPayable:TransactionReversal_PromissoryNoteError", vendTrans.Voucher));
        }

        if (vendTrans.PaymId
            && (vendTrans.SettleAmountCur || vendTrans.SettleAmountMST))
        {
            throw error(strFmt("@AccountsPayable:TransactionReversal_PaymIdSettledError", vendTrans.Voucher));
        }

        if (vendTrans.isSettlementPendingUnpostedPaymentExt())
        {
            throw error(strFmt("@AccountsPayable:TransactionReversal_SettlementPendingUnpostedPaymentError", vendTrans.Voucher));
        }

        TransactionReversalTrans transactionReversalTrans;

        if (vendTrans.SettleAmountCur)
        {
            transactionReversalTrans = TransactionReversalTrans::findTransactionReversalTrans(tableNum(VendTrans), vendTrans.RecId);

            if (!transactionReversalTrans.Reversed)
            {
                throw error(strFmt("@AccountsPayable:TransactionReversalCannotReverseSettled", vendTrans.Voucher));
            }
        }

        if (vendTrans.isSettledCustTransOnSameVoucherExt())
        {
            if (transactionReversalTrans.RecId == 0)
            {
                transactionReversalTrans = TransactionReversalTrans::findTransactionReversalTrans(tableNum(VendTrans), vendTrans.RecId);
            }

            // check if the settled amount is set because it was reversed
            if (!transactionReversalTrans.Reversed)
            {
                throw error(strFmt("@AccountsPayable:TransactionReversal_CustomerTransactionExistsOnVoucherError", vendTrans.Voucher));
            }
        }

        if (vendTrans.BankLCImportLine != 0)
        {
            throw error(strFmt("@AccountsPayable:TransactionReversal_BankLCEShipmentError", vendTrans.Voucher));
        }

        if (!vendTrans.Approved)
        {
            throw error(strFmt("@AccountsPayable:TransactionReversal_NotApprovedError", vendTrans.Voucher));
        }

        if (vendTrans.PromissoryNoteStatus == CustVendNegInstStatus::InvoiceRemitted)
        {
            throw error(strFmt("@AccountsPayable:TransactionReversal_PromissoryStatusRemittedError", vendTrans.Voucher));
        }

        if (!vendTrans.CustVendTrans::checkMultiTransByVoucherDate())
        {
            throw error(strFmt("@AccountsPayable:TransactionReversal_MultipleTrxForVoucherError", vendTrans.Voucher));
        }

        if (vendTrans.doesVendInvoicePoolRecordExistExt())
        {
            throw error(strFmt("@AccountsPayable:TransactionReversal_InvoicePoolRecordExistsError", vendTrans.Voucher));
        }

        if (VendTrans::checkJournalLineWithVendorOnBothSidesExistsExt(vendTrans))
        {
            throw error(strFmt("@AccountsPayable:TransactionReversal_InvoicePoolRecordExistsError", vendTrans.Voucher));
        }

        if (!TaxWithholdTrans_IN::enableReverseButton(vendTrans))
        {
            throw error(strFmt("@AccountsPayable:TransactionReversal_CorrectingInvoiceError", vendTrans.Voucher));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchInvoiceType</Name>
				<Source><![CDATA[
    public PurchInvoiceType parmPurchInvoiceType(PurchInvoiceType _purchInvoiceType = purchInvoiceType)
    {
        purchInvoiceType = _purchInvoiceType;

        return purchInvoiceType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reversal</Name>
				<Source><![CDATA[
    void reversal(Args args)
    {
        boolean isAdvanceReversal;

        super(args);

        vendTrans = args.record();

        this.defaultReversalDate(vendTrans.TransDate);

        if (TransactionReversalExecutionDetail::isReversingWithContract(this.parmContract()))
        {
            isAdvanceReversal = this.parmPurchInvoiceType() == PurchInvoiceType::VendorAdvance;

            if (isAdvanceReversal)
            {
                throw error(strFmt("@AccountsPayable:TransactionReversal_InvoiceTiedToPO_Message", vendTrans.Voucher));
            }
        }
        else
        {
            if (args.parmEnumType() == enumNum(PurchInvoiceType))
            {
                purchInvoiceType = args.parmEnum();

                if (purchInvoiceType == PurchInvoiceType::VendorAdvance)
                {
                    isAdvanceReversal = true;
                }
            }
        }

        if (isAdvanceReversal)
        {
            reversalDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        }

        if (!isAdvanceReversal && !vendTrans.vendInvoiceJour().isNonPO())
        {
            throw error(strFmt("@AccountsPayable:TransactionReversal_InvoiceTiedToPO_Message", vendTrans.Voucher));
        }

        [vendTransOrig, revoke, reversalTraceNum] = TransactionReversalTrans::findVendTransOrig(vendTrans); // If vendTransOrig is empty, vendTrans is the original

        if (TransactionReversalExecutionDetail::isReversingWithContract(this.parmContract()))
        {
            this.canReverse();
        }

        if (this.checkLedgerPostingTypeApplicable(vendTransOrig ? vendTransOrig.Voucher : vendTrans.Voucher,
                                                  vendTransOrig ? vendTransOrig.TransDate : vendTrans.TransDate))
        {
            vendTrans = TransactionReversalTrans::findLastVendTrans(vendTrans, true); // vendTrans is now the last/newest vendor transaction
            minimumDate = vendTransOrig.TransDate ? (revoke ? vendTrans.TransDate : vendTransOrig.TransDate) : vendTrans.TransDate;

            this.saveLast();

            if (this.isAdvanceReversalCheck(isAdvanceReversal, args) || this.prompt())
            {
                FiscalCalendarID calendarId;
                boolean validPeriod = true;
                AssetTrans assetBookTrans = AssetTrans::findByVoucher(vendTrans.Voucher, vendTrans.TransDate);

                if (assetBookTrans)
                {
                    // Now check any asset transaction calendars and make sure the date is valid within those open periods.
                    [validPeriod, calendarId] = TransactionReversal_Asset::checkValidAssetTranCalendar(assetBookTrans.Voucher, assetBookTrans.TransDate, '', 0, reversalDate);
                }

                if (!validPeriod)
                {
                    checkFailed(strFmt("@AccountsPayable:TransactionReversal_FiscalPeriodNotOpen_Message", vendTrans.Voucher, date2StrUsr(reversalDate, DateFlags::FormatAll), calendarId));
                }
                else
                {
                    if (!this.hasTransferOccurred(vendTrans.AccountingEvent))
                    {
                        throw error(strFmt("@AccountsPayable:TransactionReversal_SubledgerNotTransferredToGL", vendTrans.Voucher));
                    }
                    else
                    {
                        ttsbegin;

                        this.processReversal();

                        ttscommit;

                        this.logResult();
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPostingType</Name>
				<Source><![CDATA[
    protected boolean checkPostingType(
        GeneralJournalEntry _generalJournalEntry,
        SubledgerVoucherGeneralJournalEntry _subledgerVoucherLink,
        GeneralJournalAccountEntry _generalJournalAccountEntry,
        RefRecId _subledgerJournalAccountEntry,
        LedgerEntry _ledgerEntry)
    {
        boolean isValid = super(_generalJournalEntry, _subledgerVoucherLink, _generalJournalAccountEntry, _subledgerJournalAccountEntry, _ledgerEntry);
        
        isValid = isValid && !this.isProjectRelatedTransaction(_generalJournalEntry, _subledgerVoucherLink, _generalJournalAccountEntry, _subledgerJournalAccountEntry, _ledgerEntry);
        
        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProjectRelatedTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the marked vendor transaction is project related.
    /// </summary>
    /// <param name="_generalJournalEntry">
    /// General journal header information.
    /// </param>
    /// <param name="_subledgerVoucherLink">
    /// The relationship of voucher to general journal account entry.
    /// </param>
    /// <param name="_generalJournalAccountEntry">
    /// Contain the required general journal detail information.
    /// </param>
    /// <param name="_subledgerJournalAccountEntry">
    /// The <c>RecId</c> of subledger journal account entry reference.
    /// </param>
    /// <param name="_ledgerEntry">
    /// Optional information for general journal account entry.
    /// </param>
    /// <returns>
    /// true if transaction is project related; otherwise, false.
    /// </returns>
    private boolean isProjectRelatedTransaction(
        GeneralJournalEntry _generalJournalEntry,
        SubledgerVoucherGeneralJournalEntry _subledgerVoucherLink,
        GeneralJournalAccountEntry _generalJournalAccountEntry,
        RefRecId _subledgerJournalAccountEntry,
        LedgerEntry _ledgerEntry)
    {
        boolean isProjRelatedTransPresent = false;

        // If project-related vendor transactions are present reversal should not occur.
        if (vendTrans.InvoiceProject)
        {
            isProjRelatedTransPresent = true;
        }
        else if (_generalJournalEntry.JournalCategory == LedgerTransType::Transfer
                && !_generalJournalAccountEntry.checkReversal(_generalJournalEntry, _subledgerVoucherLink, _ledgerEntry, true, true, _subledgerJournalAccountEntry))
        {
            // If intercompany project expense report vendor transactions are present reversal should not occur.
            TrvExpTrans trvExpTrans;
            select firstonly ProjId, InterCompanyLE from trvExpTrans
                where trvExpTrans.Voucher == _subledgerVoucherLink.Voucher;

            if (trvExpTrans.ProjId
                    && trvExpTrans.InterCompanyLE != curext())
            {
                isProjRelatedTransPresent = true;
            }
        }

        return isProjRelatedTransPresent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>logResult</Name>
				<Source><![CDATA[
    private void logResult()
    {
        if (TransactionReversalExecutionDetail::isReversingWithContract(this.parmContract()))
        {
            str message;

            if (revoke)
            {
                message = strFmt("@AccountsPayable:TransactionReversal_Revoke_Message", vendTrans.Voucher, vendTrans.TransDate);
            }
            else
            {
                message = strFmt("@AccountsPayable:TransactionReversal_Success_Message", vendTrans.Voucher, vendTrans.TransDate);
            }

            info(message);

            reverseSuccessful = true;
        }
        else
        {
            info(revoke ? "@SYS78561" : "@SYS78562");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeTransactionReversal_Ledger</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>TransactionReversal_Ledger</c> class.
    /// </summary>
    /// <param name="_transactionReversal_Ledger">An instance of the <c>TransactionReversal_Ledger</c> class to be initialized.</param>
    protected void initializeTransactionReversal_Ledger(TransactionReversal_LedgerExt _transactionReversal_Ledger)
    {
        if (TransactionReversalExecutionDetail::reversePostingFeatureEnabled())
        {
            _transactionReversal_Ledger.parmContract(this.parmContract());
        }

        _transactionReversal_Ledger.parmReversalDate(reversalDate);
        _transactionReversal_Ledger.parmReversalTraceNum(reversalTraceNum);
        _transactionReversal_Ledger.parmSysModule(SysModule::Vend);
        _transactionReversal_Ledger.parmRevoke(revoke);
        _transactionReversal_Ledger.parmDoSkipCurrencyAdjustTrans(this.isInvoiceApprovalJournal(vendTransOrig.JournalNum));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeTransactionReversal_Asset</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>TransactionReversal_Asset</c> class.
    /// </summary>
    /// <param name="_transactionReversal_Asset">An instance of the <c>TransactionReversal_Asset</c> class to be initialized.</param>
    protected void initializeTransactionReversal_Asset(TransactionReversal_Asset _transactionReversal_Asset)
    {
        if (TransactionReversalExecutionDetail::reversePostingFeatureEnabled())
        {
            _transactionReversal_Asset.parmContract(this.parmContract());
        }

        _transactionReversal_Asset.parmReversalVoucher(reversalVoucher);
        _transactionReversal_Asset.parmReversalDate(reversalDate);
        _transactionReversal_Asset.parmReversalTraceNum(reversalTraceNum);
        _transactionReversal_Asset.parmRevoke(revoke);
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableIdNumber</Name>
				<Source><![CDATA[
    TableId tableIdNumber()
    {
        return tableNum(VendTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateOriginal</Name>
				<Source><![CDATA[
    // Sets the original TransactionReversalTrans records to be either reversed or not reversed
    public void updateOriginal(TransDate _transDate, Voucher _voucher, boolean _excludeSubledgerJournalTransfers = false)
    {
        VendTrans vendTransLocal;

        while select RecId from vendTransLocal
            where vendTransLocal.Voucher == _voucher &&
                  vendTransLocal.TransDate == _transDate
        {
            TransactionReversalTrans::updateOriginal(tableNum(VendTrans), vendTransLocal.RecId, !revoke);
        }

        super(_transDate, _voucher, _excludeSubledgerJournalTransfers);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAuxiliaryVendTrans</Name>
				<Source><![CDATA[
    //create Vend transactions that are also (except caller transaction) in voucher that is being reverted.
    static void createAuxiliaryVendTrans(CustVendTrans _custVendTrans,
                                         TraceNum _reversalTraceNum,
                                         Voucher _reversalVoucher,
                                         TransDate _reversalDate,
                                         LedgerVoucher _ledgerVoucher,
                                         boolean _revoke = false)
    {
        TransactionReversalOriginalTransactionFinderExt originalTransactionFinder = TransactionReversalOriginalTransactionFinderExt::construct(ModuleCustVend::Vend); 
        originalTransactionFinder.init(_custVendTrans, _revoke);

        VendTrans vendTransLast = originalTransactionFinder.getLastTransaction();
        VendTrans vendTransOrig = originalTransactionFinder.getOriginalTransaction();
        boolean revoke = originalTransactionFinder.getRevoke();

        TransactionReversal_VendExt transactionReversal = new TransactionReversal_VendExt();
        transactionReversal.parmReversalDate(_reversalDate);
        transactionReversal.parmReversalTraceNum(_reversalTraceNum);
        transactionReversal.parmReversalVoucher(_reversalVoucher);
        transactionReversal.parmRevoke(revoke);
        transactionReversal.parmLedgerVoucher(_ledgerVoucher);
        transactionReversal.createCustVendTrans(vendTransLast, vendTransOrig);

        TransactionReversalTrans::updateOriginal(tableNum(VendTrans), vendTransOrig.RecId, !revoke);
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@SYS78542";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args args)
    {
        TransactionReversal_VendExt transactionReversal = new TransactionReversal_VendExt();

        transactionReversal.reversal(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAdvanceReversalCheck</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether or not advance reversal and skipDialogPrompt are valid.
    /// </summary>
    /// <param name = "_isAdvanceReversal">true if advanced reversal; otherwise, false.</param>
    /// <param name = "_args">Args instance passed to reversal.</param>
    /// <returns>true if is advance reversal check or skipDialogPrompt are true; otherwise, false.</returns>
    protected boolean isAdvanceReversalCheck(boolean _isAdvanceReversal, Args _args)
    {
        return _isAdvanceReversal || this.skipDialogPrompt(_args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInvoiceApprovalJournal</Name>
				<Source><![CDATA[
    private boolean isInvoiceApprovalJournal(LedgerJournalId _journalNum)
    {
        LedgerJournalTable ledgerJournalTable;

        select firstonly RecId from ledgerJournalTable
            where ledgerJournalTable.JournalType == LedgerJournalType::Approval
                && ledgerJournalTable.Posted == NoYes::Yes
                && ledgerJournalTable.JournalNum == _journalNum;

        return ledgerJournalTable.RecId != 0;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>