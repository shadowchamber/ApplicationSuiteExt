<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustReversePostingExt</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CustReversePostingExt extends CustVendReversePostingExt
{
    boolean shouldDecrementMandateUsageCount;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>cashDiscountLedgerDimension</Name>
				<Source><![CDATA[
    LedgerDimensionDefaultAccount cashDiscountLedgerDimension(CustVendTrans _custTrans)
    {
        CustInvoiceJour custInvoiceJour;
        CashDiscCode cashDiscCode;
        LedgerDimensionDefaultAccount taxLedgerDimension;
        CustTrans custTransOffset = _custTrans.data();

        if (custVendSettlement.CanBeReversed && custVendSettlement.UtilizedCashDisc && custVendSettlement.CashDiscountLedgerDimension)
        {
            return custVendSettlement.CashDiscountLedgerDimension;
        }

        select custInvoiceJour
        where custInvoiceJour.InvoiceId == _custTrans.Invoice
        && custInvoiceJour.InvoiceAccount == _custTrans.AccountNum
        && custInvoiceJour.InvoiceDate == _custTrans.TransDate
        && custInvoiceJour.LedgerVoucher == _custTrans.Voucher;

        if (!custInvoiceJour)
        {
            select Invoice, AccountNum, TransDate, Voucher from custTransOffset
            where custTransOffset.RecId == _custTrans.OffsetRecId;

            select custInvoiceJour
            where custInvoiceJour.InvoiceId == custTransOffset.Invoice
            && custInvoiceJour.InvoiceAccount == custTransOffset.AccountNum
            && custInvoiceJour.InvoiceDate == custTransOffset.TransDate
            && custInvoiceJour.LedgerVoucher == custTransOffset.Voucher;
        }

        if (custInvoiceJour)
        {
            cashDiscCode = custInvoiceJour.CashDiscCode;
            if (custInvoiceJour.TaxGroup &&
                custInvoiceJour.SumTax)
            {
                taxLedgerDimension = this.findTaxLedgerDimension(custInvoiceJour.LedgerVoucher, custInvoiceJour.InvoiceDate, _custTrans);
                if (taxLedgerDimension)
                {
                    return taxLedgerDimension;
                }
            }
        }

        if (!cashDiscCode)
        {
            cashDiscCode = CustTable::find(_custTrans.AccountNum).CashDisc;
        }

        if (cashDiscCode)
        {
            return CashDisc::paidLedgerDimension(cashDiscCode);
        }

        return LedgerSystemAccounts::getDefaultAccount(LedgerPostingType::CustCashDisc);
    }

]]></Source>
			</Method>
			<Method>
				<Name>cashDiscVat</Name>
				<Source><![CDATA[
    boolean cashDiscVat()
    {
        return CustParameters::find().CashDiscVAT;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCreditNoteForCashDiscount_CZ</Name>
				<Source><![CDATA[
    /// <summary>
    ///     The method creates credit note <c>CustInvoiceJour</c> and <c>CustInvoiceTrans</c>
    ///     for reverse discount transaction <c>CustTrans</c>.
    /// </summary>
    /// <param name="_custTrans">
    ///     Source <c>CustTrans</c> record for reverce discount transaction.
    /// </param>
    /// <param name="_reversedDiscTrans">
    ///     Reverse discount transaction - <c>CustTrans</c> record.
    /// </param>
    /// <remarks>
    ///     Reverse document is used only for the reporting and for Czech Republic.
    /// </remarks>
    /// <exception cref="Exception::Error">
    ///     CreditNoteReasonReq is true and ReasonCodeCashDiscount_CZ is empty in customer parameters (<c>CustParameters</c>) table.
    /// </exception>
    protected void createCreditNoteForCashDiscount_CZ(CustVendTrans _custTrans, CustVendTrans _reversedDiscTrans)
    {
        CustInvoiceJour reverseCashDiscInvoiceJour;
        CustInvoiceJour cashDiscInvoiceJour;
        CustInvoiceJour_W cashDiscInvoiceJour_W;
        CustParameters custParameters = CustParameters::find();

        if (!_custTrans.Invoice
            || !_custTrans.CashDiscCode
            || !custParameters.CreditNoteCashDiscount_CZ)
        {
            return;
        }

        select firstOnly forUpdate cashDiscInvoiceJour_W
                where cashDiscInvoiceJour_W.CashDiscOrigInvoiceCustTrans_CZ == _custTrans.RecId
                   && !cashDiscInvoiceJour_W.IsCashDiscReversed_CZ
            join cashDiscInvoiceJour
                where cashDiscInvoiceJour.RecId == cashDiscInvoiceJour_W.CustInvoiceJour;

        if (!cashDiscInvoiceJour)
        {
            return;
        }

        if (custParameters.CreditNoteReasonReq
            && !custParameters.ReasonCodeCashDiscount_CZ)
        {
            throw error("@SYS4002420");
        }

        // Create credit note for reverse discount trans
        reverseCashDiscInvoiceJour = this.createReverseCustInvoiceJour_CZ(cashDiscInvoiceJour, _reversedDiscTrans);

        if (reverseCashDiscInvoiceJour)
        {
            cashDiscInvoiceJour_W.IsCashDiscReversed_CZ = true;
            cashDiscInvoiceJour_W.doUpdate();

            _reversedDiscTrans.Invoice = reverseCashDiscInvoiceJour.InvoiceId;

            info(strfmt("@SYS4002421", reverseCashDiscInvoiceJour.InvoiceId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReverseCustInvoiceJour_CZ</Name>
				<Source><![CDATA[
    private CustInvoiceJour createReverseCustInvoiceJour_CZ(
        CustInvoiceJour _cashDiscInvoiceJour,
        CustTrans _reversedDiscTrans)
    {
        CustInvoiceJour reversedCustInvoiceJour;
        CustInvoiceJour_W reversedCustInvoiceJour_W;
        CustInvoiceTrans cashDiscInvoiceTrans;
        CustInvoiceTrans_W cashDiscInvoiceTrans_W;
        CustInvoiceTrans reverseCashDiscInvoiceTrans;

        select firstOnly RecId from cashDiscInvoiceTrans
            where cashDiscInvoiceTrans.InvoiceId == _cashDiscInvoiceJour.InvoiceId
               && cashDiscInvoiceTrans.InvoiceDate == _cashDiscInvoiceJour.InvoiceDate
               && cashDiscInvoiceTrans.NumberSequenceGroup == _cashDiscInvoiceJour.NumberSequenceGroup
               && cashDiscInvoiceTrans.SalesId == _cashDiscInvoiceJour.SalesId;
        if (! cashDiscInvoiceTrans)
        {
            return null;
        }

        reversedCustInvoiceJour.data(_cashDiscInvoiceJour);

        reversedCustInvoiceJour.InvoiceDate = _reversedDiscTrans.TransDate;
        reversedCustInvoiceJour.LedgerVoucher = _reversedDiscTrans.Voucher;
        reversedCustInvoiceJour.InvoiceAmount = -_cashDiscInvoiceJour.InvoiceAmount;
        reversedCustInvoiceJour.SalesBalance = -_cashDiscInvoiceJour.SalesBalance;
        reversedCustInvoiceJour.InvoiceAmountMST = -_cashDiscInvoiceJour.InvoiceAmountMST;
        reversedCustInvoiceJour.SalesBalanceMST = -_cashDiscInvoiceJour.SalesBalanceMST;
        reversedCustInvoiceJour.SumTax = - _cashDiscInvoiceJour.SumTax;
        reversedCustInvoiceJour.SumTaxMST = - _cashDiscInvoiceJour.SumTaxMST;
        reversedCustInvoiceJour.SalesBalance = - _cashDiscInvoiceJour.SalesBalance;
        reversedCustInvoiceJour.SalesBalanceMST = - _cashDiscInvoiceJour.SalesBalanceMST;
        reversedCustInvoiceJour.InvoiceId = CustVendSettle_Cust::getNewCreditNoteForCashDiscountId_CZ();

        reversedCustInvoiceJour_W = reversedCustInvoiceJour.custInvoiceJour_W();
        reversedCustInvoiceJour_W.IsCashDiscReversed_CZ = true;
        reversedCustInvoiceJour_W.CashDiscOrigInvoiceCustTrans_CZ = _cashDiscInvoiceJour.custTrans().RecId;
        reversedCustInvoiceJour.packCustInvoiceJour_W(reversedCustInvoiceJour_W);

        reversedCustInvoiceJour.insert();

        while select cashDiscInvoiceTrans
            where cashDiscInvoiceTrans.InvoiceId == _cashDiscInvoiceJour.InvoiceId
               && cashDiscInvoiceTrans.InvoiceDate == _cashDiscInvoiceJour.InvoiceDate
               && cashDiscInvoiceTrans.NumberSequenceGroup == _cashDiscInvoiceJour.NumberSequenceGroup
               && cashDiscInvoiceTrans.SalesId == _cashDiscInvoiceJour.SalesId
        {
            reverseCashDiscInvoiceTrans.clear();
            reverseCashDiscInvoiceTrans.data(cashDiscInvoiceTrans);
            reverseCashDiscInvoiceTrans.initFromCustInvoiceJour(reversedCustInvoiceJour);
            reverseCashDiscInvoiceTrans.SalesPrice = cashDiscInvoiceTrans.SalesPrice;
            reverseCashDiscInvoiceTrans.Qty = -cashDiscInvoiceTrans.Qty;
            reverseCashDiscInvoiceTrans.LineAmount = -cashDiscInvoiceTrans.LineAmount;
            reverseCashDiscInvoiceTrans.LineAmountMST = -cashDiscInvoiceTrans.LineAmountMST;
            reverseCashDiscInvoiceTrans.TaxAmountMST = -cashDiscInvoiceTrans.TaxAmountMST;
            reverseCashDiscInvoiceTrans.TaxAmount = -cashDiscInvoiceTrans.TaxAmount;

            cashDiscInvoiceTrans_W.RefReturnInvoiceTrans_W = cashDiscInvoiceTrans.RecId;
            reverseCashDiscInvoiceTrans.packCustInvoiceTrans_W(cashDiscInvoiceTrans_W);
            reverseCashDiscInvoiceTrans.LineCreationSequenceNumber = 0;
            reverseCashDiscInvoiceTrans.insert();
        }

        return reversedCustInvoiceJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>discTxtCustVend</Name>
				<Source><![CDATA[
    LedgerTransTxt discTxtCustVend()
    {
        return LedgerTransTxt::CustCashDiscCust;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchAdjTxt</Name>
				<Source><![CDATA[
    LedgerTransTxt exchAdjTxt(LedgerJournalACType _ledgerJournalACType = LedgerJournalACType::Cust)
    {
        LedgerTransTxt ledgerTransTxt;
        switch (_ledgerJournalACType)
        {
            case LedgerJournalACType::Ledger :
                ledgerTransTxt = LedgerTransTxt::CustExchAdjLedger;
                break;

            default :
                ledgerTransTxt = LedgerTransTxt::CustExchAdjCust;
        }
        return ledgerTransTxt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findInvoice</Name>
				<Source><![CDATA[
    CustVendInvoiceJour findInvoice(CustVendAC _custVendAC,
                                    InvoiceId _invoiceId,
                                    Voucher _voucher,
                                    TransDate _transDate)
    {
        return CustInvoiceJour::findFromCustTransVoucher(_invoiceId, _voucher, _transDate, _custVendAC);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOffsetSettlementRecId</Name>
				<Source><![CDATA[
    CustVendSettlement findOffsetSettlementRecId(CustVendSettlement _custVendSettlement)
    {
        CustSettlement custSettlementOffset;

        // This code only executes for a single company where so don't need to
        // check OffsetCompany field.
        select firstonly custSettlementOffset
            where custSettlementOffset.TransRecId == _custVendSettlement.OffsetRecId
            && custSettlementOffset.OffsetRecid == _custVendSettlement.TransRecId
            && custSettlementOffset.CanBeReversed == true;

        return custSettlementOffset;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findTaxLedgerDimension</Name>
				<Source><![CDATA[
    LedgerDimensionDefaultAccount findTaxLedgerDimension(Voucher _voucher,
                                                         TransDate _transDate,
                                                         CustTrans _custTrans)
    {
        return TaxLedgerAccountGroup::find(TaxTable::findAccountGroup(TaxTrans::find(_voucher, _transDate).TaxCode)).CashDiscountOutgoingLedgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerTransType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the ledger transaction type for reversal processing.
    /// </summary>
    /// <returns>
    ///    The <c>LedgerTransType::Cust</c> enumeration value.
    /// </returns>
    /// <remarks>
    ///    The ledger transaction type is used to correctly post the reversing transactions.
    /// </remarks>
    protected LedgerTransType getLedgerTransType()
    {
        return LedgerTransType::Cust;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getModule</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the module used for reversal processing.
    /// </summary>
    /// <returns>
    ///    The <c>SysModule::Cust</c> enumeration value.
    /// </returns>
    protected SysModule getModule()
    {
        return SysModule::Cust;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNumberSeqRef</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the number sequence reference for reversal processing.
    /// </summary>
    /// <returns>
    ///    The number sequence reference for reversal processing.
    /// </returns>
    /// <remarks>
    ///    The number sequence reference is used to generate the appropriate voucher numbers for reversing
    ///    transactions.
    /// </remarks>
    protected NumberSequenceReference getNumberSeqRef()
    {
        return CustParameters::numRefCustPaymVoucher();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCustVendSettlementBuffer</Name>
				<Source><![CDATA[
    CustVendSettlement initCustVendSettlementBuffer()
    {
        CustSettlement custSettlementBuffer;
        return custSettlementBuffer.data();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCustVendSettlementOffsetVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Instantiates a <c>CustSettlementOffsetVoucher</c>.
    /// </summary>
    /// <returns>
    ///    The new <c>CustSettlementOffsetVoucher</c> instance.
    /// </returns>
    protected CustVendSettlementOffsetVoucher initCustVendSettlementOffsetVoucher()
    {
        CustSettlementOffsetVoucher custSettlementOffsetVoucher;

        return custSettlementOffsetVoucher.data();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCustVendTransBuffer</Name>
				<Source><![CDATA[
    CustVendTrans initCustVendTransBuffer()
    {
        CustTrans custTransBuffer;
        return custTransBuffer.data();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isItPennyDiff</Name>
				<Source><![CDATA[
    // If it is not penny diff, it is over/under payment

    boolean isItPennyDiff()
    {
        AmountMST pennyDiffMst = CurrencyExchangeHelper::mstAmount(custVendSettlement.PennyDiff, custVendTrans.CurrencyCode, custVendTrans.TransDate, UnknownNoYes::No, custVendTrans.AmountMST / custVendTrans.AmountCur * 100);

        if (abs(pennyDiffMst) <= this.maxMSTDiff())
            return true;
        else
            return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isOffsetPrepayment</Name>
				<Source><![CDATA[
    boolean isOffsetPrepayment(CustVendTrans _custVendTrans)
    {
        CustTrans custTrans;

        // This code only executes for a single company where so don't need to
        // check OffsetCompany field.
        select firstonly Prepayment from custTrans
            where custTrans.RecId == custVendSettlement.OffsetRecId;

        return custTrans.Prepayment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>maxMSTDiff</Name>
				<Source><![CDATA[
    AmountCur maxMSTDiff()
    {
        return CustParameters::find().MaxMSTDiff;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustReversePrepaymentWithLog_RU</Name>
				<Source><![CDATA[
    protected boolean mustReversePrepaymentWithLog_RU()
    {
        return CustParameters::find().ReversePrepayment_W;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShouldDecrementMandateUsageCount</Name>
				<Source><![CDATA[
    public boolean parmShouldDecrementMandateUsageCount(boolean _shouldDecrementMandateUsageCount = shouldDecrementMandateUsageCount)
    {
        shouldDecrementMandateUsageCount = _shouldDecrementMandateUsageCount;
        return shouldDecrementMandateUsageCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>restoreCustVendTransOpen</Name>
				<Source><![CDATA[
    protected void restoreCustVendTransOpen(Amount _totalUnrealizedExchAdjCustVendTrans = 0, Amount _totalUnrealizedReporting = 0)
    {
        CustDirectDebitMandate mandate;

        super(_totalUnrealizedExchAdjCustVendTrans, _totalUnrealizedReporting);

        // The mandate of the invoice should be updated only once. This is managed by the fact
        // that each side (trans / offset) is only processed once. We will only update the mandate
        // when the invoice is the custVendTrans record since we are in the context of that
        // company and that is where the mandate needs to be updated.
        if (shouldDecrementMandateUsageCount
            && custVendTrans.TransType != LedgerTransType::Payment
            && CustPaymModeTable::find(custVendTrans.PaymMode).isSEPA
            && CustPaymModeTable::findByCompany(custVendTransOffset.company(), custVendTransOffset.PaymMode).IsSEPA)
        {
            mandate = CustDirectDebitMandate::find(custVendTrans.Mandate, true);
            mandate.decreaseUsageCount();

            ttsBegin;

            mandate.update();
            CustDirectDebitMandateLog::cancelRecord(mandate.RecId, custVendTransOffset.Voucher);

            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupReverseDiscount</Name>
				<Source><![CDATA[
    void setupReverseDiscount()
    {
        discountLedgerDimension = this.cashDiscountLedgerDimension(custVendTrans);

        if (!voucher)
        {
            this.setVoucher();
        }

        cashDiscPostingType = LedgerPostingType::CustCashDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupReverseExchAdjustment</Name>
				<Source><![CDATA[
    void setupReverseExchAdjustment(NoYes _realized)
    {
        CurrencyGainLossAccountType accountType;
        // <GEEU>
        boolean usePostingLog = CustVendTransPostingLog_RU::usePostingLog();
        // </GEEU>

        if (_realized)
        {
            if (custVendTrans.ExchAdjustmentRealized > 0)
            {
                accountType = CurrencyGainLossAccountType::RealizedGain;
                exchAdjustmentPostingType = LedgerPostingType::ExchRateGain;
            }
            else
            {
                accountType = CurrencyGainLossAccountType::RealizedLoss;
                exchAdjustmentPostingType = LedgerPostingType::ExchRateLoss;
            }
        }
        else
        {
            // <GEEU>
            if ((! usePostingLog && custVendTrans.ExchAdjustmentRealized > 0) ||
                ( usePostingLog && custVendTrans.ExchAdjustmentUnrealized > 0))
            // </GEEU>
            {
                accountType = CurrencyGainLossAccountType::UnrealizedGain;
                exchAdjustmentPostingType = LedgerPostingType::ExchRateGain;
            }
            else
            {
                accountType = CurrencyGainLossAccountType::UnrealizedLoss;
                exchAdjustmentPostingType = LedgerPostingType::ExchRateLoss;
            }
        }

        exchAdjLedgerDimension = CurrencyLedgerGainLossAccount::ledgerDimension(
            Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId),
            custVendTrans.CurrencyCode,
            accountType);

        if (!voucher)
        {
            this.setVoucher();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupReversePennyDiff</Name>
				<Source><![CDATA[
    void setupReversePennyDiff()
    {
        AmountMST pennyDiffMst = CurrencyExchangeHelper::mstAmount(custVendSettlement.PennyDiff, custVendTrans.CurrencyCode, custVendTrans.TransDate, UnknownNoYes::No, custVendTrans.AmountMST / custVendTrans.AmountCur * 100);

        if (abs(pennyDiffMst) <= this.maxMSTDiff())
        {
            pennyDiffLedgerDimension = LedgerSystemAccounts::getDefaultAccount(LedgerPostingType::MSTDiff);
        }
        else
        {
            pennyDiffLedgerDimension = this.cashDiscountLedgerDimension(custVendTrans);
            if (!pennyDiffLedgerDimension)
            {
                throw error(strfmt("@SYS24816",LedgerPostingType::VendCashDisc));
            }
        }

        if (!voucher)
        {
            this.setVoucher();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVoucher</Name>
				<Source><![CDATA[
    protected void setVoucher()
    {
        NumberSeq numberSeq;

        numberSeq = NumberSeq::newGetVoucher(CustParameters::numRefCustPaymVoucher());
        voucher = numberSeq.voucher();
    }

]]></Source>
			</Method>
			<Method>
				<Name>summaryLedgerDimension</Name>
				<Source><![CDATA[
    LedgerDimensionDefaultAccount summaryLedgerDimension()
    {
        return CustLedgerAccounts::summaryLedgerDimension(custVendTrans.AccountNum, custVendTrans.PostingProfile);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the voucher exists.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    /// <remarks>
    /// This supports cross-company validation of the voucher.
    /// </remarks>
    public boolean validate()
    {
        #ISOCountryRegionCodes

        boolean ret;
        SalesBookTable_RU salesBookTable;
        PurchBookVATProcessLogTrans_RU processLogTrans;
        PurchBookVATProcessLogTransOper_RU processLogTransOper;

        ret = super();

        if (ret && SysCountryRegionCode::isLegalEntityInCountryRegion([ #isoRU ]))
        {
            if (custVendTrans.TransType == LedgerTransType::ExchAdjustment ||
                custVendTrans.TransType == LedgerTransType::AdvanceAdjustment_RU ||
                custVendTrans.TransType == LedgerTransType::RTax25_BadDebtCreditAmortisation ||
                custVendTrans.TransType == LedgerTransType::RTax25_BadDebtDebitAmortisation ||
                custVendTransOffset.TransType == LedgerTransType::ExchAdjustment ||
                custVendTransOffset.TransType == LedgerTransType::AdvanceAdjustment_RU ||
                custVendTransOffset.TransType == LedgerTransType::RTax25_BadDebtCreditAmortisation ||
                custVendTransOffset.TransType == LedgerTransType::RTax25_BadDebtDebitAmortisation)
            {
                return ret;
            }
            ret = CustTrans::checkIfCanBeSettled_RU(custVendTrans,
                                                    custVendTransOffset,
                                                    transactionDate,
                                                    transactionDate != custVendSettlement.TransDate);
            if (ret &&
                custVendSettlement.ExchAdjustment &&
                (conpeek(this.custVendSettleRef_RU(custVendSettlement, CustVendTransPostingLogType_RU::ExchAmountDiff), 1) ||
                 conpeek(this.custVendSettleRef_RU(custVendSettlement, CustVendTransPostingLogType_RU::ExchAdjustment), 1) ||
                 conpeek(this.custVendSettleRef_RU(custVendSettlement, CustVendTransPostingLogType_RU::AdvanceAdjustment), 1)))
            {
                salesBookTable = SalesBookTable_RU::findByClosingDate(transactionDate);
                if (salesBookTable && !salesBookTable.isActiveBook())
                {
                    ret = checkFailed(strfmt("@GLS101327", salesBookTable.BookId));
                }
            }

            if ((custVendTrans.Prepayment || custVendTransOffset.Prepayment) &&
                 transactionDate == custVendSettlement.TransDate)
            {
                select firstonly RecId from processLogTrans
                    exists join processLogTransOper
                        where processLogTrans.RecId == processLogTransOper.RefRecId &&
                              processLogTrans.SettlementRecId == custVendSettlement.RecId &&
                              processLogTransOper.CanceledRefRecId == 0;

                if (processLogTrans.RecId)
                {
                    ret = checkFailed("@GLS101112");
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>