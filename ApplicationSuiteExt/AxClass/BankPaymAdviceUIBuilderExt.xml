<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankPaymAdviceUIBuilderExt</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class BankPaymAdviceUIBuilderExt extends SrsReportDataContractUIBuilder
{
    private DialogField dialogLedgerJournalId;
    private DialogField dialogPaymentStatus;
    private DialogField dialogAccount;
    private DialogField dialogPaymMode;
    private DialogField dialogBank;

    private ModuleCustVend moduleCustVend;
    private DataAreaId paymentCompany;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>postBuild</Name>
				<Source><![CDATA[
    public void postBuild()
    {
        super();

        BankPaymAdviceContractExt bankPaymAdviceContract = this.dataContractObject() as BankPaymAdviceContractExt;

        this.bindContractFieldsToDialogFields(bankPaymAdviceContract);
    }

]]></Source>
			</Method>
			<Method>
				<Name>bindContractFieldsToDialogFields</Name>
				<Source><![CDATA[
    private void bindContractFieldsToDialogFields(BankPaymAdviceContractExt _bankPaymAdviceContract)
    {
        dialogLedgerJournalId = this.bindInfo().getDialogField(_bankPaymAdviceContract, methodStr(BankPaymAdviceContractExt, parmLedgerJournalId));
        dialogPaymentStatus = this.bindInfo().getDialogField(_bankPaymAdviceContract, methodStr(BankPaymAdviceContractExt, parmPaymentStatus));
        dialogAccount = this.bindInfo().getDialogField(_bankPaymAdviceContract, methodStr(BankPaymAdviceContractExt, parmAccountNum));
        dialogPaymMode = this.bindInfo().getDialogField(_bankPaymAdviceContract, methodStr(BankPaymAdviceContractExt, parmPaymMode));
        dialogBank = this.bindInfo().getDialogField(_bankPaymAdviceContract, methodStr(BankPaymAdviceContractExt, parmCompanyBankAccountId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>postRun</Name>
				<Source><![CDATA[
    public void postRun()
    {
        super();

        BankPaymAdviceContractExt bankPaymAdviceContract = this.dataContractObject() as BankPaymAdviceContractExt;

        LedgerJournalTrans ledgerJournalTrans;

        if (this.controller().parmArgs() && this.controller().parmArgs().record())
        {
            ledgerJournalTrans = this.controller().parmArgs().record() as LedgerJournalTrans;
        }

        moduleCustVend = this.findModule(ledgerJournalTrans);
        paymentCompany = this.findCompanyContext(ledgerJournalTrans);
        this.initControlsFromPayment(ledgerJournalTrans);

        this.subscribeDialogFieldEvents();
    }

]]></Source>
			</Method>
			<Method>
				<Name>findModule</Name>
				<Source><![CDATA[
    private ModuleCustVend findModule(LedgerJournalTrans _ledgerJournalTrans)
    {
        ModuleCustVend custVend;

        switch (_ledgerJournalTrans.AccountType)
        {
            case LedgerJournalACType::Cust:
                custVend = ModuleCustVend::Cust;
                break;

            case LedgerJournalACType::Vend:
                custVend = ModuleCustVend::Vend;
                break;
        }

        return custVend;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCompanyContext</Name>
				<Source><![CDATA[
    private DataAreaId findCompanyContext(LedgerJournalTrans _ledgerJournalTrans)
    {
        DataAreaId companyContext = curExt();

        if (_ledgerJournalTrans.OffsetCompany != '')
        {
            companyContext = _ledgerJournalTrans.OffsetCompany;
        }

        return companyContext;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initControlsFromPayment</Name>
				<Source><![CDATA[
    private void initControlsFromPayment(LedgerJournalTrans _ledgerJournalTrans)
    {
        dialogLedgerJournalId.value(_ledgerJournalTrans.JournalNum);
        dialogLedgerJournalId.allowEdit(false);

        dialogPaymentStatus.value(CustVendPaymStatus::Sent);
        dialogPaymentStatus.allowEdit(false);

        dialogPaymMode.value(_ledgerJournalTrans.PaymMode);

        if (_ledgerJournalTrans.AccountType == LedgerJournalACType::Cust
            || _ledgerJournalTrans.AccountType == LedgerJournalACType::Vend)
        {
            dialogAccount.value(_ledgerJournalTrans.parmAccount());
        }

        if (_ledgerJournalTrans.OffsetAccountType == ledgerJournalACType::Bank)
        {
            dialogBank.value(_ledgerJournalTrans.parmOffsetAccount());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>subscribeDialogFieldEvents</Name>
				<Source><![CDATA[
    private void subscribeDialogFieldEvents()
    {
        dialogAccount.registerOverrideMethod(
            methodStr(FormStringControl, lookup),
            methodStr(BankPaymAdviceUIBuilderExt, lookupAccountByModule),
            this);

        dialogPaymMode.registerOverrideMethod(
            methodStr(FormStringControl, lookup),
            methodStr(BankPaymAdviceUIBuilderExt, lookupMethodOfPaymentByModule),
            this);

        dialogBank.registerOverrideMethod(
            methodStr(FormStringControl, lookup),
            methodStr(BankPaymAdviceUIBuilderExt, lookupBankAccount),
            this);

        dialogBank.registerOverrideMethod(
            methodStr(FormStringControl, modified),
            methodStr(BankPaymAdviceUIBuilderExt, validateBankAccount),
            this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupAccountByModule</Name>
				<Source><![CDATA[
    private void lookupAccountByModule(FormControl _formControl)
    {
        switch (moduleCustVend)
        {
            case ModuleCustVend::Vend:
                VendTable::lookupVendor(_formControl, paymentCompany);
                break;

            case ModuleCustVend::Cust:
                CustTable::lookupCustomer(_formControl, paymentCompany);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupMethodOfPaymentByModule</Name>
				<Source><![CDATA[
    private void lookupMethodOfPaymentByModule(FormControl _formControl)
    {
        switch (moduleCustVend)
        {
            case ModuleCustVend::Vend:
                VendPaymModeTable::lookupPaymMethod(_formControl, dialogPaymMode.value(), paymentCompany);
                break;

            case ModuleCustVend::Cust:
                CustPaymModeTable::lookupPaymMethod(_formControl, dialogPaymMode.value(), paymentCompany);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupBankAccount</Name>
				<Source><![CDATA[
    private void lookupBankAccount(FormControl _formControl)
    {
        BankAccountTable::lookupBankAccount(_formControl, paymentCompany);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBankAccount</Name>
				<Source><![CDATA[
    private boolean validateBankAccount(FormControl _formControl)
    {
        BankAccountID bankAccountId = _formControl.valueStr();
        boolean isValidBankAccount = true;

        if (bankAccountId != '')
        {
            isValidBankAccount = BankAccountTable::checkIsActive(_formControl.valueStr());
        }

        return isValidBankAccount;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>