<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendReversePostingExt</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class VendReversePostingExt extends CustVendReversePostingExt
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>cashDiscountLedgerDimension</Name>
				<Source><![CDATA[
    LedgerDimensionDefaultAccount cashDiscountLedgerDimension(CustVendTrans _vendTrans)
    {
        VendInvoiceJour vendInvoiceJour;
        CashDiscCode cashDiscCode;
        LedgerDimensionDefaultAccount taxLedgerDimension;
        VendTrans vendTransOffset = _vendTrans.data();

        if (custVendSettlement.CanBeReversed && custVendSettlement.UtilizedCashDisc && custVendSettlement.CashDiscountLedgerDimension)
        {
            return custVendSettlement.CashDiscountLedgerDimension;
        }

        select vendInvoiceJour
        where vendInvoiceJour.InvoiceId == _vendTrans.Invoice
        && vendInvoiceJour.InvoiceAccount == _vendTrans.AccountNum
        && vendInvoiceJour.InvoiceDate == _vendTrans.TransDate
        && vendInvoiceJour.LedgerVoucher == _vendTrans.Voucher;

        if (!vendInvoiceJour)
        {
            select Invoice, AccountNum, TransDate, Voucher from vendTransOffset
            where vendTransOffset.RecId == _vendTrans.OffsetRecId;

            select vendInvoiceJour
            where vendInvoiceJour.InvoiceId == vendTransOffset.Invoice
            && vendInvoiceJour.InvoiceAccount == vendTransOffset.AccountNum
            && vendInvoiceJour.InvoiceDate == vendTransOffset.TransDate
            && vendInvoiceJour.LedgerVoucher == vendTransOffset.Voucher;
        }

        if (vendInvoiceJour)
        {
            cashDiscCode = vendInvoiceJour.CashDiscCode;
            if (vendInvoiceJour.TaxGroup && vendInvoiceJour.SumTax)
            {
                taxLedgerDimension = this.findTaxLedgerDimension(vendInvoiceJour.LedgerVoucher, vendInvoiceJour.InvoiceDate, _vendTrans);
                if (taxLedgerDimension)
                {
                    return taxLedgerDimension;
                }
            }
        }

        if (!cashDiscCode)
        {
            cashDiscCode = VendTable::find(_vendTrans.AccountNum).CashDisc;
        }

        if (cashDiscCode)
        {
            return CashDisc::receivedLedgerDimension(cashDiscCode);
        }

        return LedgerSystemAccounts::getDefaultAccount(LedgerPostingType::VendCashDisc);
    }

]]></Source>
			</Method>
			<Method>
				<Name>cashDiscVat</Name>
				<Source><![CDATA[
    boolean cashDiscVat()
    {
        return VendParameters::find().CashDiscVAT;
    }

]]></Source>
			</Method>
			<Method>
				<Name>discTxtCustVend</Name>
				<Source><![CDATA[
    LedgerTransTxt discTxtCustVend()
    {
        return LedgerTransTxt::VendCashDiscVend;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchAdjTxt</Name>
				<Source><![CDATA[
    LedgerTransTxt exchAdjTxt(LedgerJournalACType _ledgerJournalACType = LedgerJournalACType::Vend)
    {
        LedgerTransTxt ledgerTransTxt;

        switch (_ledgerJournalACType)
        {
            case LedgerJournalACType::Ledger :
                ledgerTransTxt = LedgerTransTxt::VendExchAdjLedger;
                break;

            default :
                ledgerTransTxt = LedgerTransTxt::VendExchAdjVend;
        }
        return ledgerTransTxt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findInvoice</Name>
				<Source><![CDATA[
    CustVendInvoiceJour findInvoice(CustVendAC _custVendAC,
                                    InvoiceId _invoiceId,
                                    Voucher _voucher,
                                    TransDate _transDate)
    {
        return VendInvoiceJour::findFromVendTransVoucher(_invoiceId, _voucher, _transDate, _custVendAC);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOffsetSettlementRecId</Name>
				<Source><![CDATA[
    CustVendSettlement findOffsetSettlementRecId(CustVendSettlement _custVendSettlement)
    {
        VendSettlement vendSettlementOffset;

        // This code only executes for a single company where so don't need to
        // check OffsetCompany field.
        select firstonly vendSettlementOffset
            where vendSettlementOffset.TransRecId == _custVendSettlement.OffsetRecId
            && vendSettlementOffset.OffsetRecid == _custVendSettlement.TransRecId
            && vendSettlementOffset.CanBeReversed == true;

        return vendSettlementOffset;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findTaxLedgerDimension</Name>
				<Source><![CDATA[
    LedgerDimensionDefaultAccount findTaxLedgerDimension(Voucher _voucher,
                                                         TransDate _transDate,
                                                         VendTrans _vendTrans)
    {
        return TaxLedgerAccountGroup::find(TaxTable::findAccountGroup(TaxTrans::find(_voucher, _transDate).TaxCode)).CashDiscountIncomingLedgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerTransType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the ledger transaction type for reversal processing.
    /// </summary>
    /// <returns>
    ///    The <c>LedgerTransType::Vend</c> enumeration value.
    /// </returns>
    /// <remarks>
    ///    The ledger transaction type is used to post the reversing transactions.
    /// </remarks>
    protected LedgerTransType getLedgerTransType()
    {
        return LedgerTransType::Vend;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getModule</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the module that is used for reversal processing.
    /// </summary>
    /// <returns>
    ///    The <c>SysModule::Vend</c> enumeration value.
    /// </returns>
    protected SysModule getModule()
    {
        return SysModule::Vend;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNumberSeqRef</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the number sequence reference for reversal processing.
    /// </summary>
    /// <returns>
    /// The number sequence reference for reversal processing.
    /// </returns>
    /// <remarks>
    /// The number sequence reference is used to generate the appropriate voucher numbers
    /// for reversing transactions.
    /// </remarks>
    protected NumberSequenceReference getNumberSeqRef()
    {
        return VendParameters::numRefVendPaymentVoucher();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCustVendSettlementBuffer</Name>
				<Source><![CDATA[
    CustVendSettlement initCustVendSettlementBuffer()
    {
        VendSettlement vendSettlementBuffer;

        return vendSettlementBuffer.data();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCustVendSettlementOffsetVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Instantiates a <c>VendSettlementOffsetVoucher</c>.
    /// </summary>
    /// <returns>
    ///    The new <c>VendSettlementOffsetVoucher</c> instance.
    /// </returns>
    protected CustVendSettlementOffsetVoucher initCustVendSettlementOffsetVoucher()
    {
        VendSettlementOffsetVoucher vendSettlementOffsetVoucher;

        return vendSettlementOffsetVoucher.data();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCustVendTransBuffer</Name>
				<Source><![CDATA[
    CustVendTrans initCustVendTransBuffer()
    {
        VendTrans vendTransBuffer;
        return vendTransBuffer.data();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isItPennyDiff</Name>
				<Source><![CDATA[
    // If it is not penny diff, it is over/under payment

    boolean isItPennyDiff()
    {
        AmountMST pennyDiffMst = CurrencyExchangeHelper::mstAmount(custVendSettlement.PennyDiff, custVendTrans.CurrencyCode, custVendTrans.TransDate, UnknownNoYes::No, custVendTrans.AmountMST / custVendTrans.AmountCur * 100);

        if (abs(pennyDiffMst) <= this.maxMSTDiff())
            return true;
        else
            return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isOffsetPrepayment</Name>
				<Source><![CDATA[
    boolean isOffsetPrepayment(CustVendTrans _custVendTrans)
    {
        VendTrans vendTrans;

        // This code only executes for a single company where so don't need to
        // check OffsetCompany field.
        select firstonly Prepayment from vendTrans
            where vendTrans.RecId == custVendSettlement.OffsetRecId;

        return vendTrans.Prepayment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>maxMSTDiff</Name>
				<Source><![CDATA[
    AmountCur maxMSTDiff()
    {
        return VendParameters::find().MaxMSTDiff;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustReversePrepaymentWithLog_RU</Name>
				<Source><![CDATA[
    protected boolean mustReversePrepaymentWithLog_RU()
    {
        return VendParameters::find().ReversePrepayment_W;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseInventSumAdjust_RU</Name>
				<Source><![CDATA[
    // Reverse inventory cost adjustment
    protected void reverseInventSumAdjust_RU(TransDate _reverseDate,
                                             Voucher _reverseVoucher,
                                             CustVendTrans _custVendTrans,
                                             LedgerVoucher _ledgerVoucher = null)
    {
        InventTrans inventTrans;
        InventSettlement inventSettlement, cancelSettlement;
        InventAdjustPostMSTCur_RU inventAdjustPost;
        InventAdjustPostSecCur_RU inventAdjustPostSecCur;
        RTax25ExchAdjDimension exchAdjDimension = new RTax25ExchAdjDimension();
        LedgerCurrencyParameters_RU ledgerCurrencyParameters;
        RefRecId profitTableRecId;
        LedgerVoucherObject prevLedgerVoucherObject;
        LedgerVoucherObject inventLedgerVoucherObject;
        CustVendTransPostingLog_RU custVendTransPostingLogLoc;
        boolean usePurchConsumpAccount = VendParameters::find().UsePurchConsumpAccount_RU;
        RefTableId refTableId = custVendSettlement.TableId == tableNum(CustSettlement) ? tableNum(CustTrans) : tableNum(VendTrans);
        date inventReverseDate;

        if (usePurchConsumpAccount)
        {
            select firstonly InventVoucher, InventDate from custVendTransPostingLogLoc
                where custVendTransPostingLogLoc.RefTableId == refTableId &&
                        custVendTransPostingLogLoc.TransRecId == custVendSettlement.TransRecId &&
                        custVendTransPostingLogLoc.OffSetRecId == custVendSettlement.OffsetRecId &&
                        custVendTransPostingLogLoc.TransCompany == custVendSettlement.TransCompany &&
                        custVendTransPostingLogLoc.OffsetCompany == custVendSettlement.OffsetCompany &&
                        custVendTransPostingLogLoc.TransDate == custVendSettlement.TransDate &&
                        custVendTransPostingLogLoc.Reversed == false &&
                        custVendTransPostingLogLoc.PostingLogType == custVendTransPostingLogType &&
                        custVendTransPostingLogLoc.InventVoucher != '';

            if (custVendTransPostingLogLoc.InventVoucher)
            {
                inventReverseDate = max(_custVendTrans.TransDate, custVendTransPostingLogLoc.InventDate);
                prevLedgerVoucherObject = _ledgerVoucher.findLedgerVoucherObject();
                inventLedgerVoucherObject = _ledgerVoucher.findLedgerVoucherObject(custVendTransPostingLogLoc.InventVoucher, inventReverseDate);

                if (! inventLedgerVoucherObject)
                {
                    inventLedgerVoucherObject = LedgerVoucherObject::newVoucher(custVendTransPostingLogLoc.InventVoucher,
                                                                                inventReverseDate,
                                                                                _ledgerVoucher.parmSysModuleDefault(),
                                                                                prevLedgerVoucherObject.parmLedgerTransType(),
                                                                                prevLedgerVoucherObject.parmIsCorrectionDefault());
                    inventLedgerVoucherObject.parmVoucherCheck(false);
                    inventLedgerVoucherObject.lastTransTxt(strFmt('%1 %2 %3 ', "@SYS4412", "@SYS12371", custVendTransPostingLogLoc.InventVoucher));
                    ledgerVoucher.addVoucher(inventLedgerVoucherObject);
                }

                ledgerVoucher.lastVoucher(custVendTransPostingLogLoc.InventVoucher);
                ledgerVoucher.lastTransDate(inventReverseDate);
            }
        }

        inventAdjustPost = new InventAdjustPostMSTCur_RU(custVendTransPostingLogLoc.InventVoucher ? custVendTransPostingLogLoc.InventVoucher : _custVendTrans.Voucher,
                                                         inventReverseDate ? inventReverseDate : _custVendTrans.TransDate,
                                                         InventAdjustmentSpec::Total,
                                                         LedgerTransTxt::VendAmountDiffVend_RU,
                                                         _ledgerVoucher.findLedgerVoucherObject().parmCorrection());

        inventAdjustPost.parmDefaultDimension(_custVendTrans.DefaultDimension);

        if (custVendExchAdjParm)
        {
            profitTableRecId = RTax25ProfitTable::findDefaultDimension(_custVendTrans.DefaultDimension).RecId;
            exchAdjDimension.setProfitIds(profitTableRecId, profitTableRecId);
        }
        else
        {
            ledgerCurrencyParameters = LedgerCurrencyParameters_RU::findLedger(Ledger::current());

            exchAdjDimension.setPostingTypes(LedgerPostingType::AmountDiffGain_RU, LedgerPostingType::AmountDiffLoss_RU);
            exchAdjDimension.setProfitIds(ledgerCurrencyParameters.rTax25ProfitTableProfitVend, ledgerCurrencyParameters.rTax25ProfitTableLossVend);
        }

        inventAdjustPost.parmRTax25Profit(exchAdjDimension);

        inventAdjustPostSecCur = new InventAdjustPostSecCur_RU(custVendTransPostingLogLoc.InventVoucher ? custVendTransPostingLogLoc.InventVoucher : _custVendTrans.Voucher,
                                                               inventReverseDate ? inventReverseDate : _custVendTrans.TransDate,
                                                               InventAdjustmentSpec::Total,
                                                               LedgerTransTxt::VendAmountDiffVend_RU,
                                                               _ledgerVoucher.findOrCreateReferenceSecCur_RU().parmCorrection());

        inventAdjustPostSecCur.parmDefaultDimension(_custVendTrans.DefaultDimension);

        _ledgerVoucher.restoreReferenceSecCur_RU();

        if (custVendExchAdjParm)
        {
            inventAdjustPost.parmCurrencyCode(_custVendTrans.CurrencyCode);
            inventAdjustPostSecCur.parmCurrencyCode(_custVendTrans.CurrencyCode);
        }

        while select forupdate inventSettlement
            where inventSettlement.Voucher == (custVendTransPostingLogLoc.InventVoucher ? custVendTransPostingLogLoc.InventVoucher : _reverseVoucher) &&
                  inventSettlement.TransDate == (custVendTransPostingLogLoc.InventDate ? custVendTransPostingLogLoc.InventDate : _reverseDate) &&
                  inventSettlement.Cancelled == NoYes::No
        {
            inventTrans = inventSettlement.inventTrans(true);

            if (! inventSettlement.checkRefInventTrans_RU(inventTrans))
            {
                throw error("@SYS18447");
            }

            if (! InventClosing::checkOpen(inventTrans.DateFinancial))
            {
                throw error("@SYS18447");
            }

            this.setInventTransAdjustment(inventSettlement, inventTrans);

            inventTrans.update();

            inventSettlement.Cancelled = NoYes::Yes;
            inventSettlement.update();

            cancelSettlement.clear();
            cancelSettlement = inventSettlement.data();

            cancelSettlement.TransDate = inventReverseDate ? inventReverseDate : _custVendTrans.TransDate;
            cancelSettlement.Voucher = custVendTransPostingLogLoc.InventVoucher ? custVendTransPostingLogLoc.InventVoucher : _custVendTrans.Voucher;
            cancelSettlement.QtySettled = -inventSettlement.QtySettled;
            cancelSettlement.CostAmountSettled = -inventSettlement.CostAmountSettled;
            cancelSettlement.CostAmountAdjustment = -inventSettlement.CostAmountAdjustment;
            cancelSettlement.Posted = NoYes::No;
            cancelSettlement.insert();
        }

        inventAdjustPost.parmLedgerTransType_RU(_custVendTrans.TransType);
        inventAdjustPost.updateNow(_ledgerVoucher);

        inventAdjustPostSecCur.updateNow(_ledgerVoucher);

        if (prevLedgerVoucherObject)
        {
            _ledgerVoucher.lastVoucher(prevLedgerVoucherObject.parmVoucher());
            _ledgerVoucher.lastTransDate(prevLedgerVoucherObject.parmTransDate());
            _ledgerVoucher.findLedgerVoucherObject();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventTransAdjustment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets adjusted values in inventory transaction depending on transaction currency type.
    /// </summary>
    /// <param name = "_inventSettlement">The <c>InventSettlement</c> table.</param>
    /// <param name = "_inventTrans">The <c>The InventTrans</c> table.</param>
    protected void setInventTransAdjustment(InventSettlement _inventSettlement, InventTrans _inventTrans)
    {
        switch (_inventSettlement.InventTransCurrency_RU)
        {
            case InventTransCurrency_RU::PrimaryCur :
                _inventTrans.QtySettled -= _inventSettlement.QtySettled;
                _inventTrans.CostAmountSettled -= _inventSettlement.CostAmountSettled;
                _inventTrans.CostAmountAdjustment -= _inventSettlement.CostAmountAdjustment;

                if (_inventTrans.Qty > 0)
                {
                    _inventTrans.CostAmountStd = _inventTrans.costValue();
                }
                break;

            case InventTransCurrency_RU::SecondaryCur :
                _inventTrans.QtySettledSecCur_RU -= _inventSettlement.QtySettled;
                _inventTrans.CostAmountSettledSecCur_RU -= _inventSettlement.CostAmountSettled;
                _inventTrans.CostAmountSecCurAdjustment_RU -= _inventSettlement.CostAmountAdjustment;

                if (_inventTrans.Qty > 0)
                {
                    _inventTrans.CostAmountStdSecCur_RU = _inventTrans.costValueSecCur_RU();
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupReverseDiscount</Name>
				<Source><![CDATA[
    void setupReverseDiscount()
    {
        discountLedgerDimension = this.cashDiscountLedgerDimension(custVendTrans);

        if (!voucher)
        {
            this.setVoucher();
        }
        cashDiscPostingType = LedgerPostingType::VendCashDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupReverseExchAdjustment</Name>
				<Source><![CDATA[
    void setupReverseExchAdjustment(NoYes _realized)
    {
        CurrencyGainLossAccountType accountType;

        if (_realized)
        {
            if (custVendTrans.ExchAdjustmentRealized > 0)
            {
                accountType = CurrencyGainLossAccountType::RealizedGain;
                exchAdjustmentPostingType = LedgerPostingType::ExchRateGain;
            }
            else
            {
                accountType = CurrencyGainLossAccountType::RealizedLoss;
                exchAdjustmentPostingType = LedgerPostingType::ExchRateLoss;
            }
        }
        else
        {
            if (custVendTrans.ExchAdjustmentUnrealized > 0)
            {
                accountType = CurrencyGainLossAccountType::UnrealizedGain;
                exchAdjustmentPostingType = LedgerPostingType::ExchRateGain;
            }
            else
            {
                accountType = CurrencyGainLossAccountType::UnrealizedLoss;
                exchAdjustmentPostingType = LedgerPostingType::ExchRateLoss;
            }
        }

        exchAdjLedgerDimension = CurrencyLedgerGainLossAccount::ledgerDimension(
            Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId),
            custVendTrans.CurrencyCode,
            accountType);

        if (!voucher)
        {
            this.setVoucher();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupReversePennyDiff</Name>
				<Source><![CDATA[
    void setupReversePennyDiff()
    {
        AmountMST pennyDiffMst = CurrencyExchangeHelper::mstAmount(custVendSettlement.PennyDiff, custVendTrans.CurrencyCode, custVendTrans.TransDate, UnknownNoYes::No, custVendTrans.AmountMST / custVendTrans.AmountCur * 100);

        if (abs(pennyDiffMst) <= this.maxMSTDiff())
        {
            pennyDiffLedgerDimension = LedgerSystemAccounts::getDefaultAccount(LedgerPostingType::MSTDiff);
        }
        else
        {
            pennyDiffLedgerDimension = this.cashDiscountLedgerDimension(custVendTrans);
            if (!pennyDiffLedgerDimension)
            {
                throw error(strFmt("@SYS24816", LedgerPostingType::VendCashDisc));
            }
        }
        if (!voucher)
        {
            this.setVoucher();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVoucher</Name>
				<Source><![CDATA[
    protected void setVoucher()
    {
        NumberSeq numberSeq;

        numberSeq = NumberSeq::newGetVoucher(VendParameters::numRefVendPaymentVoucher());
        voucher = numberSeq.voucher();
    }

]]></Source>
			</Method>
			<Method>
				<Name>summaryLedgerDimension</Name>
				<Source><![CDATA[
    LedgerDimensionDefaultAccount summaryLedgerDimension()
    {
        return VendLedgerAccounts::summaryLedgerDimension(custVendTrans.AccountNum, custVendTrans.PostingProfile);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate()
    {
        PurchBookVATProcessLogTrans_RU processLogTrans;
        PurchBookVATProcessLogTransOper_RU processLogTransOper;
        SalesBookVATProcessLogTrans_RU salesBookProcessLogTrans;
        SalesBookVATProcessLogTransOper_RU salesBookProcessLogTransOper;
        FactureJour_RU factureJour;
        CustVendTransPostingLog_RU custVendTransPostingLog;
        
        boolean ret = super();

        if (ret)
        {
            VendInvoiceJour vendInvoiceJour;

            // Retrieve the Prepayment Invoice record
            select firstOnly RecId from vendInvoiceJour
                where vendInvoiceJour.LedgerVoucher == custVendTrans.Voucher
                    && vendInvoiceJour.InvoiceAccount == custVendTrans.AccountNum
                    && vendInvoiceJour.InvoiceDate == custVendTrans.TransDate
                    && vendInvoiceJour.InvoiceType == PurchInvoiceType::VendorAdvance;

            if (vendInvoiceJour)
            {
                VendInvoiceTrans prepaymentApplicationTrans;
                VendInvoiceTrans prepaymentReversalTrans;

                // Prepayment invoice applications cannot be reversed while applied to an invoice.
                select firstOnly RecId from prepaymentApplicationTrans
                    where prepaymentApplicationTrans.AdvanceApplicationId == vendInvoiceJour.RecId
                        && prepaymentApplicationTrans.LineType == PurchInvoiceLineType::AdvanceApplication
                    notexists join prepaymentReversalTrans
                        where prepaymentReversalTrans.AdvanceApplicationId == prepaymentApplicationTrans.RecId
                            && prepaymentReversalTrans.LineType == PurchInvoiceLineType::ReverseAdvanceApplication;

                if (prepaymentApplicationTrans)
                {
                    ret = checkFailed("@AccountsPayable:PrepaymentSettlementError");
                }
            }
        }

        if (ret)
        {
            if (custVendTrans.TransType == LedgerTransType::ExchAdjustment ||
                custVendTrans.TransType == LedgerTransType::AdvanceAdjustment_RU ||
                custVendTrans.TransType == LedgerTransType::RTax25_BadDebtCreditAmortisation ||
                custVendTrans.TransType == LedgerTransType::RTax25_BadDebtDebitAmortisation ||
                custVendTransOffset.TransType == LedgerTransType::ExchAdjustment ||
                custVendTransOffset.TransType == LedgerTransType::AdvanceAdjustment_RU ||
                custVendTransOffset.TransType == LedgerTransType::RTax25_BadDebtCreditAmortisation ||
                custVendTransOffset.TransType == LedgerTransType::RTax25_BadDebtDebitAmortisation)
            {
                return ret;
            }

            if (transactionDate != custVendSettlement.TransDate)
            {
                ret = VendTrans::checkIfCanBeSettled_RU(custVendTrans,
                                                        custVendTransOffset,
                                                        transactionDate);
            }
            else
            {
                select firstonly RecId from processLogTrans
                exists join processLogTransOper
                    where processLogTrans.RecId == processLogTransOper.RefRecId &&
                          processLogTrans.SettlementRecId == custVendSettlement.RecId &&
                          processLogTransOper.CanceledRefRecId == 0;

                if (processLogTrans.RecId)
                {
                    ret = checkFailed("@GLS101112");
                }

                if (custVendTrans.Prepayment || custVendTransOffset.Prepayment)
                {
                    select firstonly RecId from salesBookProcessLogTrans
                    exists join salesBookProcessLogTransOper
                        where salesBookProcessLogTrans.RecId == salesBookProcessLogTransOper.RefRecId &&
                              salesBookProcessLogTrans.SettlementRecId == custVendSettlement.RecId &&
                              salesBookProcessLogTransOper.CanceledRefRecId == 0;

                    if (salesBookProcessLogTrans.RecId)
                    {
                        ret = checkFailed("@GLS113568");
                    }
                }

                if (ret && custVendSettlement.ExchAdjustment)
                {
                    select firstonly FactureId from factureJour
                        where (factureJour.FactureType == FactureType_RU::AmoutDifference ||
                               factureJour.FactureType == FactureType_RU::ExchAdj ||
                               factureJour.FactureType == FactureType_RU::AdvanceAdjustment) &&
                               factureJour.Reversed == NoYes::No &&
                               factureJour.Module == FactureModule_RU::Vend &&
                               factureJour.CustVendInvoiceAccount == custVendTrans.AccountNum
                    exists join custVendTransPostingLog
                        where custVendTransPostingLog.RecId == factureJour.PostingLogRecId &&
                             ((custVendTransPostingLog.TransRecId == custVendSettlement.TransRecId &&
                               custVendTransPostingLog.TransCompany == custVendSettlement.TransCompany &&
                               custVendTransPostingLog.OffSetRecId == custVendSettlement.OffsetRecId &&
                               custVendTransPostingLog.OffsetCompany == custVendSettlement.OffsetCompany) ||
                              (custVendTransPostingLog.TransRecId == custVendSettlement.OffsetRecId &&
                               custVendTransPostingLog.TransCompany == custVendSettlement.OffsetCompany &&
                               custVendTransPostingLog.OffSetRecId == custVendSettlement.TransRecId &&
                               custVendTransPostingLog.OffsetCompany == custVendSettlement.TransCompany)) &&
                              custVendTransPostingLog.TransDate == custVendSettlement.TransDate &&
                              custVendTransPostingLog.Reversed == NoYes::No;

                    if (factureJour.FactureId)
                    {
                        select firstonly RecId from processLogTrans
                        exists join processLogTransOper
                            where processLogTrans.FactureId == factureJour.FactureId &&
                                  processLogTrans.SettlementDate == custVendSettlement.TransDate &&
                                ((processLogTrans.InvoiceRecIdRef == custVendSettlement.TransRecId &&
                                  processLogTrans.InvoiceCompany == custVendSettlement.TransCompany &&
                                  processLogTrans.PaymentRecIdRef == custVendSettlement.OffsetRecId &&
                                  processLogTrans.PaymentCompany == custVendSettlement.OffsetCompany) ||
                                 (processLogTrans.InvoiceRecIdRef == custVendSettlement.OffsetRecId &&
                                  processLogTrans.InvoiceCompany == custVendSettlement.OffsetCompany &&
                                  processLogTrans.PaymentRecIdRef == custVendSettlement.TransRecId &&
                                  processLogTrans.PaymentCompany == custVendSettlement.TransCompany)) &&
                                  processLogTrans.RecId == processLogTransOper.RefRecId &&
                                  processLogTransOper.CanceledRefRecId == 0;

                        if (processLogTrans.RecId)
                        {
                            ret = checkFailed("@GLS101112");
                        }
                    }
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>